<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微服务网关与安全</title>
      <link href="/2021/03/31/wei-fu-wu-wang-guan-yu-an-quan/"/>
      <url>/2021/03/31/wei-fu-wu-wang-guan-yu-an-quan/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>API Gateway</code> 网关服务作为微服务架构中系统外部与内部的网络屏障，安全策略的应用是必不可少的。我们知道在微服务架构设计中有一个重要原则，即服务的单一责任性，尤其是对于某一业务服务而言，理想状态下我们希望其仅承担某一项业务职责。而系统的安全问题是一个全局的抽象问题，我们并不希望安全策略的应用侵入到业务代码中。在大部分系统中安全检验主要是针对系统外部对系统内部的请求而言，而对于系统内部服务间的 <code>RPC</code> 调用一般不需要进行严格的安全校验，当然一些复杂系统内部可能会分为高权限区域与低权限区域，由低到高的数据访问依然需要通过网关。因此网关服务无论作为系统内外的屏障，还是子系统间的屏障，由 <code>API Gateway</code> 承担系统安全拦截的职责不失为是一个合理的选择，在此背景下业务服务可以更加专注到业务开发中，同时针对系统认为有风险的访问，可以将拦截行为前置到网关中，很大程度上减轻了一部分对后端业务服务的负载，同时把安全策略相关的代码从业务服务剥离后，业务服务无需加载安全相关的资源，提供了系统整体的资源利用率。</p><span id="more"></span></blockquote><h2 id="无网关状态下的服务安全"><a href="#无网关状态下的服务安全" class="headerlink" title="无网关状态下的服务安全"></a>无网关状态下的服务安全</h2><hr><p>当一个系统没有建立 <code>API Gateway</code> 网关服务时，我们往往会在每个需要对外解析的服务中加入安全策略的实现，例如在 <code>MVC</code> 的编程模型下，我们可以在各个服务中集成一系列过滤器以达到安全校验的目的，这些过滤器往往作用于 <code>Controller</code> 控制器之前，可以在用户请求到达控制层之前达到拦截作用。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagessecurity-without-gateway.png"></p><p>在这种设计下如果我们针对每个服务单独维护一套安全校验的代码，那么一方面系统安全策略难以统一，另一方面维护成本较高。此时我们可以将一系列安全相关的过滤器统一维护为一个公用组件，各服务统一依赖于该组件，达到代码的高度复用，事实上我在工作中也曾使用这种方式处理服务安全问题。当然这种方案依然有其不足之处，例如在对安全组件进行迭代升级时，需要在每个服务更新依赖版本号，存在一定维护成本，同时安全组件本身也会占用一定的服务资源，带来性能开销。我们应该意识到在缺少 <code>API</code> 网关的情况下，意味着系统需要对外暴露更多的服务，虽然我们可以针对每个服务严格控制其安全规则，但暴露面越大的同时打击面也就越大，在系统未来的扩展中难免有疏忽之处，存在安全风险。</p><h2 id="网关服务集成安全策略"><a href="#网关服务集成安全策略" class="headerlink" title="网关服务集成安全策略"></a>网关服务集成安全策略</h2><hr><p>上文我们说到在业务服务中集成系统安全措施虽然可行，但存在其缺陷。如果我们的系统中有 <code>API</code> 网关这样的微服务基础设施，由于网关本身是作为系统内外网的网络屏障，天然适合承担系统安全校验的职责。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagessecurity-with-gateway.png"></p><p>其实不光是安全校验的功能，诸如限流，熔断降级，请求缓存，负载均衡等具有通用性的功能组件，将这些功能集成到 <code>API</code> 网关中可以成为我们系统设计的一种重要思路，高度提升代码复用性的同时也易于维护管理。大部分框架会使用责任链模式将这些功能组件组合在一起，根据单一责任原则，设计一系列过滤器，每种过滤器承担某一项功能职责，它们共同连接成一个链条完成对用户请求的拦截工作。而将这个链条放置到 <code>API</code> 网关中可以最大程度地保证这个链条的覆盖性，确保每一个外部请求都必须经过这个链条访问系统内部数据，这对系统的安全性是至关重要的。</p><h2 id="Spring-Cloud-Gateway-中的设计"><a href="#Spring-Cloud-Gateway-中的设计" class="headerlink" title="Spring Cloud Gateway 中的设计"></a>Spring Cloud Gateway 中的设计</h2><hr><p><code>Spring Cloud Gateway</code> 作为 <code>Spirng</code> 官方团队推出的微服务网关解决方案，其中的设计值得我们去思考，同时可以印证自己对于 <code>API</code> 网关的理解。我曾在 <a href="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagessecurity-with-gateway.png">微服务网关 Spring Cloud Gateway 之限流</a> 这篇文章中讨论过 <code>Spring Cloud Gateway</code> 对于限流机制的支持。同时出于自己在工作中对于 <code>API Gateway</code> 的实践需要，找机会对 <code>Spring Cloud Gateway</code> 的源码实现以及设计思想做了进一步探究。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesgateway-process.png"></p><p>这是 <code>Spring Cloud Gateway</code> 官方文档中对于该框架工作流程的概括图，我们可以看到其大概设计与我们上文中提到的网关过滤器设想是非常相似的。<code>Spring Cloud Gateway</code> 框架中内置了大量的过滤器供开发者选择，分为全局过滤器以及针对某一路由的过滤器，路由是一个由开发者定义的概念，开发者可以通过自定义路由规则将某一系列请求分配到某一路由上，这个路由可以是一个服务，也可以是一个接口地址，这完全由开发者决定。借助 <code>Spring Cloud Gateway</code> 内置的过滤器已经可以实现大部分的功能，例如 <code>RequestRateLimiterGatewayFilterFactory</code> 默认集成 <code>Redis</code> 实现基于令牌桶算法的限流功能，<code>SpringCloudCircuitBreakerFilterFactory</code> 通过集成 <code>Spring Cloud Circuit Breaker</code> 组件实现服务熔断功能。但是通过浏览框架内置的过滤器，我们似乎没有找到与安全功能相关的实现。</p><h2 id="Spring-Cloud-Gateway-集成-Spring-Security-安全校验"><a href="#Spring-Cloud-Gateway-集成-Spring-Security-安全校验" class="headerlink" title="Spring Cloud Gateway 集成 Spring Security 安全校验"></a>Spring Cloud Gateway 集成 Spring Security 安全校验</h2><hr><p>我们知道 <code>Spirng</code> 家族生态中有一个安全框架 <code>Spring Security</code>，那么我们是否可以将 <code>Spring Security</code> 提供的安全校验机制集成到 <code>Spring Cloud Gateway</code> 中，避免重复造轮子呢？首先在新版本的 <code>Spring Cloud</code> 体系中 <code>Spring</code> 官方团队为了推动 <code>Reactive</code> 异步体系，因此使用了 <code>Spring Webflux</code>，<code>Project Reactor</code> 等响应式编程技术实现 <code>Spring Cloud Gateway</code>，<code>Spring Cloud Circuit Breaker</code> 等微服务组件。在这个大前提下，如果我们想要集成 <code>Spring Security</code> 框架，也必须是建立在响应式技术栈上，事实上官方针对 <code>Spring Security</code> 也提供了对 <code>Reactive</code> 的支持。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesspring-cloud-gateway-with-security.png"></p><p><code>Spring Security</code> 中的过滤器链本质是一个 <code>WebFilter</code>，在 <code>Spring Webflux</code> 的定义的规范中，<code>WebFilter</code> 是作用于 <code>WebHandler</code> 之前的。<code>Spring Cloud Gateway</code> 中的过滤器链本质是 <code>WebHandler</code> 的一部分，通过翻阅源码可知 <code>Spring Cloud Gateway</code> 通过装配一个 <code>FilteringWebHandler</code> 替代默认的 <code>DispatcherHandler</code> 完成路由分配。因此我们可以知道如果将两者结合使用，那么 <code>Spring Security</code> 中的过滤器顺序是在整个 <code>Spring Cloud Gateway</code> 过滤器链条之前的。在开发过程中，我们不妨先实现 <code>Spring Security</code> 的安全机制，在考虑如何与网关适配。</p><h3 id="Spring-Security-代码实现"><a href="#Spring-Security-代码实现" class="headerlink" title="Spring Security 代码实现"></a>Spring Security 代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 安全配置 * @author Ethan Zhang */</span><span class="token annotation punctuation">@EnableWebFluxSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewaySecurityConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PasswordEncoder</span> PASSWORD_ENCODER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> LOGIN_URL <span class="token operator">=</span> <span class="token string">"/security/login"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> LOGOUT_URL <span class="token operator">=</span> <span class="token string">"/security/logout"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ReactiveUserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomReactiveUserDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SecurityWebFilterChain</span> <span class="token function">springSecurityFilterChain</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpSecurity</span> http<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> http                <span class="token comment">// 跨域处理策略</span>                <span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">configurationSource</span><span class="token punctuation">(</span><span class="token function">corsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 禁用 CSRF</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 身份上下文存储</span>                <span class="token punctuation">.</span><span class="token function">securityContextRepository</span><span class="token punctuation">(</span><span class="token function">redisServerSecurityContextRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 身份认证</span>                <span class="token punctuation">.</span><span class="token function">authorizeExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 表单登录</span>                <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span>LOGIN_URL<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token function">customAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authenticationFailureHandler</span><span class="token punctuation">(</span><span class="token function">customAuthenticationFailureHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 匿名用户</span>                <span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 退出</span>                <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span>LOGOUT_URL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessHandler</span><span class="token punctuation">(</span><span class="token function">customLogoutSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 异常处理</span>                <span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span><span class="token function">customAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span><span class="token function">customAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> PASSWORD_ENCODER<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CustomAuthenticationEntryPoint</span> <span class="token function">customAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CustomAuthenticationSuccessHandler</span> <span class="token function">customAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CustomAuthenticationFailureHandler</span> <span class="token function">customAuthenticationFailureHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomAuthenticationFailureHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CustomAccessDeniedHandler</span> <span class="token function">customAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisServerSecurityContextRepository</span> <span class="token function">redisServerSecurityContextRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisServerSecurityContextRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CustomLogoutSuccessHandler</span> <span class="token function">customLogoutSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomLogoutSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CorsConfigurationSource</span> <span class="token function">corsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> exchange <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowedMethods</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> corsConfiguration<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上文我们提到过 <code>Spring Security</code> 框架提供了针对 <code>Spring Webflux</code> 非阻塞式 <code>Web</code> 应用的支持，我们只需根据官方指引进行相关安全配置即可。我在 <a href="https://ethanzhang.cn/spring-security-yi-shen-fen-ren-zheng.html">Spring Security（一）身份认证</a>，<a href="https://ethanzhang.cn/spring-security-er-quan-xian-guan-li.html">Spring Security（二）权限管理</a> 系列文章中讨论过 <code>Spring Security</code> 的设计思想及实现原理，当中的讨论是基于 <code>Spring MVC</code> 的，事实上 <code>Spring Security</code> 在适配 <code>Reactive</code> 的过程中并没有改变原有的设计架构，主要是在 <code>API</code> 层面进行异步编程的适配。</p><blockquote><p>需要注意的是，我选择将权限拦截机制设定为 <code>permitAll</code>， 在 <code>Spring Security</code> 层面上只进行用户身份认证，而不做权限拦截。因为在微服务架构中，<code>API</code> 网关需要将用户请求路由到不同的服务，而不同的服务的安全配置往往是不同，例如有些服务需要系统后台管理员才能访问，而有些服务直接对游客开放。上文我们提到 <code>Spring Security</code> 的过滤器作用于网关之前，如果我们直接在其中进行权限拦截，就无法实现面向路由的权限个性化。因此在 <code>Spring Security</code> 中我们只进行用户身份认证，用户完成身份认证后即拿到了用户所拥有的权限，而权限校验则后置到 <code>Spring Cloud Gateway</code> 的过滤器中进行。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 基于 redis 的用户认证信息存储 * @author Ethan Zhang */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisServerSecurityContextRepository</span> <span class="token keyword">implements</span> <span class="token class-name">ServerSecurityContextRepository</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> COOKIE_TOKEN_KEY <span class="token operator">=</span> <span class="token string">"ethan-token"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Duration</span> timeout <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ReactiveRedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> reactiveRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">SecurityContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> principal <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>principal <span class="token keyword">instanceof</span> <span class="token class-name">CustomUserDetails</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">CustomUserDetails</span> customUserDetails <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CustomUserDetails</span><span class="token punctuation">)</span> principal<span class="token punctuation">;</span>            <span class="token class-name">String</span> token <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token class-name">ResponseCookie</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>COOKIE_TOKEN_KEY<span class="token punctuation">,</span> token<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">httpOnly</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> customUserDetails<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">></span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span>COOKIE_TOKEN_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>cookie <span class="token operator">-></span> reactiveRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token class-name">CustomUserDetails</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>customUserDetails <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">SecurityContextImpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>customUserDetails<span class="token punctuation">,</span>                                customUserDetails<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> customUserDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于用户的身份认证，核心逻辑是如何将用户身份信息持久化到后端服务，并给用户发放 <code>TOKEN</code>，后续用户凭借 <code>TOKEN</code> 即可访问权限范围内的路由。在 <code>Spring Security</code> 的规范中我们可以实现 <code>ServerSecurityContextRepository</code> 接口自定义用户身份的保存与加载逻辑。在这里我选择使用 <code>redis</code> 实现用户身份信息的持久化，一方面 <code>redis</code> 作为分布式缓存中间件，可以有效达到用户身份信息在分布式系统间的共享，另一方面，<code>redis</code> 提供了 <code>Reactive API</code> 方面的支持，可以与响应式编程技术栈完美适配。在用户完成登录认证后，我们将用户身份信息（包含权限信息）持久化到 <code>redis</code> 中，并向用户浏览器发放 <code>TOKEN</code> 身份令牌。后续该用户再次请求网关服务时，后端即可获取到 <code>TOKEN</code> 从 <code>redis</code> 中取得当前用户的身份信息，并将此信息放入 <code>ServerWebExchange</code> 请求信息中，这些身份权限信息将成为后续完成权限校验的依据。</p><h3 id="Spring-Cloud-Gateway-代码实现"><a href="#Spring-Cloud-Gateway-代码实现" class="headerlink" title="Spring Cloud Gateway 代码实现"></a>Spring Cloud Gateway 代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义权限校验过滤器，用以适配 Spring Cloud Gateway * @author Ethan Zhang */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthorizationGatewayFilterFactory<span class="token punctuation">.</span>Config</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ServerAccessDeniedHandler</span> accessDeniedHandler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthorizationGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-></span> exchange<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token operator">::</span><span class="token function">getPrincipal</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token class-name">CustomUserDetails</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>customUserDetails <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userAuthorities <span class="token operator">=</span> customUserDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">GrantedAuthority</span><span class="token operator">::</span><span class="token function">getAuthority</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> matched <span class="token operator">=</span> userAuthorities<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> matched <span class="token operator">?</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>customUserDetails<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token string">"Authorization failed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token string">"Authorization failed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">doOnSuccess</span><span class="token punctuation">(</span>customUserDetails <span class="token operator">-></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Authorization successful"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>e <span class="token operator">-></span> accessDeniedHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">"authorities"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ShortcutType</span> <span class="token function">shortcutType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ShortcutType</span><span class="token punctuation">.</span>GATHER_LIST<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> authorities <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>Spring Cloud Gateway</code> 中我们通过扩展 <code>AbstractGatewayFilterFactory</code> 达到自定义网关过滤器的目的。<code>AuthorizationGatewayFilterFactory.Config</code> 类用于承载路由权限配置信息，也就说访问该路由需要哪些权限。上文我们提到 <code>Spring Security</code> 中的过滤器已经帮助我们进行了用户请求的身份认证，并将用户身份信息存入了 <code>ServerWebExchange</code> 请求对象中，而 <code>Spring Cloud Gateway</code> 中的网关过滤器位于其后，所以在这里我们可以可轻松地获取到用户身份信息，并取出用户所拥有的权限信息，将其与路由配置中的权限进行比对，即可知道该用户是否具备访问该路由的权限。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">client-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>redis.ethanzhang.cn    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> app<span class="token punctuation">-</span>service          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//app<span class="token punctuation">-</span>service.ethanzhang.cn          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Method=GET<span class="token punctuation">,</span> POST            <span class="token punctuation">-</span> Path=/app/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Authorization=createOrder<span class="token punctuation">,</span> deleteOrder        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>service          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//web<span class="token punctuation">-</span>service.ethanzhang.cn          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Method=GET<span class="token punctuation">,</span> POST            <span class="token punctuation">-</span> Path=/web/<span class="token important">**</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">org</span><span class="token punctuation">:</span>      <span class="token key atrule">springframework</span><span class="token punctuation">:</span>        <span class="token key atrule">security</span><span class="token punctuation">:</span> DEBUG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上文的网关配置为例，我们自定义了一个 <code>Route</code> 路由，<code>ID</code> 为 <code>app-service</code>，如果用户想要访问匹配 <code>/app/**</code> 的任何地址，都需要经过过滤器 <code>AuthorizationGatewayFilter</code> 的权限校验，只有当用户拥有名为 <code>createOrder</code> 和 <code>deleteOrder</code> 的权限时，用户才有权访问该路由。虽然这里只是一个简要的 <code>demo</code>，但是通过这种方式我们可以方面地为系统中的每一个路由定制安全配置，达到用户请求安全拦截的目的。当 <code>Spring Cloud Gateway</code> 集成 <code>Spring Security</code> 后，我相信会成为一个更成熟健壮的微服务网关解决方案。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Security </tag>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈微服务架构设计</title>
      <link href="/2021/03/02/qian-tan-wei-fu-wu-jia-gou-she-ji/"/>
      <url>/2021/03/02/qian-tan-wei-fu-wu-jia-gou-she-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>“架构”一个抽象而看似高端的词汇，我们难以给它一个明确的定义。人们发明了很多描述架构的概念，单体架构、SOA架构、六边形架构、洋葱圈架构、微服务架构等。这些不同概念的定义和思想相互渗透影响，没有清晰的边界。在实践中一个系统往往是参考多种思想形成的综合性产物，因此我们很难判定一个系统究竟属于哪一种架构风格。<a href="https://www.zhihu.com/question/27343287/answer/1184500866">熵增理论为什么让好多人一下子就领悟了？</a> 无意中看到这样一篇文章，似乎能给我们一些启发，软件架构的存在是为了保持系统要素之间的有序性，无论是软件系统还是现实世界广义上的系统，在没有外力介入的情况下，其熵增是不可避免的，万物总是从有序变得无序。一个房间，只要我们不去整理，随着时间的推移，它迟早会变得杂乱无章，而且这个过程发生得简单而自然，因为它符合熵增规律。而架构的本质是要描述一种规则，这种规则限定了在一个房间内，什么东西该放在哪里，当然即使有规则的存在，房间依然会变乱，但是我们会发现房间变乱的速度变慢了。因此我们可以这么说，<strong>架构可以有效地降低系统熵增的速度</strong>。我们知道将一个杂乱的房间打扫干净需要耗费巨大的心力，因为逆熵增规律而动总是艰难的。在软件世界中，<strong>重构</strong>这种行为的本质是使用外力作用于孤立系统，使之完成熵减过程。虽然重构的代价很大，但确是不可避免的，例如在一个系统不同的发展阶段，适合它的架构风格是不同的，将一个系统从单体架构演化为微服务架构必然意味着重构。当然很多情况下重构是对前期错误设计付出的代价，一个早期的微小的错误设计很可能引发蝴蝶效应，造成系统后期巨大的缺陷，当系统设计者意识到这个缺陷已经导致系统无法维护时，重构就被提上了议程，良好的架构设计就是为了减少这种不必要代价的产生。<a href="https://blog.csdn.net/significantfrank/article/details/110934799">COLA 4.0：应用架构的最佳实践</a> 这篇博客中作者对于架构的思考可以给我们一些启发，一个良好的架构必须要达到的目的是<strong>关注点分离</strong>，所谓的分离指的是<strong>业务复杂度</strong>和<strong>技术复杂度</strong>的分离，例如在开发创建订单的业务时，不应该考虑分布式锁是基于 <code>Redis</code> 还是 <code>Zookeeper</code> 来实现，这是两个维度的问题，技术复杂度始终不应该侵入业务复杂度，评价一个技术框架实现是否优秀的重要指标就是<strong>侵入性</strong>，技术组件向上暴露的 <code>API</code> 应该是抽象简洁的，对于调用者来说无需关心其实现细节。无论是业务逻辑还是技术细节，控制其复杂度的根本能力是<strong>抽象能力</strong>，抽象就是寻找事物的共性，并针对这种共性建立通用的解决方案。业务问题往往更为多变，因此共性更加难以寻找，而不同业务面临的技术问题往往是类似的，这也是为什么软件领域内大量的开源框架总是为了解决某一类技术问题，而没有面向业务的万能良药。但是在业务的设计中，依然可以遵循某一种指导思想，例如<strong>领域驱动设计，简称 DDD（Domain Driven Design）</strong>就是这样一种思想。因此对微服务架构的探讨也应该基于这两个维度，业务逻辑和技术细节。</em></p></blockquote><span id="more"></span><h2 id="从业务设计层面来谈"><a href="#从业务设计层面来谈" class="headerlink" title="从业务设计层面来谈"></a>从业务设计层面来谈</h2><hr><p>要设计良好的微服务架构，根本在于业务逻辑的划分。因为在技术层面上，大量的开源组织和云服务厂商已经提供了较为成熟的解决方案，虽然将这些技术方案整合起来也需要对微服务技术体系有一定程度的认知，但整体来讲由于技术细节本身具有良好的抽象性，容易在行业内达成一致共识，所以构建微服务技术层面的基础设施反而不是风险最大的。而业务的划分则是仁者见仁，智者见智，难以形成统一的标准。但是无论业务本身有多大的差异性，在设计过程中我们依然要遵循一些基本原则，也可以利用一些设计思想尽可能降低业务复杂度。</p><h3 id="怎么理解-“微”"><a href="#怎么理解-“微”" class="headerlink" title="怎么理解 “微”"></a>怎么理解 “微”</h3><p>微服务中的 “微” 告诉我们服务的粒度应该尽可能小，这有利于服务功能具备高度的复用性。那么所谓的服务大小是基于什么维度去判断呢？是代码量还是服务所需的硬件资源？事实上，微服务划分最重要的依据就是业务职责的独立性和单一性，我们知道设计模式中有一个原则是单一责任原则，<strong>软件系统的一切设计都是为了达到高内聚，低耦合</strong>。一个服务承担某一类业务模块的功能，意味着该模块的逻辑可以内聚在服务内部，具有独立的数据库和数据结构，甚至可以采用不同的持久化方案，对外只需提供尽可能简洁的 <code>API</code>，避免复杂度外露。追求服务粒度小并不意味着业务请求的调用链会被拉得很长，如果业务边界划分得当，服务间交互应该不是那么频繁的，而且在微服务架构中，应该尽可能使用异步或响应式的编程模型，避免服务消费者强依赖于服务提供者。</p><h3 id="基于-DDD（领域驱动设计）的分层架构"><a href="#基于-DDD（领域驱动设计）的分层架构" class="headerlink" title="基于 DDD（领域驱动设计）的分层架构"></a>基于 DDD（领域驱动设计）的分层架构</h3><p>DDD 告诉我们一个系统应该划分为展现层，应用层，领域层以及基础设施层，业务复杂度集中于领域层，而技术复杂度集中于基础设施层，实现关注点分离。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/images%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt="分层架构"></p><ul><li><p>展现层：又被称为 User Interface 用户接口层，在前后端分离的架构下该层一般由前端或移动端实现，通过调用应用层 API 获取 VO（View Object）并将业务数据以某种形式展现给用户或另一个计算机系统。</p></li><li><p>应用层：需要从粗粒度上定义业务 API，但应用层本身应该是很薄的一层，尽量不承担业务逻辑，不包含业务规则及业务知识，仅仅作为业务任务的编排器，类似 <code>Java</code> 中 <code>CompletableFuture</code> 对异步任务的编排，协调多个领域聚合共同完成一项业务任务。对于系统中的查询类操作，应用层相当于一个 API 组合器，往往需要聚合多个领域模型中的数据交付给展现层，此时针对领域层的多个查询操作大部分是可以并行的，因此在应用层中非常适合实践异步或响应式编程模型。一般来讲应用层的数据对象被定义为 DTO（Data Transfer Object），与展现层通过 VO 交互，与领域层通过 DO（Domain Object）交互，因此往往需要大量的 <code>Converter</code> 类型转换器。</p></li><li><p>领域层：所谓的“领域驱动设计”，领域层是整个系统的核心层，负责表达大部分的业务概念，是业务复杂度的集中地，并且系统的设计应该是从建立领域模型开始的，同时在微服务架构中，领域模型应该作为服务划分的重要依据。</p></li><li><p>基础设施层：作为技术复杂度的集中地，为应用层和领域层提供技术能力，例如持久化方案，缓存机制，消息 API，分布式事务支持等。需要注意的是基础设施层应该遵循依赖导致原则，避免暴露内部的实现细节，对外应该提供抽象的 API，避免业务代码直接依赖于外部技术组件，以免在未来切换技术实现方案时造成巨大的升级成本。</p></li></ul><h3 id="依赖倒置与防腐层"><a href="#依赖倒置与防腐层" class="headerlink" title="依赖倒置与防腐层"></a>依赖倒置与防腐层</h3><p>在谈论设计模式时离不开一个重要的原则<strong>“依赖导致原则（Dependency Inversion）”</strong>，对于一个软件模块或组件而言，无论本身是具体还是抽象，都应该尽可能依赖于抽象，因此当我们需要在两个具体模块之间建立依赖关系时，应该建立一个抽象层将依赖关系隔开，在微服务架构中也把这种抽象层称为防腐层。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/images%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0.png" alt="服务注册发现"></p><p>为什么在 <code>Java</code> 开发过程中需要 <code>Spring</code> 的 <code>BeanFactory</code> 这样的 <code>IOC</code> 容器？为什么在微服务架构中需要服务注册中心？因为无论是 <code>Java Bean</code> 之间的强依赖，还是 <code>microservices</code> 之间的强依赖，最终的结果是大幅增加系统的复杂度，造成熵增。因此我们需要一个中心化的容器，维护服务提供者的信息，并向服务消费者提供这样的信息，避免两者直接交互。从 <code>Java Bean</code> 的角度来看，<code>BeanFactory</code> 就是这样的容器，从微服务的角度来看，服务注册中心就是这样的容器。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/images%E6%8A%BD%E8%B1%A1%E5%B1%82.png" alt="抽象层"> </p><p>我们在前文说到优秀架构的目标是关注点分离，从基于 DDD 的分层架构来看，技术复杂度被集中于基础设施层，那就意味着基础设施层必然需要依然大量的第三方依赖，技术中间件等。但是这些技术细节不应该暴露到业务层面上，例如系统原本依赖于 <code>RabbitMQ</code> 实现分布式消息机制，未来由于某种原因需要切换为 <code>RocketMQ</code> 实现，此时如果业务代码直接依赖于 <code>RabbitMQ</code> 的消息 <code>API</code>，那么牵一发而动全身，切换工作量是较大的。因此较好的实现策略是在业务代码与技术实现之间建立抽象层，从设计模式的角度来讲比较符合 <code>Adapter Pattern（适配器模式）</code> 和 <code>Facade Pattern（门面模式）</code> 的思想。适配器模式用于适配不同的技术方案，门面模式用于向上层暴露抽象 <code>API</code>。所谓的“防腐层”就是防止外部依赖逐渐腐化系统内部的代码，因为外部依赖随着版本的升级，其代码改动是不可控的，需要抽象层与之解耦。</p><h3 id="事件驱动-业务解耦的利器"><a href="#事件驱动-业务解耦的利器" class="headerlink" title="事件驱动 - 业务解耦的利器"></a>事件驱动 - 业务解耦的利器</h3><p>分布式 BASE 理论认为要构建一个具备弹性的分布式系统，需要具备三个要素：</p><ul><li><p>Basically Available（基本可用）</p></li><li><p>Soft-state（软状态）</p></li><li><p>Eventually Consistent（最终一致性）</p></li></ul><p>由于分布式系统中网络环境的复杂性，我们无法利用单体服务基于关系型数据库 ACID 事务的特性达成数据强一致性。而如果使用分布式事务的方案追求数据的强一致性，那么意味着系统中所有的调用都必须是同步的，想象一下如果在一个长调用链中，任何一个服务的崩溃都会导致该业务流程不可用，此时系统的可用性肯定是不高的，因此我们需要在系统的可用性和一致性之间取得一种平衡。BASE 理论建议我们追求数据的最终一致性，所以我们需要在服务间建立一种异步通信机制，事件驱动就是这样一种思想。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/images%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8.png"></p><p>在系统中充满了这样的场景，当行为 A 发生时需要触发行为 B，此时如果行为 A 必须关注行为 B 执行的结果，那么我们不得不采取同步的方式在行为 A 的代码中调用行为 B，如果两者位于不同的服务中，那么我们会采用 RPC 调用的方式，此时的代码具有侵入性，行为 B 的代码侵入了行为 A，意味着修改 B 模块就必然影响 A 模块。而事实上系统的大部分行为在执行时无需相互关注执行结果，我们应该尽可能采用异步编程的模型去实现。在行为 A 执行完成后，我们可以发布一个特定的 <code>Event</code> 事件，B 模块注册为该事件的监听器，监听到事件发生后，触发行为 B 即可。随着系统业务的发展，会有新的模块需要关注该事件，只需注册新的监听器即可，这些行为对于模块 A 以及模块 B 都是不可见的，就达到了关注点分离的目的。事件监听机制是观察者模式的一种延伸，多个 <code>Observer</code> 观察者关注同个主题，观察者之间是不可见的。</p><h2 id="从技术细节层面来谈"><a href="#从技术细节层面来谈" class="headerlink" title="从技术细节层面来谈"></a>从技术细节层面来谈</h2><hr><p><a href="https://mp.weixin.qq.com/s/1VB2K_lHG4yRc8pu9_qgOw">十年再出发，Dubbo 3.0 Preview 即将在 3 月发布</a> 随着 <code>Dubbo</code> 新版本的发布，阿里官方在这篇文章中探讨了 <code>Dubbo</code> 与 <code>Spring Cloud</code> 和 <code>gRPC</code> 之间的关系。在几年之前，当一家企业决定实践微服务架构时，时常会面临技术选型的困惑，是应该选择以 <code>Dubbo</code> 为核心阿里开源的一系列技术组件作为方案还是应该拥抱 <code>Spring Cloud</code>体系？事实上站在今天的角度来看，这个问题已经没有多大意义，因为这两者不是互斥的，完全可以组合使用。<code>Dubbo</code> 已经成为 <code>Spring Cloud Alibaba</code> 中的 <code>RPC</code> 调用实现方案，而 <code>Spring Cloud Alibaba</code> 本身由作为 <code>Spring Cloud</code> 抽象标准的一种实现。<a href="https://mp.weixin.qq.com/s/V6K6Ehq8xdRwnMbKJWG7_g">Spring Cloud 2020.0.0 正式发布，对开发者来说意味着什么？</a> 随着近些年 <code>Spring Cloud</code> 体系的快速发展，<code>Spring Cloud</code> 已经成为 <code>Java</code> 领域内微服务框架的既定标准，<code>Spring</code> 官方团队结合大量业界经验逐渐抽象出一套微服务通用架构模式标准。<code>Spring</code> 的主要目的在于建立标准，达成共识，而各类开源或商业组织会建立自己的设配方案，作为 <code>Spring Cloud</code> 的标准的一种实现。开发者完全可以根据需求灵活组合，选取最符合应用场景的实现方案。</p><h3 id="Spring-Cloud-如何建立抽象"><a href="#Spring-Cloud-如何建立抽象" class="headerlink" title="Spring Cloud 如何建立抽象"></a>Spring Cloud 如何建立抽象</h3><p>我们知道早期的 <code>Spring Cloud</code> 框架一直把 <code>Netflix</code> 套件作为默认实现，两者几乎可以划上等号，<code>Eureka</code>、<code>Ribbon</code>、<code>Hystrix</code>、<code>Zuul</code> 这些 <code>Netflix</code> 的开源组件共用组成了早期的 <code>Spring Cloud</code> 框架。而在 <code>Spring</code> 的规划中，<code>Netflix</code> 套件是要被逐渐废弃的，因为 <code>Spring</code> 需要建立更高级别的抽象来制定业界规范，终于在官方最新发布的 <code>Spring Cloud 2020</code> 版本中，除了 <code>Eureka</code> 服务注册中心以外，其余的 <code>Netflix</code> 组件依赖已经被移除，同时官方提供了替代方案。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/images%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210227194706.png"></p><p>根据 <code>Spring Cloud</code> 描绘的微服务架构图我们可以知道一个由微服务组成的系统总要解决几类技术问题，事实上在 <code>Spring Cloud Commons</code> 模块中已经抽象出了这些概念：</p><ul><li><p>Service registration and discovery（服务注册与发现）</p></li><li><p>Distributed/versioned configuration（分布式并基于版本的外部化配置）</p></li><li><p>Routing（网关路由）</p></li><li><p>Service-to-service calls（服务间 RPC 调用）</p></li><li><p>Load balancing（负载均衡）</p></li><li><p>Circuit Breakers（服务熔断与降级）</p></li><li><p>Global locks（全局分布式锁）</p></li><li><p>Leadership election and cluster state（主节点选举算法以及分布式状态同步）</p></li><li><p>Distributed messaging（分布式消息）</p></li></ul><h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><p>我们可以看下 <code>Spring</code> 官方对于 <code>Service discovery</code> 的描述：</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/images%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210228112651.png" alt="service-discovery"></p><p>在微服务架构中，服务消费者（Consumer）不能总是知道服务提供者（Provider）的位置（主要指 IP 和端口号），因此我们需要一些中间件来帮助我们维护服务提供者的位置列表，并且基于服务弹性伸缩的需求，这个列表需要根据情况的变化动态更新。这样的中间件有很多，例如 <code>Eureka</code>、<code>Consul</code>、<code>Zookeeper</code>、<code>Nacos</code> 等，而我们在前文提到过业务程序本身不应该直接依赖于技术中间件，因此在 <code>Spring Cloud Commons</code> 模块中为我们提供了一个抽象接口 <code>DiscovertClient</code> 用以描述该服务具有服务发现的能力，并且我们可以集成 <code>Spring Cloud Load Balancer</code> 模块是服务发现客户端具备客户端负载均衡的能力，从服务提供者列表中选取最恰当的服务实例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DiscoveryClient</span> <span class="token keyword">extends</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> DEFAULT_ORDER <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">String</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> <span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> DEFAULT_ORDER<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>DiscoveryClient</code> 是对于服务发现客户端的抽象，通过它我们可以 <code>getServices</code> 获取所有 <code>Provider</code> 列表，同时根据某个 <code>Provider</code> 的 <code>serivceId</code> 获取其实例列表。任何一个服务想要获得服务发现的能力，都应该在其 <code>Spring</code> 容器中注册 <code>DiscoveryClient</code> 的实例，当然其具体实现取决于我们的技术选型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServiceRegistry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span> <span class="token keyword">extends</span> <span class="token class-name">Registration</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">R</span> registration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">deregister</span><span class="token punctuation">(</span><span class="token class-name">R</span> registration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">R</span> registration<span class="token punctuation">,</span> <span class="token class-name">String</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token class-name">R</span> registration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务发现的前提是服务注册，系统中的服务提供者都应该是一个服务注册客户端，而 <code>ServiceRegistry</code> 就是对这一种能力的抽象，<code>Registration</code> 是对注册信息的抽象描述。一般来讲微服务架构中的大部分服务即是服务消费者，同时也是服务提供者，所以大部分情况下一个服务应该同时实现 <code>DiscoveryClient</code> 和 <code>ServiceRegistry</code>，同时具备服务发现和服务注册的能力。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAutoServiceRegistration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span> <span class="token keyword">extends</span> <span class="token class-name">Registration</span><span class="token punctuation">></span></span><span class="token keyword">implements</span> <span class="token class-name">AutoServiceRegistration</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebServerInitializedEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServiceRegistry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> serviceRegistry<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> port <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">AtomicBoolean</span> running <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> context<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">WebServerInitializedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">bind</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">WebServerInitializedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebServerApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"management"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableWebServerApplicationContext</span><span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Discovery Lifecycle disabled. Not starting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// only initialize if nonSecurePort is greater than 0 and it isn't already running</span><span class="token comment">// because of containerPortInitializer below</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>running<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstancePreRegisteredEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldRegisterManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">registerManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstanceRegisteredEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>running<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">R</span> registration <span class="token operator">=</span> <span class="token function">getManagementRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>registration <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>serviceRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前文我们提到过微服务架构应该具备服务自动弹性伸缩的机制，当一个新的服务实例被启动时，服务注册的行为应该是被自动触发。从 <code>AbstractAutoServiceRegistration</code> 我们可以看到 <code>Spring Cloud</code> 已经提供了这样的抽象模板。当 <code>WebServer</code> 启动时，<code>WebServerInitializedEvent</code> 事件被发布，基于 <code>Spring</code> 的事件驱动机制，<code>AbstractAutoServiceRegistration</code> 作为该事件的监听器，<code>bind</code> 方法被调用，触发服务注册的相关逻辑。<code>AtomicBoolean</code> 作为锁确保注册行为只会发生一次，而具体的注册行为由 <code>ServiceRegistry</code> 的实现类决定，<code>Spring Cloud</code> 作为标准的制定者，抽象的定义者，不会强制捆绑某一种实现，具体的实现逻辑取决于我们集成的外部依赖。</p><h3 id="Spring-Cloud-LoadBalancer"><a href="#Spring-Cloud-LoadBalancer" class="headerlink" title="Spring Cloud LoadBalancer"></a>Spring Cloud LoadBalancer</h3><p>作为 <code>Netflix Ribbon</code> 的替代方案，<code>Spring Cloud LoadBalancer</code> 是一个非常新的模块，它一度只是 <code>Spring Cloud</code> 孵化器里的一个小项目，并且一度搁浅。后再经过重启，发展，现行使其伟大使命，正式用于完全替换 <code>Ribbon</code>，成为 <code>Spring Cloud</code> 负载均衡器唯一实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancerClient</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceInstanceChooser</span> <span class="token punctuation">&#123;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">,</span> <span class="token class-name">LoadBalancerRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">,</span> <span class="token class-name">ServiceInstance</span> serviceInstance<span class="token punctuation">,</span> <span class="token class-name">LoadBalancerRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token class-name">URI</span> <span class="token function">reconstructURI</span><span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span> instance<span class="token punctuation">,</span> <span class="token class-name">URI</span> original<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>LoadBalancerClient</code> 是其核心接口，描述了基于正向代理的客户端负载均衡的能力，它是 <code>ServiceInstanceChooser</code> 的扩展，<code>ServiceInstanceChooser</code> 代表服务实例的选择器，显然负载均衡客户端应该具备选择服务实例的能力，因此这个接口层级设计是非常合理的。在目前的版本中 <code>BlockingLoadBalancerClient</code> 是 <code>LoadBalancerClient</code> 的唯一实现。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesblocking-load-balancer-client.png" alt="负载均衡客户端"></p><p>负载均衡客户端的根本目的是要从某服务提供者的实例列表中选取最恰当的 <code>ServiceInatance</code>完成 <code>RPC</code> 调用，这个过程对于我们在业务层面上使用 <code>RPC</code> 客户端来说应该是无感知的，因此 <code>Spring Cloud</code> 需要提供不同的适配器将 <code>LoadBalancerClient</code> 集成到不同的客户端技术中，例如将 <code>LoadBalancerClient</code> 封装为请求拦截器集成到 <code>RestTemplate</code> 这样的 <code>Rest</code> 客户端中。</p><h3 id="Spring-Cloud-Circuit-Breaker"><a href="#Spring-Cloud-Circuit-Breaker" class="headerlink" title="Spring Cloud Circuit Breaker"></a>Spring Cloud Circuit Breaker</h3><p>在微服务架构中由于服务被拆分为较细的粒度，请求调用链被拉长，系统的整体可用性会被降低。我们需要引入 <code>Circuit Breaker</code> 断路器这样的概念，通过在短时间内牺牲系统一部分非核心功能来保证核心功能的可用性。因为当一个请求在某一环节上发生异常时，异常未必会被及时抛出，在同步的调用的情况下，意味着此时请求线程被阻塞等待结果返回，而线程属于服务端宝贵的资源，这种情况必然导致系统硬件利用率的降低。<code>Circuit Breaker</code> 的作用是在服务满足一定条件（例如响应时间或异常比例达到一定阈值）的情况下，将针对该服务的所有请求熔断，或返回兜底结果，降低该服务的异常对整个系统的影响，直到该服务的性能指标恢复正常后熔断状态解除。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CircuitBreaker</span> <span class="token punctuation">&#123;</span><span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> toRun<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span>toRun<span class="token punctuation">,</span> throwable <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoFallbackAvailableException</span><span class="token punctuation">(</span><span class="token string">"No fallback available."</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> toRun<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> fallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Spring Cloud Circuit Breaker</code> 针对断路器概念建立了抽象，通过 <code>run</code> 方法可以将某业务请求委托给断路器执行，<code>toRun</code> 参数泛指一切行为请求行为，<code>fallback</code> 代表请求发生异常时的降低操作，我们可以指定一个兜底返回。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesspring-cloud-circuit-breaker.png" alt="断路器抽象"></p><p><code>Spring Cloud Circuit Breaker</code> 利用抽象工厂模式将断路器的生产过程抽象化，这有利于适配不同的断路器实现，当前 <code>Spring Cloud</code> 支持四种不同的实现方案，分别是 <code>Netfix Hystrix</code>、<code>Resilience4J</code>、<code>Sentinel</code>、<code>Spring Retry</code>，开发者可以根据自身的需求选用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">CircuitBreakerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> circuitBreakerFactory<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getUserInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">UserInfo</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> circuitBreakerFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"getUserInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> userClient<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> throwable <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getUserInfo timeout!"</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实现层面上，我们只需依赖注入 <code>CircuitBreakerFactory</code> 类型的实例即可，无法感知到底层的具体实现，这符合针对技术组件建立防腐层的要求。</p><h3 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h3><p>前文我们提到 <code>Netflix Zuul</code> 组件已经被 <code>Spring</code> 官方废弃，即使在旧版本中也不再推荐使用。同时 <code>Spring Cloud</code> 推出了全新的替代方案 <code>Spring Cloud Gateway</code>，这是 <code>Spring Cloud</code> 项目中一个非常具有代表性的模块，为什么这么说呢？ 因为 <code>Spring</code> 长期以来都希望推广基于响应式编程模型的技术栈，在 <code>Spring Framework 5.0</code> 之后的版本中引入了 <code>Project Reactor</code> 响应式编程库，提供了完善的响应式编程 API，并且推出了 <code>Spring Webflux</code> 作为 <code>Spring MVC</code> 的替代方案，<code>Spring</code> 认为异步非阻塞式的编程模型会成为未来的主流。在 <code>Spring Cloud 2020</code> 版本这一倾向变得更为明显，<code>Spring Cloud Gateway</code> 正是基于 <code>Reactor</code> 技术栈实现的，这体现了 <code>Spring</code> 强推 <code>Reactive</code> 异步体系的决心。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesgateway-process.png"></p><p><code>Spring Cloud Gateway</code> 的本质是通过一系列的全局过滤器针对系统外部外部请求做统一过滤处理，例如用户身份认证，用户权限校验，限流等操作，避免在业务服务中产生重复代码，破坏服务的单一责任性。我曾经在 <a href="https://ethanzhang.cn/wei-fu-wu-wang-guan-spring-cloud-gateway-zhi-xian-liu.html">微服务网关 Spring Cloud Gateway 之限流</a> 这篇文章中较为详细地论述过 <code>Spring Cloud Gateway</code> 对限流功能的支持，有兴趣可以阅读。</p><h3 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h3><p>在 <code>Spring Cloud</code> 体系中，我个人会把 <code>Spring Cloud Steam</code> 模块放在一个极为重要的位置。因为在微服务架构中，如果我们遵循 BASE 理论，那么构建一个事件驱动风格的异步模型尤为重要。而在服务间实现异步通信的常规实现就是依赖于某一消息中间件，例如 <code>Apache Kafka</code>、<code>RabbitMQ</code>、<code>RocketMQ</code>、<code>Azure Event Hub</code> 等云服务或开源技术。但是我们会发现这些消息中间件的实现细节各不相同，虽然它们大多实现了发布/订阅模型，生产者组，消费者组，事务性消息等概念，但是前文我们提到过，让业务代码直接依赖于消息 API 不是一个良好的选择。我们希望的是在业务层面上将消息结构抽象化，编写业务代码时无需关注诸如消息序列化，消息负载均衡，推/拉模型等技术细节。<code>Spring Cloud Stream</code> 通过建立三种抽象模型为我们提供了这样的可能：</p><ul><li><p>Destination Binders：绑定器，负责集成外部消息中间件。</p></li><li><p>Destination Bindings：绑定协议，作为应用代码和消息中间件之间的媒介，屏蔽消息 API 的复杂度，统一消息生产者消息者客户端代码的风格。</p></li><li><p>Message：抽象消息模型，被消息生产者和消费者所引用，分别与 <code>Binder</code> 交互，<code>Message</code> 作为业务消息的包装，将消息抽象为消息头和消息体，统一消息风格。</p></li></ul><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesspring-cloud-stream.png" alt="Spring Cloud Stream"></p><p>消息生产者示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">Source</span> source<span class="token punctuation">;</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"addUserInfoAsync"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUserInfoAsync</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserInfo</span> userInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        source<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">RocketMQHeaders</span><span class="token punctuation">.</span>TAGS<span class="token punctuation">,</span> <span class="token string">"add-user-tag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消息消费者示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">implements</span> <span class="token class-name">UserClient</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@StreamListener</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Processor</span><span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"consume message &#123;&#125;"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addUserInfo</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Spring Cloud Stream</code> 通过在消息中间件和应用服务之间建立抽象层，使系统具备更高的扩展性，对于消息生产者来说，只需关注消息的目的地，对于消息消费者来说，只需关注消息的来源，而无需关注底层消息中间件的技术概念。甚至在特殊情况下，生产者与消费者可以完全使用不同的分布式消息技术，通过不同的 <code>Binder</code> 层适配依然可以把它们组合到一起。总而言之，合理地建立抽象是整个 <code>Spring</code> 生态家族的根本指导思想，也是 <code>Spring</code> 建立业界技术标准的根本途径。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Microservices </tag>
            
            <tag> DDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 事务抽象带来的思考</title>
      <link href="/2020/12/31/spring-shi-wu-chou-xiang-dai-lai-de-si-kao/"/>
      <url>/2020/12/31/spring-shi-wu-chou-xiang-dai-lai-de-si-kao/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>一般来说，在一个复杂系统中，我们会集成很多的 <code>data access frameworks</code>，也就是所谓的数据持久层框架，例如通过 <code>Hibernate</code>，<code>MyBatis</code> 操作 <code>Mysql</code> 这样的关系型数据库，亦或是通过 <code>Jedis</code>，<code>Redission</code> 这样的客户端组件操作 <code>Redis</code> 等 <code>key-value</code> 数据库。总而言之，一旦涉及到数据层面的操作，就会引出事务问题。因此我们需要一个统一的事务标准帮我去处理这类问题，事务是一个抽象概念，无论是本地事务，或是分布式事务，从抽象概念上他们是同一类问题，我们需要从更高的角度去看待他们，建立抽象概念将事务问题抽象化，简单化，再针对具体的问题去实现这些抽象概念，这是一种合理的思维方式。而 <code>Spring Framework</code> 为我们建立了这样的模型，或许可以给我们一些启发。</em></p></blockquote><span id="more"></span><h2 id="Spring-Framework-中的抽象模型"><a href="#Spring-Framework-中的抽象模型" class="headerlink" title="Spring Framework 中的抽象模型"></a>Spring Framework 中的抽象模型</h2><hr><p>当我们使用不同的数据持久层框架时，由于他们 <code>API</code> 设计各异，此时如果没有一个统一的事务模型，而是针对各个框架 <code>API</code> 去做特殊处理，带来的代码复杂度是不可想象的。更大的问题是这些事务代码会严重地侵入我们的业务代码，与业务代码强耦合在一起，如果未来我们需要升级或更换持久层框架，那么升级成本将是巨大的。因此一个事务管理的抽象模型是必要，理解 <code>Spring Framework</code> 中的 <code>Transaction Abstraction</code> 可以帮助我们更好地理解事务问题。</p><h3 id="TransactionManager-事务管理器"><a href="#TransactionManager-事务管理器" class="headerlink" title="TransactionManager 事务管理器"></a>TransactionManager 事务管理器</h3><p>理解 <code>Spring</code> 事务管理的关键是理解 <code>TransactionManager</code> 事务管理器，这是事务抽象的核心 <code>API</code>，而 <code>PlatformTransactionManager</code> 是它的默认实现，<code>Spring Framework 5.2</code> 版本新增了适配响应式编程的实现 <code>ReactiveTransactionManager</code>，此处暂且不进行论述。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionManager</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TransactionStatus</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>getTransaction</code> 方法用以获取一个 <code>TransactionStatus</code> 事务状态，这可能意味着开启一个新的事务，也可能代表一个已存在事务的延续。这需要取决于 <code>TransactionDefinition</code> 对象中对事务的定义，例如的事务的隔离级别，传播属性等。</p></li><li><p><code>commit</code> 方法代表事务执行成功后提交，<code>rollback</code> 方法事务执行失败后回滚，这两个方法无疑具有很高的抽象性，因为不同的持久化框架它们提交回滚事务的 <code>API</code> 各不相同，因此这两个方法的实现必然具有很大差异，但是针对提交回滚的操作 <code>Spring</code> 依赖抽取出了一定的生命周期，例如在 <code>AbstractPlatformTransactionManager</code> 中 <code>Spring</code> 利用模板方法模式规范了事务提交回滚的基本模板，而子类实现只需填充其中的生命周期即可。</p></li><li><p><code>TransactionManager</code> 是一个典型的 <code>service provider interface</code>，也就是所谓的 <code>SPI</code> 接口，它的实现是多样的，需要注意的是这些方法都可能会抛出 <code>TransactionException</code>，这是一个 <code>RuntimeException</code>，一般来讲事务性的异常对业务是致命性的，但也不排除少数业务场景中能从事务异常去恢复过来，因此 <code>Spring</code> 将事务异常声明为 <code>unchecked exception</code>，并不强迫开发者去捕获处理。</p></li></ul><h3 id="TransactionDefinition-事务定义"><a href="#TransactionDefinition-事务定义" class="headerlink" title="TransactionDefinition 事务定义"></a>TransactionDefinition 事务定义</h3><p>我们知道事务与事务是不同的，它需要自身的属性，例如事务的隔离级别和传播属性，这些事务的特性我们称之为事务的定义，不同的事务定义决定了事务在执行过程中的策略，例如 A 事务修改的数据能否被 B 事务访问到，在事务中执行额外操作时是否应该开启新的事务，这些因素都是我们在做事务管理时必须考虑的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> PROPAGATION_REQUIRED <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> PROPAGATION_SUPPORTS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> PROPAGATION_MANDATORY <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> PROPAGATION_REQUIRES_NEW <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> PROPAGATION_NOT_SUPPORTED <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> PROPAGATION_NEVER <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> PROPAGATION_NESTED <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">int</span> ISOLATION_DEFAULT <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> ISOLATION_READ_UNCOMMITTED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> ISOLATION_READ_COMMITTED <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> ISOLATION_REPEATABLE_READ <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> ISOLATION_SERIALIZABLE <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> TIMEOUT_DEFAULT <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> PROPAGATION_REQUIRED<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> ISOLATION_DEFAULT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> TIMEOUT_DEFAULT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">TransactionDefinition</span> <span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">StaticTransactionDefinition</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>Propagation</code>：事务传播属性，对于在一个事务作用域范围内的所有代码而言，如果当前执行的代码已经处于一个事务上下文中，此时再次执行一个事务方法时，事务的传播属性将决定是否应该开启一个新的事务或是延续已经存在的事务，<code>Spring</code> 几乎提供了所有已知的传播属性，因此根据业务场景去设定恰当的传播属性是必要的。</p></li><li><p><code>Isolation</code>：事务隔离级别，一般来讲分为四种，<code>READ_UNCOMMITTED</code> 读未提交，<code>READ_COMMITTED</code> 读已提交，<code>REPEATABLE_READ</code> 可重复读，<code>SERIALIZABLE</code> 串行化，隔离级别决定了一个事务与其他事务的隔离程度，隔离程度越高，并发时数据的安全性就更高，同时也意味着系统的并发吞吐量更低。</p></li><li><p><code>Timeout</code> 事务超时时间，决定一个事务允许执行的最大时间，一旦超过这个阈值，事务将会被自动回滚。</p></li><li><p><code>Read-only status</code> 事务只读状态，用于标示某个只做读操作而不对数据进行修改，在某些持久层框架中，这个状态是有意义的，可以帮助框架针对只读操作进行性能优化。</p></li></ul><h3 id="TransactionStatus-事务状态"><a href="#TransactionStatus-事务状态" class="headerlink" title="TransactionStatus 事务状态"></a>TransactionStatus 事务状态</h3><p>在一个事务的执行过程中，必然存在一些关键的执行节点，这些节点意味着事务状态的改变，整个过程我们可以称之为事务的生命周期，而在这个过程中我们需要一个对象去记录事务的状态，<code>Spring</code> 抽象出了 <code>TransactionStatus</code> 接口用以提供事务状态的统一 <code>API</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionStatus</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionExecution</span><span class="token punctuation">,</span> <span class="token class-name">SavepointManager</span><span class="token punctuation">,</span> <span class="token class-name">Flushable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">isRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>TransactionStatus</code> 可以获取到事务的一些基本状态，例如是否是一个新开启的事务，事务是否已被提交，事务是否已被回滚。值得注意的是其中还包含了创建 <code>save point</code> 以及回滚到某一 <code>save point</code> 的操作，在部分业务场景中我们需要 <code>save point</code> 这样的支持，有时我们不希望回滚整个事务，而是希望回滚到事务中的某个阶段，因此我们需要在事务执行过程中记录一些保存点，方便我们将事务回退至这些节点。</p><h2 id="Declarative-Transaction-Management-声明式事务"><a href="#Declarative-Transaction-Management-声明式事务" class="headerlink" title="Declarative Transaction Management 声明式事务"></a>Declarative Transaction Management 声明式事务</h2><hr><p>声明式事务是 <code>Spring</code> 最为推崇的一种运用事务管理的方式，因为这种方式拥有最低的代码侵入性。<code>Spring</code> 声明式事务的本质是 <code>AOP</code> 面向切面的编程思想，通过 <code>Java</code> 注解驱动提供方法级别的事务支持。在启用 <code>Spring</code> 声明式事务的前提下，我们只需要在方法上添加 <code>@Transactional</code> 注解，<code>Spring Framework</code> 中的切面会自动切入该方法，织入事务管理的相关逻辑。需要注意的是这种方式仅能保证当前线程中的数据操作处于事务管理中，如果在当前线程中 <code>fork</code> 一个子线程，那么子线程中的数据操作并不处于当前事务的控制中。</p><h3 id="基于-AOP-的事务管理带来的好处"><a href="#基于-AOP-的事务管理带来的好处" class="headerlink" title="基于 AOP 的事务管理带来的好处"></a>基于 AOP 的事务管理带来的好处</h3><blockquote><p>面向切面的程序设计（<code>Aspect-oriented programming</code>，<code>AOP</code>，又译作面向方面的程序设计、剖面导向程序设计）是计算机科学中的一种程序设计思想，旨在将横切关注点与业务主体进行进一步分离，以提高程序代码的模块化程度。通过在现有代码基础上增加额外的通知（<code>Advice</code>）机制，能够对被声明为“切点（<code>Pointcut</code>）”的代码块进行统一管理与装饰，如“对所有方法名以‘set*’开头的方法添加后台日志”。该思想使得开发人员能够将与代码核心业务逻辑关系不那么密切的功能（如日志功能）添加至程序中，同时又不降低业务代码的可读性。面向切面的程序设计思想也是面向切面软件开发的基础。</p></blockquote><p>以上是维基百科对于 <code>AOP</code> 面向切面编程的解释。曾经看到这样一句话，<strong>软件架构的本质是分离业务逻辑和技术细节</strong>，我想这也正是 <code>AOP</code> 思想致力于达到的目的。一个优秀的软件架构应该做到<strong>关注点分离</strong>，我的理解是正确的代码做正确的事。对于任何一个系统，随着时间的推移，熵增是不可避免的，万物都是从有序演化为无序，很多程序员戏称的“屎山”就是这样形成的，但是良好的架构设计以及模块划分应该做到把系统的复杂度始终控制在可接受范围内。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesBusiness%20Arrow.jpg" alt="业务逻辑与技术细节"></p><p>从 <code>AOP</code> 的角度去看，一段业务逻辑代码中总是分布着很多 <code>Pointcut</code> 切入点，我们需要向其中嵌入技术细节，所谓的技术细节，可能是日志记录，事务管理，异步操作，限流降级等无关乎于业务本身的逻辑。此时如果我们将这些技术细节直接穿插到业务代码中，这具有太强的侵入性，无疑是一种糟糕的设计。而 <code>AOP</code> 旨在将技术细节抽象为一个个 <code>Advice</code> 通知，<code>Pointcut</code> 和 <code>Advice</code> 共同组成一个 <code>Aspect</code> 切面，完成对业务代码的逻辑织入，以完成软件架构设计中的理想状态，关注点分离。</p><h3 id="EnableTransactionManagement"><a href="#EnableTransactionManagement" class="headerlink" title="@EnableTransactionManagement"></a>@EnableTransactionManagement</h3><p><code>@EnableTransactionManagement</code> 注解用于启用 <code>Spring</code> 声明式事务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">TransactionManagementConfigurationSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableTransactionManagement</span> <span class="token punctuation">&#123;</span><span class="token keyword">boolean</span> <span class="token function">proxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">AdviceMode</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">AdviceMode</span><span class="token punctuation">.</span>PROXY<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>mode</code> 属性代表 <code>Spring</code> 声明式事务所采取的切面模式，默认为 <code>PROXY</code> 代理模式，在代理模式下，<code>Spring AOP</code> 会为我们的目标对象建立代理对象，在实际运行过程中，当我们调用目标方法时，实际执行的是代理对象中的对应方法，而代理对象中已经被织入了 <code>Advice</code> 逻辑，这是 <code>AOP</code> 的基本实现方式。需要注意的是这种模式下类内自调用切面是不会生效的，因此在 <code>PROXY</code> 模式下声明式事务无法应用于类内的方法调用。如果我们实在想将切面应用于类内方法调用，<code>Spring</code> 为我们提供了两种方式，一种是通过 <code>AopContext#currentProxy()</code> 方法获取当前对象的代理对象，当然这种方式不太优雅，因为需要在业务代码中关注技术细节，不符合关注点分离的原则。另一种方式便是将 <code>mode</code> 切换为 <code>ASPECTJ</code> 模式，<code>AspectJ</code>  是一个面向切面的框架，它扩展了Java语言。<code>AspectJ</code> 定义了 <code>AOP</code> 语法，它有一个专门的编译器用来生成遵守 <code>Java</code> 字节编码规范的 <code>Class</code> 文件。因为 <code>ASPECTJ</code> 技术可以直接改变 <code>Class</code> 字节码，在该模式下切面逻辑的应用不会受到任何影响。</p></li><li><p><code>proxyTargetClass</code> 属性用于决定 <code>Spring</code> 是否面向 <code>Class</code> 类生成代理对象，默认为 <code>false</code>，此时如果我们的目标类实现了某 <code>Interface</code>，那么 <code>Spring</code> 会基于 <code>JDK</code> 动态代理生成接口类型的代理对象，反之 <code>Spring</code> 会基于 <code>CGLIB</code> 技术生成目标 <code>Class</code> 类型的代理对象。当然我们可以将该属性置为 <code>true</code> 强制 <code>Spring</code> 使用 <code>CGLIB</code> 代理。</p></li></ul><h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3><p>在我们使用 <code>Spring</code> 声明式事务时，由于我们不会直接依赖于 <code>TransactionDefinition</code> 这样的 <code>API</code>，因此 <code>@Transactional</code> 注解就需要承载事务的定义信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Transactional</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"transactionManager"</span><span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">Propagation</span> <span class="token function">propagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">;</span><span class="token class-name">Isolation</span> <span class="token function">isolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">readOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rollbackFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rollbackForClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">noRollbackFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">noRollbackForClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到 <code>@Transactional</code> 中指定的默认事务传播属性为 <code>PROPAGATION_REQUIRED</code>，一般来说这种传播属性最符合我们常规的业务需求。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagestx_prop_required.png" alt="本图取自官方文档"></p><p>在该模式下，当首个事务性方法没调用时，<code>Spring</code> 的事务切面会为我们开启事务，此时在方法内调用其他的事务性方法不会再开启新的事务，而是依然处于上下文事务的管控中，在事务范围内的特定异常都出触发事务回滚。</p><p>另一个比较常用的传播属性是 <code>PROPAGATION_REQUIRES_NEW</code>，当然 <code>Spring</code> 中一共定义了七种事务的传播属性，此处不逐个论述。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagestx_prop_requires_new.png" alt="本图取自官方文档"></p><p>在该模式下每一个事务性方法的执行都意味着开启一个全新的独立事务，每一个事务的提交和回滚都是独立的，内层的事务的回滚不会触发外层事务的回滚。</p><h2 id="JDBC-事务管理"><a href="#JDBC-事务管理" class="headerlink" title="JDBC 事务管理"></a>JDBC 事务管理</h2><hr><p>以 <code>JDBC</code> 事务管理为例，当我们的 <code>application</code> 上下文中存在 <code>DataSource</code> 数据源时，<code>Spring</code> 会自动为我们装配 <code>DataSourceTransactionManager</code> 应用于 <code>JDBC</code> 的事务管理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManagerAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManagerConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token class-name">DataSourceTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionManagerCustomizers</span><span class="token punctuation">></span></span> transactionManagerCustomizers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSourceTransactionManager</span> transactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>transactionManagerCustomizers<span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>customizers<span class="token punctuation">)</span> <span class="token operator">-></span> customizers<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>transactionManager<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> transactionManager<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到 <code>Spring</code> 会收集上下文中的所有 <code>PlatformTransactionManagerCustomizer</code> 实例，用于修饰自动装配的 <code>PlatformTransactionManager</code>，<code>Customizer</code> 是 <code>Spring</code> 框架中的一种普遍性设计，主要提供开发者扩展框架默认对象的入口，这种设计非常符合开闭原则。因为在非必要条件下，<code>Spring</code> 并不倾向于引导开发者覆盖框架中内建的默认 <code>bean</code>，而是建立开发者使用 <code>Spring</code> 提供的 <code>Customizer</code> 自定义扩展器，一般来说，使用 <code>Customizer</code> 完全可以满足我们的对象自定义需求，同时我们无需关注对象的创建过程，这是一种有效的关注点分离。</p><h3 id="获取事务对象"><a href="#获取事务对象" class="headerlink" title="获取事务对象"></a>获取事务对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPlatformTransactionManager</span><span class="token keyword">implements</span> <span class="token class-name">ResourceTransactionManager</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>txObject<span class="token punctuation">.</span><span class="token function">setSavepointAllowed</span><span class="token punctuation">(</span><span class="token function">isNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConnectionHolder</span> conHolder <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ConnectionHolder</span><span class="token punctuation">)</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>conHolder<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> txObject<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isExistingTransaction</span><span class="token punctuation">(</span><span class="token class-name">Object</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> transaction<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">hasConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Spring</code> 通过 <code>Template Method Pattern</code> 模仿方法模式将事务抽象逻辑与具体数据层实现逻辑分离，因此 <code>DataSourceTransactionManager</code> 中只需关注细节实现，而无需关注诸如事务传播属性这样的抽象概念。在获取事务对象的实现中，<code>DataSourceTransactionObject</code> 对象被创建，此时如果当前线程已经持有了数据库连接 <code>ConnectionHolder</code>，则会被设值到事务对象中，因为在同一条调用链中，即使需要开启多个事务，也可以共用一个数据库连接。因此 <code>isExistingTransaction</code> 在判断当前事务对象是否已经处于一个事务中时，只需要判断该事务对象是否持有了一个数据库连接。</p><h3 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPlatformTransactionManager</span><span class="token keyword">implements</span> <span class="token class-name">ResourceTransactionManager</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doBegin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> transaction<span class="token punctuation">;</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>txObject<span class="token punctuation">.</span><span class="token function">hasConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Connection</span> newCon <span class="token operator">=</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Acquired Connection ["</span> <span class="token operator">+</span> newCon <span class="token operator">+</span> <span class="token string">"] for JDBC transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>newCon<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> previousIsolationLevel <span class="token operator">=</span> <span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token function">prepareConnectionForTransaction</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>txObject<span class="token punctuation">.</span><span class="token function">setPreviousIsolationLevel</span><span class="token punctuation">(</span>previousIsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>txObject<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Switch to manual commit if necessary. This is very expensive in some JDBC drivers,</span><span class="token comment">// so we don't want to do it unnecessarily (for example if we've explicitly</span><span class="token comment">// configured the connection pool to set it already).</span><span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>txObject<span class="token punctuation">.</span><span class="token function">setMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Switching JDBC Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"] to manual commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">prepareTransactionalConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransactionActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token function">determineTimeout</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimeoutInSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Bind the connection holder to the thread.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotCreateTransactionException</span><span class="token punctuation">(</span><span class="token string">"Could not open JDBC Connection for transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在事务开启过程中，如果当前事务是该线程调用链中的首个事务，那么 <code>txObject</code> 还未持有数据库连接，此时需要从 <code>DataSource</code> 数据源中获取一个 <code>connection</code> 连接。</p></li><li><p>确定事务的一些基本属性，例如事务隔离级别，是否只读，事务超时时间等。</p></li><li><p>将当前事务持有的 <code>connection</code> 缓存起来，以供后续使用，主要基于 <code>ThreadLocal</code> 实现。</p></li><li><p>如果数据库连接被设置为了自动提交，<code>Spring</code> 会将其切换为手动提交，因为在一些 <code>JDBC</code> 驱动中，自动提交会带来较大的资源开销。</p></li></ul><h3 id="事务的中断与恢复"><a href="#事务的中断与恢复" class="headerlink" title="事务的中断与恢复"></a>事务的中断与恢复</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPlatformTransactionManager</span><span class="token keyword">implements</span> <span class="token class-name">ResourceTransactionManager</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">doSuspend</span><span class="token punctuation">(</span><span class="token class-name">Object</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">unbindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doResume</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token class-name">Object</span> suspendedResources<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>JDBC</code> 事务管理对于事务的中断恢复的实现较为简单，通过暂时从事务对象和线程上下文中收回连接来中断事务，通过向线程上下文中归还连接来恢复事务。</p><h3 id="事务的提交与回滚"><a href="#事务的提交与回滚" class="headerlink" title="事务的提交与回滚"></a>事务的提交与回滚</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPlatformTransactionManager</span><span class="token keyword">implements</span> <span class="token class-name">ResourceTransactionManager</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doCommit</span><span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> status<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Committing JDBC transaction on Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>con<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionSystemException</span><span class="token punctuation">(</span><span class="token string">"Could not commit JDBC transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRollback</span><span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> status<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Rolling back JDBC transaction on Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>con<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionSystemException</span><span class="token punctuation">(</span><span class="token string">"Could not roll back JDBC transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于事务的提交和回滚，只需将调用委派给 <code>Connection</code> 对象即可。我们可以从 <code>JDBC</code> 事务管理的实现中看到 <code>Spring Framework</code> 只是针对事务管理流程进行抽象，而实际的事务实现既然委托给底层的 <code>JDBC</code> 驱动执行，实现了良好的关注点分离。这也是我们在系统设计时应该追求达到的理想状态，也就是分离业务逻辑和技术细节，当然这需要开发者拥有良好的抽象性思维，这也是一个代码工匠持久学习和追求的方向。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Framework </tag>
            
            <tag> Transaction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次 Redis 上线事故</title>
      <link href="/2020/12/23/ji-yi-ci-redis-shang-xian-shi-gu/"/>
      <url>/2020/12/23/ji-yi-ci-redis-shang-xian-shi-gu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em><code>Redis</code> 作为最被广泛使用的缓存中间件之一，虽然市面上大量开源的 <code>Redis</code> 开源客户端提供的 <code>API</code> 是非常简洁的，但如果我们需要将它用得游刃有余，使其真正高效地服务于我们的应用服务，那么我们就需要深入理解 <code>Redis</code> 的存储结构和运行机制。最近在公司项目上线过程中遇到了一次 <code>Redis</code> 相关的上线事故，故记录下来，作为一种经验的总结，同时也希望加深自己对于 <code>Redis</code> 的理解和思考。</em></p></blockquote><span id="more"></span><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><hr><p>在服务发布上线时，发现线上 <code>Redis</code> 实例的 <code>CPU</code> 负载频繁飙升至 <code>100%</code>，导致 <code>Redis</code> 主线程被长时间阻塞，严重影响其他命令的执行。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesBA6F7B79-F1D1-4b8f-8D8E-6588CA5D4E15.png" alt="Redis 服务监控"></p><p>此时应用服务处于刚刚启动的阶段，并没有大批量的业务操作被执行，所以基本可以分析是应用服务在启动阶段对 <code>Redis</code> 的操作造成了该问题。我们知道 <code>Redis</code> 采用的是 <code>IO</code> 多路复用的机制，虽然在 <code>Redis 6.0</code> 版本后支持采用多线程方式与客户端建立连接，但是执行命令的主线程依然是单线程串行执行。因此我们需要重点关注针对 <code>Redis</code> 的耗时操作，尤其是时间复杂度为 <code>O(N)</code> 级别的操作，应该注意尽量规避，否则长时间阻塞 <code>Redis</code> 主线程往往会给业务带来致命性的问题。</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><hr><p>对于项目启动阶段可能存在的 <code>Redis</code> 耗时命令，我立刻想到了前不久自己的写的一段代码。为了缓存使用的便利性，我在项目中集成了 <code>Spring Cache Redis</code> 作为缓存方案，同时出于业务上的需要，必须在项目上线时清除 <code>Redis</code> 中的部分缓存，为了避免手动执行脚本清理，因此在项目中编写了项目启动阶段自动清理部分缓存的逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 项目启动后缓存自动清理 * @author Ethan Zhang */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheCleaner</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> CACHES_NEED_TO_CLEAN <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token class-name">EnterpriseDetailCache</span><span class="token punctuation">.</span>CACHE_NAME<span class="token punctuation">,</span>            <span class="token class-name">GoodsCategoryCache</span><span class="token punctuation">.</span>CACHE_NAME<span class="token punctuation">,</span>            <span class="token class-name">GoodsLabelCache</span><span class="token punctuation">.</span>CACHE_NAME<span class="token punctuation">,</span>            <span class="token class-name">RegionCache</span><span class="token punctuation">.</span>CACHE_NAME<span class="token punctuation">,</span>            <span class="token class-name">ServerCategoryCache</span><span class="token punctuation">.</span>CACHE_NAME<span class="token punctuation">,</span>            <span class="token class-name">ServerTypeCache</span><span class="token punctuation">.</span>CACHE_NAME<span class="token punctuation">,</span>            <span class="token class-name">WalletTrackTypeCache</span><span class="token punctuation">.</span>CACHE_NAME    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        CACHES_NEED_TO_CLEAN<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cacheName <span class="token operator">-></span> <span class="token class-name">CachePrefixConstant</span><span class="token punctuation">.</span>COMMON_CACHE_PREFIX <span class="token operator">+</span> cacheName <span class="token operator">+</span> <span class="token string">":*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">cleanWithPattern</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanWithPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> connection <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Cursor</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token class-name">ScanOptions</span><span class="token punctuation">.</span><span class="token function">scanOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor<span class="token punctuation">.</span><span class="token function">forEachRemaining</span><span class="token punctuation">(</span>connection<span class="token operator">::</span><span class="token function">del</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"clean cache error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这段代码的主要逻辑是监听 <code>Spring</code> 上下文中的 <code>ContextRefreshedEvent</code> 生命周期事件，回调执行清除缓存。针对项目中需要清理的缓存，循环执行 <code>scan</code> 命令扫描到所匹配的 <code>KEY</code> 并进行删除操作。一般来讲使用 <code>scan</code> 命令替代 <code>keys</code> 命令进行 <code>KEY</code> 模糊匹配是为了避免长时间阻塞 <code>Redis</code> 主线程，初期我这里也是出于这样的考虑。按照常规的理解，<code>scan</code> 命令是类型迭代器的原理，可以有效的避免一次性避免扫描 <code>Redis</code> 全库，并不会长时间占用 <code>Redis</code> 的线程资源，那么问题究竟出在哪里呢？</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><hr><p>经过一番资料查询，我发现根本问题还是在于对于 <code>scan</code> 命令的理解。<code>scan</code> 命令的设计类似于 <code>iterator</code> 迭代器模式，也可以看成是一个 <code>cursor</code> 游标。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/images%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201222211645.png" alt="截图自 Redis 官方文档"></p><p>从官方文档的描述中我们可以看到 <code>scan</code> 使用一个游标值指定开始扫描的位置，本次扫描完成后，会返回当前游标停留的位置，同时这个位置也应该作为下一次扫描开始的位置，如果返回的游标位置为 <code>0</code>，表示已经完成全量扫描，这是一个典型的迭代器设计。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/images%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201222212419.png" alt="截图自 Redis 官方文档"></p><p>那么 <code>scan</code> 命令单次迭代时会扫描多少 <code>KEY</code> 呢？事实上 <code>Redis</code> 并不保证这个数字的精确性。针对一些 <code>size</code> 足够小的 <code>KEY</code>，例如针对一些足够小的 <code>SET</code>，<code>SORTED SET</code>，<code>HASH</code>，可能一次迭代就能返回其中所有的元素，当然我们可以通过 <code>count</code> 参数对扫描数量进行一定程度的调节。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/images%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201222213512.png" alt="截图自 Redis 官方文档"></p><p>需要注意的是 <code>Redis</code> 也并不保证单次迭代返回的元素数量与 <code>count</code> 参数值相等，我们可以认为 <code>count</code> 值是单次迭代返回的最大元素数量。</p><p>整体来讲，虽然 <code>scan</code> 命令并不像 <code>keys</code> 那样对 <code>Redis</code> 进行一次性的全量遍历，但其时间复杂度依然是 <code>O(N)</code> 级别，如果 <code>Redis</code> 中的 <code>KEY</code> 达到一定数量级，而我们又将 <code>count</code> 参数设置较大时，单次的 <code>scan</code> 执行时间依然是较长的。在我面临的场景中，线上 <code>KEY</code> 量达到了百万级，同时我将 <code>count</code> 参数设置为 <code>1024</code>，<code>scan</code> 命令单次迭代的时间应该是较长的，再加上我在项目启动阶段循环多次执行该命令，<code>Redis</code> 的 <code>CPU</code> 在短时间内被占满也就不足为奇。因此在这个业务场景下如果我需要清理缓存，使用 <code>scan</code> 命令去模糊匹配恐怕并不是一个明智的选择。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><hr><p>针对在项目启动阶段清理 <code>KEY</code> 的需求，如果要避免全量扫描 <code>Redis</code> 库，我认为最理想的状态还是精确匹配删除 <code>KEY</code>，这样的话可以利用 <code>Redis</code> 本身的 <code>hash</code> 索引。但前提是在缓存写入阶段，我们必须将需要清理的 <code>KEY</code> 记录下来。<code>Spring Cache</code> 是 <code>Spring Framework</code> 提供的一个缓存抽象框架，它本身并不提供这样的支持，因此我考虑对其进行一定的扩展。</p><h3 id="缓存-KEY-收集"><a href="#缓存-KEY-收集" class="headerlink" title="缓存 KEY 收集"></a>缓存 KEY 收集</h3><p>首先我定义了一个缓存收集类 <code>SpringCacheKeyCollector</code>，提供 <code>collect</code> 方法对缓存     <code>KEY</code> 进行收集。我选择将 <code>KEY</code> 存储到 <code>Redis</code> 的 <code>SET</code> 结构中，同时在项目启动阶段从 <code>SET</code> 中获取所有的 <code>KEY</code> 进行批量删除。需要说明的是此处我面临的业务场景 <code>KEY</code> 数量级并不会太大，因此我直接使用 <code>smembers</code> 对 <code>SET</code> 全量返回，如果 <code>KEY</code> 数量级较大，建议使用 <code>sscan</code> 对其进行迭代操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Spring Cache Key 收集，项目启动时清理 * @author Ethan Zhang */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringCacheKeyCollector</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> KEY <span class="token operator">=</span> <span class="token class-name">CachePrefixConstant</span><span class="token punctuation">.</span>COMMON_CACHE_PREFIX <span class="token operator">+</span> <span class="token string">"spring-cache-key-collector:"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">String</span> cacheKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>KEY<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> members <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>members<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"clean spring cache keys : &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">,</span> members<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>members<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义-RedisCache"><a href="#自定义-RedisCache" class="headerlink" title="自定义 RedisCache"></a>自定义 RedisCache</h3><p><code>RedisCache</code> 是 <code>Spring Cache Redis</code> 提供的操作 <code>Redis</code> 的缓存抽象，如果需要在对 <code>Redis</code> 的缓存操作中嵌入自定义逻辑，那么我需要对其扩展。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Spring Cache Key 自动收集 * @see SpringCacheKeyCollector * @author Ethan Zhang */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoCleanableRedisCache</span> <span class="token keyword">extends</span> <span class="token class-name">RedisCache</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">AutoCleanableRedisCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prefix<span class="token punctuation">,</span> <span class="token class-name">RedisOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> redisOperations<span class="token punctuation">,</span> <span class="token keyword">long</span> expiration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> redisOperations<span class="token punctuation">,</span> expiration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">RedisCacheElement</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">collectCacheKey</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getKeyBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ValueWrapper</span> <span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token class-name">RedisCacheElement</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ValueWrapper</span> valueWrapper <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">collectCacheKey</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getKeyBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> valueWrapper<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">collectCacheKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cacheKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">SpringCacheKeyCollector</span> springCacheKeyCollector <span class="token operator">=</span> <span class="token class-name">CommonSpringContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">SpringCacheKeyCollector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            springCacheKeyCollector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"collect cache key error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的做法是覆盖 <code>RedisCache</code> 中针对 <code>KEY</code> 的 <code>put</code> 类型操作，在缓存写入完成后执行先前我所定义的 <code>SpringCacheKeyCollector#collect</code> 操作，将 <code>KEY</code> 收集起来。</p><h3 id="配置-Spring-Cache-Redis"><a href="#配置-Spring-Cache-Redis" class="headerlink" title="配置 Spring Cache Redis"></a>配置 Spring Cache Redis</h3><p>在自定义 <code>RedisCache</code> 后，如果要使其生效，还需要覆盖 <code>Spring Cache Redis</code> 的默认配置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoCleanableRedisCacheManager</span> <span class="token keyword">extends</span> <span class="token class-name">RedisCacheManager</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">AutoCleanableRedisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisOperations</span> redisOperations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>redisOperations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AutoCleanableRedisCache</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> cacheName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> expiration <span class="token operator">=</span> <span class="token function">computeExpiration</span><span class="token punctuation">(</span>cacheName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoCleanableRedisCache</span><span class="token punctuation">(</span>cacheName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">isUsePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getCachePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span>cacheName<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getRedisOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> expiration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义 <code>RedisCacheManager</code> 缓存管理类，并重写其中的 <code>createCache</code> 方法，用于创建我先前自定义的 <code>RedisCache</code> 缓存抽象实例，并将 <code>RedisCacheManager</code> 依据 <code>Spring Cache</code> 的规范装配到 <code>IOC</code> 容器中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Spring Cache 缓存配置 * @see DemoCache 缓存示例 * @author Ethan Zhang */</span><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringCacheAutoConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 分布式缓存方案 Redis     * @see RedisCacheManager     */</span>    <span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">RedisAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomRedisCacheConfiguration</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GenericToStringSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> genericToStringSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericToStringSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>REDIS_CACHE_MANAGER<span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">redisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">AutoCleanableRedisCacheManager</span> redisCacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoCleanableRedisCacheManager</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>            redisCacheManager<span class="token punctuation">.</span><span class="token function">setUsePrefix</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisCacheManager<span class="token punctuation">.</span><span class="token function">setDefaultExpiration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 缓存过期时间自定义，默认缓存 1 天</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span> expires <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            expires<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisCacheManager<span class="token punctuation">.</span><span class="token function">setExpires</span><span class="token punctuation">(</span>expires<span class="token punctuation">)</span><span class="token punctuation">;</span>            redisCacheManager<span class="token punctuation">.</span><span class="token function">setCachePrefix</span><span class="token punctuation">(</span>cacheName <span class="token operator">-></span> stringRedisSerializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>COMMON_CACHE_PREFIX <span class="token operator">+</span> cacheName <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> redisCacheManager<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">setDefaultSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericFastJsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>genericToStringSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>genericToStringSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">setEnableTransactionSupport</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> template<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处不对 <code>Spring Cache</code> 的使用进行过多阐述，有兴趣可以参考我的这篇文章 <a href="https://ethanzhang.cn/spring-cache-huan-cun-chou-xiang.html">Spring Cache 缓存抽象</a>，这里只针对扩展的思路进行分享。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cache </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security（二）权限管理</title>
      <link href="/2020/12/05/spring-security-er-quan-xian-guan-li/"/>
      <url>/2020/12/05/spring-security-er-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>在另一篇文章 <a href="https://ethanzhang.cn/spring-security-yi-shen-fen-ren-zheng.html">Spring Security（一）身份认证</a> 中我们讲到了 <code>Spring Security</code> 的 <code>Authentication</code> 身份认证过程，当一个用户的身份被系统识别，我们会给这个用户赋予一定的权限，这些权限决定用户能够访问系统中的哪些资源，<code>Spring Security</code> 中的 <code>Authorization</code> 为我们提供了系统权限管理的基本模型。<code>Spring Security</code> 基于 <code>AOP</code> 切面编程的思想提供了方法级别的拦截，同时利用注解驱动大幅简化开发者在权限校验层面的逻辑判断。当然 <code>Spring Security</code> 默认的权限管理方式未必能够满足我们的需求，但是它为我们提供了灵活的扩展方式，我们可以方便地将自己的实现嵌入到 <code>Spring Security</code> 的校验流程中。</em></p></blockquote><span id="more"></span><h2 id="Spring-Security-中的鉴权设计"><a href="#Spring-Security-中的鉴权设计" class="headerlink" title="Spring Security 中的鉴权设计"></a>Spring Security 中的鉴权设计</h2><hr><h3 id="AccessDecisionManager-访问控制管理"><a href="#AccessDecisionManager-访问控制管理" class="headerlink" title="AccessDecisionManager 访问控制管理"></a><code>AccessDecisionManager</code> 访问控制管理</h3><p><code>Spring Security</code> 中的把身份认证过程抽象为 <code>AuthenticationManager</code>，同样的，也有一个鉴权流程的抽象叫做 <code>AccessDecisionManager</code>，用于判定用户对于某资源的访问是否拥有权限。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> configAttributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">,</span><span class="token class-name">InsufficientAuthenticationException</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>decide</code> 方法包含了鉴权的核心逻辑，它接收三个参数，分别为 <code>authentication</code> 用户身份信息（一般包含了用户所拥有的角色或权限），<code>object</code> 代表用户需要访问的目标资源（例如一个 <code>web</code> 接口或是 <code>Java</code> 中的一个 <code>method</code>），<code>configAttributes</code> 代表目前资源所设置的配置属性元信息，一般是访问该资源的权限要求，会作为用户是否对该资源拥有访问权限的判断依据。</p><h3 id="AccessDecisionManager-的实现"><a href="#AccessDecisionManager-的实现" class="headerlink" title="AccessDecisionManager 的实现"></a><code>AccessDecisionManager</code> 的实现</h3><p><code>Spring Security</code> 内置了 <code>AccessDecisionManager</code> 的三种实现，他们都继承自抽象类 <code>AbstractAccessDecisionManager</code>，其中持有了一个 <code>AccessDecisionVoter</code> 的集合，每一个 <code>voter</code> 都代表了一种鉴权的规则。<code>Spring Security</code> 为什么要为我们提供多种鉴权规则组合的方式呢？其实这是考虑到部分系统鉴权的复杂性，在某些系统中，对于某一资源的访问权限可能是多种规则共同决定的，因此我们可以自定义多个 <code>voter</code> 组合起来构建鉴权系统，当然如果系统的鉴权逻辑较为单一，一般定义单个 <code>voter</code> 就足够了，甚至仅利用框架内置的 <code>voter</code> 即可。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesaccess-decision-manager.png" alt="AccessDecisionManager"></p><h4 id="AffirmativeBased"><a href="#AffirmativeBased" class="headerlink" title="AffirmativeBased"></a>AffirmativeBased</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AffirmativeBased</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">AffirmativeBased</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> decisionVoters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>decisionVoters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> configAttributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> deny <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AccessDecisionVoter</span> voter <span class="token operator">:</span> <span class="token function">getDecisionVoters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> voter<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> object<span class="token punctuation">,</span> configAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Voter: "</span> <span class="token operator">+</span> voter <span class="token operator">+</span> <span class="token string">", returned: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_GRANTED<span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_DENIED<span class="token operator">:</span>deny<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>deny <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, every AccessDecisionVoter abstained</span><span class="token function">checkAllowIfAllAbstainDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>AffirmativeBased</code> 作为 <code>AccessDecisionManager</code> 的默认实现，只要 <code>voter</code> 集合中任意一个 <code>voter</code> 认为用户具备访问权限，则判定为用户具有访问该资源的权限，一般来说这种规则是最符合我们的常规需求的，我们系统中可能存在多种鉴权方式，一般来说用户只需要满足任意一种即可。</p><h4 id="ConsensusBased"><a href="#ConsensusBased" class="headerlink" title="ConsensusBased"></a>ConsensusBased</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsensusBased</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> allowIfEqualGrantedDeniedDecisions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ConsensusBased</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> decisionVoters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>decisionVoters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> configAttributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> grant <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> deny <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AccessDecisionVoter</span> voter <span class="token operator">:</span> <span class="token function">getDecisionVoters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> voter<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> object<span class="token punctuation">,</span> configAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Voter: "</span> <span class="token operator">+</span> voter <span class="token operator">+</span> <span class="token string">", returned: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_GRANTED<span class="token operator">:</span>grant<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_DENIED<span class="token operator">:</span>deny<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>grant <span class="token operator">></span> deny<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>deny <span class="token operator">></span> grant<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>grant <span class="token operator">==</span> deny<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>grant <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowIfEqualGrantedDeniedDecisions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span> <span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, every AccessDecisionVoter abstained</span><span class="token function">checkAllowIfAllAbstainDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAllowIfEqualGrantedDeniedDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> allowIfEqualGrantedDeniedDecisions<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAllowIfEqualGrantedDeniedDecisions</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> allowIfEqualGrantedDeniedDecisions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowIfEqualGrantedDeniedDecisions <span class="token operator">=</span> allowIfEqualGrantedDeniedDecisions<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ConsensusBased</code> 实现更符合选举机制，当用户获得过半数 <code>voter</code> 的授权，再能获取访问资源的权限，不过个人认为这种方式在权限控制上具有较高的复杂性，不太符合大部分的业务场景，建议谨慎使用。</p><h4 id="UnanimousBased"><a href="#UnanimousBased" class="headerlink" title="UnanimousBased"></a>UnanimousBased</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnanimousBased</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">UnanimousBased</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> decisionVoters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>decisionVoters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> grant <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> singleAttributeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singleAttributeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute <span class="token operator">:</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>singleAttributeList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AccessDecisionVoter</span> voter <span class="token operator">:</span> <span class="token function">getDecisionVoters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> voter<span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> object<span class="token punctuation">,</span> singleAttributeList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Voter: "</span> <span class="token operator">+</span> voter <span class="token operator">+</span> <span class="token string">", returned: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_GRANTED<span class="token operator">:</span>grant<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">AccessDecisionVoter</span><span class="token punctuation">.</span>ACCESS_DENIED<span class="token operator">:</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractAccessDecisionManager.accessDenied"</span><span class="token punctuation">,</span><span class="token string">"Access is denied"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, there were no deny votes</span><span class="token keyword">if</span> <span class="token punctuation">(</span>grant <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// To get this far, every AccessDecisionVoter abstained</span><span class="token function">checkAllowIfAllAbstainDecisions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>UnanimousBased</code> 实现要求用户获得所有 <code>voter</code> 的授权，这种方式对权限的校验比较严格，如果我们的系统中定义了多种权限校验的方式，那么用户在访问资源时需要同时满足这些要求。当然除了框架内置的三种实现以外，我们完全可以根据自身的需求自定义 <code>AccessDecisionManager</code> 的实现，整体上来说我认为 <code>Spring Security</code> 中将多个 <code>voter</code> 组合起来共同完成鉴权的设计模式还有很有意思的，值得我们借鉴。</p><h2 id="针对-WEB-请求的鉴权"><a href="#针对-WEB-请求的鉴权" class="headerlink" title="针对 WEB 请求的鉴权"></a>针对 WEB 请求的鉴权</h2><hr><p>在 <code>Spring Security</code> 的过滤器链 <code>SecurityFilterChain</code> 中存在一个关键性的过滤器 <code>FilterSecurityInterceptor</code>，它负责为 <code>Web</code> 请求对象 <code>HttpServletRequest</code> 提供权限校验，如果过滤器判定当前请求拥有访问该资源的权限则放行，否则抛出特定异常，进入异常处理流程。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesfilter-security-interceptor.png" alt="本图摘自官方文档"></p><ol><li><p>首先 <code>FilterSecurityInterceptor</code> 会从 <code>SecurityContextHolder</code> 中获取 <code>Authentication</code> 对象，如果不存在，则会再尝试一次身份认证流程。</p></li><li><p>构建 <code>FilterInvocation</code> 对象，其中包含当前的 <code>request</code>，<code>response</code>，<code>filterChain</code> 信息。</p></li><li><p>根据当前的请求对象从 <code>SecurityMetadataSource</code> 中获取配置属性元信息。</p></li><li><p>将鉴权所需要的信息传递给 <code>AccessDecisionManager</code> 判定当前用户是否拥有访问该资源的权限。</p></li><li><p>若判定为有权限，则放行，执行过滤器链后续流程，若无权限则抛出 <code>AccessDeniedException</code> 异常。</p></li></ol><p>整体来讲 <code>Spring Security</code> 在过滤器层面的鉴权是全局层面的鉴权，因为此时请求还没有到达 <code>Spring MVC</code> 的层面执行业务代码，鉴权的依据是上下文的配置元信息，而针对具体业务代码的鉴权往往需要依赖于 <code>AOP</code> 方法拦截。</p><h2 id="针对-Java-Method-方法级别的鉴权"><a href="#针对-Java-Method-方法级别的鉴权" class="headerlink" title="针对 Java Method 方法级别的鉴权"></a>针对 Java Method 方法级别的鉴权</h2><hr><p><code>Spring Security</code> 针对方法级别的鉴权主要依赖于一个 <code>AOP</code> 切面 <code>MethodSecurityInterceptor</code>，当我们使用 <code>@EnableGlobalMethodSecurity</code> 注解启用全局方法拦截后，在项目的启动阶段，负责权限拦截的切面别初始化，而被鉴权注解标记的方法都会成为鉴权切面的切入点，此时我们就可以利用注解驱动方便地完成方法粒度的权限控制。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">priv<span class="token punctuation">.</span>just<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>access<span class="token punctuation">.</span>prepost<span class="token punctuation">.</span></span><span class="token class-name">PreAuthorize</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">priv<span class="token punctuation">.</span>just<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">priv<span class="token punctuation">.</span>just<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OrderService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getTimestamp"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('QUERY_ORDER')"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"queryOrder"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">queryOrder</span><span class="token punctuation">(</span><span class="token keyword">long</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">queryOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('CREATE_ORDER')"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"createOrder"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('DELETE_ORDER')"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"deleteOrder"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"orderId"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        orderService<span class="token punctuation">.</span><span class="token function">deleteOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 <code>Controller</code> 层面的权限控制为例，<code>@PreAuthorize(&quot;hasAuthority(&#39;QUERY_ORDER&#39;)&quot;)</code> 注解表示当用户拥有名称为 <code>QUERY_ORDER</code> 的权限时才能调用目标方法，否则会抛出 <code>AccessDeniedException</code>，触发鉴权失败处理，一般在业务层面上，此时前端会告知用户无权执行该操作。</p><h2 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h2><hr><p>一般来说所有 <code>WEB</code> 系统都需要考虑跨域问题，同源策略是 <code>WEB</code> 安全的基石，是其他安全策略的前提。<code>Spring Security</code> 内置了 <code>CorsFilter</code> 为我们提供了这样的支持。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CorsConfigurationSource</span> configSource<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">CorsProcessor</span> processor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultCorsProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span><span class="token class-name">CorsConfigurationSource</span> configSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>configSource<span class="token punctuation">,</span> <span class="token string">"CorsConfigurationSource must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>configSource <span class="token operator">=</span> configSource<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCorsProcessor</span><span class="token punctuation">(</span><span class="token class-name">CorsProcessor</span> processor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>processor<span class="token punctuation">,</span> <span class="token string">"CorsProcessor must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>processor <span class="token operator">=</span> processor<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configSource<span class="token punctuation">.</span><span class="token function">getCorsConfiguration</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isValid <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processor<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>corsConfiguration<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValid <span class="token operator">||</span> <span class="token class-name">CorsUtils</span><span class="token punctuation">.</span><span class="token function">isPreFlightRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当前如果内置的 <code>CorsFilter</code> 不能满足我们的需求，我们也可以自定义过滤器完成跨域相关的处理。一般来说我们只需要自定义 <code>CorsConfigurationSource</code> 类型的 <code>bean</code> 并装配到上下文，结合内置的 <code>CorsFilter</code> 即可完成我们的需求。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableRedisHttpSession</span><span class="token punctuation">(</span>redisNamespace <span class="token operator">=</span> <span class="token string">"just:session:"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebSecurityConfigurer</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http                <span class="token comment">// ...</span>                <span class="token comment">// 跨域处理</span>                <span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CorsConfigurationSource</span> <span class="token function">corsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> request <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowedMethods</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> corsConfiguration<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，当我们选择自定义 <code>CorsFilter</code> 时，应该保证跨域处理的过滤器位于我们用户身份认证过滤器以及权限校验过滤器之前（<code>Spring Security</code> 默认可以保证这样的顺序），因为跨域预检请求一般来讲不会携带 <code>cookie</code> 信息，而我们的 <code>sessionId</code> 又往往是通过 <code>cookie</code> 携带的，因此为了避免跨域预检请求报错为用户造成不必要的困扰，我们需要关注各个过滤器的顺序造成的影响。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Security </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security（一）身份认证</title>
      <link href="/2020/11/27/spring-security-yi-shen-fen-ren-zheng/"/>
      <url>/2020/11/27/spring-security-yi-shen-fen-ren-zheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>随着互联网技术的蓬勃发展，正所谓道高一尺，魔高一丈，黑客技术也得到了迅猛的发展。黑客们利用各大网站的安全漏洞实施着各种出人意料的攻击，例如常见的 <code>XSS</code> 跨站脚本攻击，<code>CSRF</code> 跨站请求伪造等方式。众所周知，数据是互联网公司最重要的核心资产之一，一旦被黑客窃取，会给公司带来难以估量的损失。因此 <code>WEB</code> 安全方面的技术愈发收到各大互联网公司的重视，<code>WEB</code> 安全从最根本的角度来讲是对用户身份的识别，从 <code>WEB</code> 后端的角度来看需要确保每一次前端发起的请求都是安全的，用户所访问的数据不应该超过该用户的权限边界。因此用户身份认证，权限校验几乎是每一个系统需要深刻思考的问题，本文会以 <code>Spring Security</code> 框架为例，看看 <code>Spring</code> 是如何思考这个问题的？以及能带给我们什么启发？</em></p></blockquote><span id="more"></span><h2 id="Spring-Security-设计总览"><a href="#Spring-Security-设计总览" class="headerlink" title="Spring Security 设计总览"></a>Spring Security 设计总览</h2><hr><h3 id="SecurityFilterChain-过滤器链"><a href="#SecurityFilterChain-过滤器链" class="headerlink" title="SecurityFilterChain 过滤器链"></a>SecurityFilterChain 过滤器链</h3><p><code>Spring Security</code> 的设计是典型的责任链模式，整体上来说 <code>Spring Security</code> 是通过将一系列的 <code>filter</code> 组合成一个 <code>filter chain</code> 完成各个层面的安全检查。链条上的各个 <code>filter</code> 各司其职，具有良好的单一责任性，我们可以方便地将 <code>Spring</code> 内置或是自定义的 <code>filter</code> 添加到链条上扩展 <code>Spring Security</code> 的安全功能。需要注意的是 <code>filter chain</code> 上 <code>filter</code> 的排列顺序是非常重要的，<code>Spring Security</code> 可以保证内置的 <code>filter</code> 具有严格的排列顺序，当我们添加自定义 <code>filter</code> 时需要考虑顺序所带来的影响，一旦顺序错乱可能会带来不可预知的安全问题。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesmulti-security-filter-chain.png" alt="本图摘自官方文档"></p><p>从 <code>Spring Security</code> 的过滤器链设计中我们看到一个有意思的现象，<code>Spring Security</code> 并没有将安全相关的过滤器直接嵌入到 <code>servlet</code> 容器层面的 <code>FilterChain</code> 中，而是将其包裹在一个单独的 <code>SecurityFilterChain</code> 中，再将这整个 <code>chain</code> 嵌入 <code>servlet</code> 容器的过滤器链条。其实这是 <code>Spring</code> 有意为之，这样的设计本身更加高内聚，同时把同一类的 <code>filter</code> 内聚到一个 <code>SecurityFilterChain</code> 中具有更好的配置隔离性，试想一下，对于一个 <code>web</code> 服务端来说，如果需要对不同的客户端采取不同的安全策略，例如 <code>pc</code> 端允许同时存在多个会话，而 <code>app</code> 端只允许同时存在单个会话，针对这样的需求，将多个 <code>filterChain</code> 隔离开独立配置是一种良好的选择，能够有效降低配置的复杂性。</p><h3 id="ExceptionTranslationFilter-安全异常处理"><a href="#ExceptionTranslationFilter-安全异常处理" class="headerlink" title="ExceptionTranslationFilter 安全异常处理"></a>ExceptionTranslationFilter 安全异常处理</h3><p><code>Spring Security</code> 中的安全异常主要分为两类，<code>AuthenticationException</code> 身份认证异常以及 <code>AccessDeniedException</code> 访问拒绝异常。这两类异常可能被 <code>SecurityFilterChain</code> 中的任意一个过滤器抛出，最后会被 <code>ExceptionTranslationFilter</code> 捕获并执行异常处理逻辑。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesexception-translation-filter.png" alt="本图摘自官方文档"></p><p>一旦 <code>AuthenticationException</code> 类型异常被抛出，<code>Spring Security</code> 会认为用户身份认证失败，例如在实际业务场景中可能为登录失败或用户 <code>TOKEN</code> 认证失败。此时会触发系列操作：</p><ul><li><p><code>SecurityContextHolder</code> 上下文中的用户身份信息被清除。</p></li><li><p>当前请求信息被缓存至 <code>RequestCache</code>，当用户成功认证后，该请求会被重新执行。</p></li><li><p><code>AuthenticationEntryPoint</code> 逻辑被执行，这是认证失败处理逻辑的核心，也是开发者往往需要自定义的部分，在实际的业务场景中，可能需要跳转至登录页亦或是返回 <code>HTTP</code> 错误码。</p></li></ul><p>如果 <code>AccessDeniedException</code> 类型异常被抛出，<code>Spring Security</code> 会认为当前用户没有权限访问该资源，<code>AccessDeniedHandler</code> 处理逻辑被执行，同样这也是我们需要根据业务需求自定义的部分。</p><h2 id="Authentication-身份认证"><a href="#Authentication-身份认证" class="headerlink" title="Authentication 身份认证"></a>Authentication 身份认证</h2><hr><p><code>Spring Security</code> 支持多种不同方式的身份认证。而不同方式的认证事实上是有迹可循的，<code>AbstractAuthenticationProcessingFilter</code> 作为一个模板过滤器，为我们规范了身份认证的大致流程，即使我们的需求非常特殊，内置的过滤器无法满足我们的需求，也往往可以通过扩展该模板自定义我们需要的认证方式。一般来讲 <code>Spring Security</code> 内置的过滤器足以支撑我们的常规业务需求，例如针对普遍存在的用户名密码方式登录，框架提供了这样的过滤器实现 <code>UsernamePasswordAuthenticationFilter</code>，我们可以直接使用或扩展该实现达到我们的业务需求。</p><h3 id="AbstractAuthenticationProcessingFilter-身份认证流程"><a href="#AbstractAuthenticationProcessingFilter-身份认证流程" class="headerlink" title="AbstractAuthenticationProcessingFilter 身份认证流程"></a>AbstractAuthenticationProcessingFilter 身份认证流程</h3><p><code>Spring Security</code> 为我们抽象了一个身份认证的流程，身份认证过滤器作为 <code>SecurityFilterChain</code> 中最核心的过滤器之一，我们有必要了解其设计，并对之扩展以达成我们的业务需求。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesabstract-authentication-processing-filter.png" alt="本图摘自官方文档"></p><ol><li><p>用户提交认证信息（如用户名、密码等），此时框架会从 <code>HttpServletRequest</code> 请求对象中获取到相关参数构建 <code>Authentication</code> 对象，注意此时的 <code>Authentication</code> 对象处于未认证状态。</p></li><li><p>将未认证的 <code>Authentication</code> 对象传递给 <code>AuthenticationManager</code> 进行认证流程，例如我们可能会根据用户名密码从数据库捞取用户信息，并校验信息的合法性，这个过程需要扩展 <code>AuthenticationManager</code> 完成。</p></li><li><p>若 <code>AuthenticationException</code> 异常被抛出，则身份认证失败，<code>SecurityContextHolder</code> 上下文被清除，<code>RememberMeServices#loginFail</code> 流程被执行，<code>AuthenticationFailureHandler</code> 逻辑被执行，我们可能会通过扩展此实现告知前端登录失败。</p></li><li><p>若过程中无异常抛出，并且认证后的 <code>Authentication</code> 对象顺利返回，此时 <code>SessionAuthenticationStrategy</code> 中包含的 <code>session</code> 策略会生效（例如校验会话数量是否超出限制），<code>Authentication</code> 对象被加入到当前 <code>SecurityContextHolder</code> 上下文中，<code>RememberMeServices#loginSuccess</code> 流程被执行（服务端记住用户身份，实现自动登录），<code>Spring</code> 容器上下文派发出认证成功事件，<code>AuthenticationSuccessHandler</code> 逻辑被执行，我们可能会通过扩展此实现告知前端用户登录成功。</p></li></ol><h3 id="Session-管理"><a href="#Session-管理" class="headerlink" title="Session 管理"></a>Session 管理</h3><p>一旦用户完成身份认证，服务端需要维持用户的会话，而用户则持有一个会话的凭证，一般为 <code>cookie</code> 形式。对于一个 <code>web</code> 服务端来说 <code>session</code> 的管理往往是尤为重要的，因为一旦用户的会话令牌被黑客窃取，带来的安全问题将是灾难性的，因此 <code>Spring Security</code> 内置了 <code>SessionManagementFilter</code> 过滤器用以支撑 <code>session</code> 管理相关的需求，<code>Spring Security</code> 主要分别几个层面为我们提供支持。</p><h4 id="Session-并发控制"><a href="#Session-并发控制" class="headerlink" title="Session 并发控制"></a>Session 并发控制</h4><p>对于用户会话数量的限制往往是具有普遍性的需求，当然也有些应用允许用户无限创建会话。例如针对移动端的登录，我们可能允许用户同时在三个设备进行登录，那么我们需要限制单个用户同时最多存在三个有效的 <code>session</code>，如果用户再次登录，则需要踢出多余会话或者拒绝登录请求，这取决于我们的业务设计。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentSessionControlAuthenticationStrategy</span> <span class="token keyword">implements</span><span class="token class-name">MessageSourceAware</span><span class="token punctuation">,</span> <span class="token class-name">SessionAuthenticationStrategy</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthentication</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SessionInformation</span><span class="token punctuation">></span></span> sessions <span class="token operator">=</span> sessionRegistry<span class="token punctuation">.</span><span class="token function">getAllSessions</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sessionCount <span class="token operator">=</span> sessions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> allowedSessions <span class="token operator">=</span> <span class="token function">getMaximumSessionsForThisUser</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sessionCount <span class="token operator">&lt;</span> allowedSessions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// They haven't got too many login sessions running at present</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>allowedSessions <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// We permit unlimited logins</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sessionCount <span class="token operator">==</span> allowedSessions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Only permit it though if this request is associated with one of the</span><span class="token comment">// already registered sessions</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SessionInformation</span> si <span class="token operator">:</span> sessions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>si<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// If the session is null, a new one will be created by the parent class,</span><span class="token comment">// exceeding the allowed number</span><span class="token punctuation">&#125;</span><span class="token function">allowableSessionsExceeded</span><span class="token punctuation">(</span>sessions<span class="token punctuation">,</span> allowedSessions<span class="token punctuation">,</span> sessionRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>ConcurrentSessionControlAuthenticationStrategy</code> 中我们可以看到这样的控制，当会话数量超出限制时，<code>Spring Security</code> 默认采取的策略是挤出最早的会话。</p><h4 id="防会话固定攻击"><a href="#防会话固定攻击" class="headerlink" title="防会话固定攻击"></a>防会话固定攻击</h4><blockquote><p>会话固定攻击（session fixation attack）是利用应用系统在服务器的会话ID固定不变机制，借助他人用相同的会话ID获取认证和授权，然后利用该会话ID劫持他人的会话以成功冒充他人，造成会话固定攻击。</p></blockquote><p>针对客户端已经持有会话令牌的情况，如果用户重新登录后令牌不会更改，那么可能存在用户会话被劫持的情况，进而产生严重的安全问题，因此对于用户的每一次登录行为，会话令牌应该是唯一的，<code>AbstractSessionFixationProtectionStrategy</code> 中为我们提供了这样的支持。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSessionFixationProtectionStrategy</span> <span class="token keyword">implements</span><span class="token class-name">SessionAuthenticationStrategy</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationEventPublisherAware</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthentication</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">boolean</span> hadSessionAlready <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hadSessionAlready <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>alwaysCreateSession<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Session fixation isn't a problem if there's no session</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Create new session if necessary</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hadSessionAlready <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">isRequestedSessionIdValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> originalSessionId<span class="token punctuation">;</span><span class="token class-name">String</span> newSessionId<span class="token punctuation">;</span><span class="token class-name">Object</span> mutex <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getSessionMutex</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// We need to migrate to a new session</span>originalSessionId <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session <span class="token operator">=</span> <span class="token function">applySessionFixation</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>newSessionId <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>originalSessionId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>newSessionId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Your servlet container did not change the session ID when a new session was created. You will"</span><span class="token operator">+</span> <span class="token string">" not be adequately protected against session-fixation attacks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">onSessionChange</span><span class="token punctuation">(</span>originalSessionId<span class="token punctuation">,</span> session<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>Spring Security</code> 会为用户的每次登录行为创建新的 <code>sessionId</code> 作为新的令牌返回，旧的令牌会失效，避免旧令牌被攻击者持有后发起攻击，当然改变 <code>sessionId</code> 需要 <code>servlet</code> 容器层面的支持。</p><h4 id="Session-持久化"><a href="#Session-持久化" class="headerlink" title="Session 持久化"></a>Session 持久化</h4><p>我们知道用户会话信息是存储在后端的，前端只是持有令牌进行认证，那么后端就需要将 <code>session</code> 进行持久化。默认状态下 <code>Spring Security</code> 会将用户 <code>session</code> 存储到应用本地内存中，在单体系统中这是可行的。如果我们需要分布式系统共享 <code>session</code> 方面的支持，那么必然需要集成数据库或缓存中间件对 <code>session</code> 进行存储，例如基于 <code>JDBC</code> 的或基于 <code>Redis</code> 的 <code>session</code> 持久化方案。其实 <code>Spring Session</code> 框架为我们提供了这样的支持，本人在公司业务中也采取了集成 <code>Spring Session</code> 的方式将 <code>session</code> 存储到 <code>Redis</code> 中，此处不详细论述。</p><h3 id="Remember-Me-记住我"><a href="#Remember-Me-记住我" class="headerlink" title="Remember-Me 记住我"></a>Remember-Me 记住我</h3><p>在各大互联网网站的登录界面上，我们时常能够看到 <code>记住我</code> 这样一个选项，一般来说勾选 <code>记住我</code> 登陆后的一段时间内，服务端可以记住该用户的身份，下次访问该网站时，即使用户上一次的会话已经丢失，也可以实现自动登录的功能。</p><h4 id="Remember-Me-与-Session-的区别"><a href="#Remember-Me-与-Session-的区别" class="headerlink" title="Remember-Me 与 Session 的区别"></a>Remember-Me 与 Session 的区别</h4><p>值得注意的是 <code>remember-me</code> 与 <code>session</code> 是两个不同的概念，<code>session</code> 指的是服务端识别用户当前持有的会话，只要这个会话存在，服务端可以直接从会话中读取到当前用户的信息，无需再进行认证的过程。而 <code>remember-me</code> 更多情况下是指服务端需要记住用户的认证信息，用户下次访问时实现自动登录，而不是不用登录，这两者有微妙的区别。但是当 <code>Spring Security</code> 集成 <code>Spring Session</code> 后两者在实现上其实是一致的，这是框架的设计，个人认为这一点无需深究。</p><h4 id="基于-Token-的-Remember-Me"><a href="#基于-Token-的-Remember-Me" class="headerlink" title="基于 Token 的 Remember-Me"></a>基于 Token 的 Remember-Me</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RememberMeServices</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> <span class="token function">autoLogin</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">loginFail</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">loginSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">Authentication</span> successfulAuthentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RememberMeServices</code> 接口抽象了 <code>remember-me</code> 功能所需要的行为，默认状态下当用户首次登录成功时 <code>loginSuccess</code> 方法会被回调，此时服务端会向客户端发放一个 <code>token</code>（一般以添加 <code>cookie</code> 的形式），这个 <code>token</code> 中包含了用户的认证信息（例如用户名、密码、到期时间等），当然这些信息都是经过加密的，因为 <code>token</code> 如果被黑客窃取将泄露用户的敏感信息，造成严重的安全问题。一旦用户持有了 <code>token</code>，下次访问服务时，服务端会从 <code>token</code> 中解析认证信息并实现自动登录授权，可以理解成程序自动帮用户发起了一次登录。这是 <code>Spring Security</code> 的默认实现，集成 <code>Spring Session</code> 后处理逻辑有所不同，有兴趣可以去翻阅源码，此处不进行赘述。</p><h3 id="Anonymous-匿名用户"><a href="#Anonymous-匿名用户" class="headerlink" title="Anonymous 匿名用户"></a>Anonymous 匿名用户</h3><p>一般来说很多网站都会支持匿名用户的访问，即使在不注册成为系统的用户的情况下，也有一些模块的权限是对游客进行开放的，这一类用户我们称之为匿名用户，<code>Spring Security</code> 中也存在这样的支持。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousAuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span> <span class="token keyword">implements</span><span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span><span class="token function">createAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Populated SecurityContextHolder with anonymous token: '"</span><span class="token operator">+</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"SecurityContextHolder not populated with anonymous token, as it already contained: '"</span><span class="token operator">+</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token class-name">Authentication</span> <span class="token function">createAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">AnonymousAuthenticationToken</span> auth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnonymousAuthenticationToken</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>principal<span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>auth<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span>authenticationDetailsSource<span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> auth<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤器 <code>AnonymousAuthenticationFilter</code> 中包含了对匿名用户的认证，如果经过 <code>filter chain</code> 中之前所有的过滤器处理后，当前的 <code>SecurityContextHolder</code> 上下文中依然不存在 <code>Authentication</code> 用户认证信息，那么 <code>Spring Security</code> 会认为当前用户是一个匿名用户，并授予匿名用户的权限，当然这个权限是我们可以通过配置进行自定义的。只要当前访问的资源权限包含在匿名用户所拥有的权限范围内，请求会被放行。</p><h2 id="实现分享"><a href="#实现分享" class="headerlink" title="实现分享"></a>实现分享</h2><hr><p>本人在工作中经历了利用 <code>Spring Security</code> 框架对公司原有的登录授权功能进行重构的过程，体验到了要建设一个安全稳定的系统实属不易，需要对 <code>WEB</code> 安全方面的理论性知识具有广泛深入的了解，近来也在阅读相关的书籍，希望可以建立较为完善的对于 <code>WEB</code> 安全方面的认知，本文主要对 <code>Spring Security</code> 的 <code>Authentication</code> 部分进行总结和探讨，由于 <code>Spring Security</code> 是一个针对 <code>Spring Based Application</code> 安全方面覆盖广泛的框架，其设计上具有相当的健壮性和复杂性，值得探讨的东西还有很多，希望后续可以继续补充。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">priv<span class="token punctuation">.</span>just<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationManagerBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>method<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableGlobalMethodSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span></span><span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>password<span class="token punctuation">.</span></span><span class="token class-name">PasswordEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationEntryPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationFailureHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationSuccessHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">RememberMeServices</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>logout<span class="token punctuation">.</span></span><span class="token class-name">LogoutSuccessHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span></span><span class="token class-name">RedisIndexedSessionRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">EnableRedisHttpSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>session<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">SpringSessionBackedSessionRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>session<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">SpringSessionRememberMeServices</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token comment">/** * spring security 核心配置 * @author Ethan Zhang */</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableRedisHttpSession</span><span class="token punctuation">(</span>redisNamespace <span class="token operator">=</span> <span class="token string">"just:session:"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebSecurityConfigurer</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PERMIT_ALL_URL <span class="token operator">=</span> <span class="token string">"/test/**"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> LOGIN_URL <span class="token operator">=</span> <span class="token string">"/user/security/login"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> LOGOUT_URL <span class="token operator">=</span> <span class="token string">"/user/security/logout"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PasswordEncoder</span> PASSWORD_ENCODER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisIndexedSessionRepository</span> redisIndexedSessionRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http                <span class="token comment">// 表单方式登录</span>                <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 登录处理地址</span>                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span>LOGIN_URL<span class="token punctuation">)</span>                <span class="token comment">// 登录成功处理</span>                <span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span><span class="token function">myAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 登录失败处理</span>                <span class="token punctuation">.</span><span class="token function">failureHandler</span><span class="token punctuation">(</span><span class="token function">myAuthenticationFailureHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 记住用户身份</span>                <span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 集成 spring session</span>                <span class="token punctuation">.</span><span class="token function">rememberMeServices</span><span class="token punctuation">(</span><span class="token function">springSessionRememberMeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 用户退出</span>                <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 用户退出地址</span>                <span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span>LOGOUT_URL<span class="token punctuation">)</span>                <span class="token comment">// 用户退出成功处理</span>                <span class="token punctuation">.</span><span class="token function">logoutSuccessHandler</span><span class="token punctuation">(</span><span class="token function">myLogoutSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 授权请求</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 无授权地址</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>PERMIT_ALL_URL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 其余所有请求都需要授权访问</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 异常处理</span>                <span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 未登录用户访问无权限资源处理</span>                <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span><span class="token function">myAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 已登录用户访问无权限资源处理</span>                <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span><span class="token function">myAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 会话管理</span>                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 最多同时存在 session 数量</span>                <span class="token punctuation">.</span><span class="token function">maximumSessions</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token comment">// 集成 spring session</span>                <span class="token punctuation">.</span><span class="token function">sessionRegistry</span><span class="token punctuation">(</span><span class="token function">springSessionBackedSessionRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 跨域处理</span>                <span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// CSRF（跨站请求伪造）支持</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span>PASSWORD_ENCODER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationSuccessHandler</span> <span class="token function">myAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationFailureHandler</span> <span class="token function">myAuthenticationFailureHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyAuthenticationFailureHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">LogoutSuccessHandler</span> <span class="token function">myLogoutSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLogoutSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token function">myAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token function">myAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RememberMeServices</span> <span class="token function">springSessionRememberMeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringSessionRememberMeServices</span> rememberMeServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringSessionRememberMeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rememberMeServices<span class="token punctuation">.</span><span class="token function">setRememberMeParameterName</span><span class="token punctuation">(</span><span class="token string">"remember"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rememberMeServices<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SpringSessionBackedSessionRegistry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">springSessionBackedSessionRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringSessionBackedSessionRegistry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>redisIndexedSessionRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是本人实现代码的 <code>Spring Security</code> 核心配置部分，可以作为一种总结和分享。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Security </tag>
            
            <tag> Spring Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝系统消息预警</title>
      <link href="/2020/11/21/qian-chang-xi-tong-xiao-xi-yu-jing/"/>
      <url>/2020/11/21/qian-chang-xi-tong-xiao-xi-yu-jing/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>在现实的系统运行过程中，问题的产生几乎是不可避免的。因为我们要考虑的是在产生问题时如何将损失降到最低，如果快速发现，定位并解决问题。在这个过程中可以说时间是最重要的成本，所以我们期望系统能够具备自动预警的功能，将问题及时暴露给开发人员，如果等待用户反馈，那么此时这个问题往往已经给公司带来了实质性的损失，至少给用户留下了不良印象。在本人的工作实践中，主要通过钉钉机器人实现预警机制，依赖于钉钉的 <code>API</code> 将系统异常消息发送至内部钉钉群，以便开发人员及时反馈处理。当然钉钉本身只是作为一种消息发送的实现，在实际的应用场景中可以是短信通知，邮件通知等形式，本文主要从抽象层面上探讨并分享系统预警机制的思想和实现。</em></p></blockquote><span id="more"></span><h2 id="消息发送器抽象"><a href="#消息发送器抽象" class="headerlink" title="消息发送器抽象"></a>消息发送器抽象</h2><hr><p>从设计的抽象层面上讲，如果我们需要发送消息，那么需要一个主体，我把它叫做 <code>MessageSender</code> 消息发送器，由于在本文中主要基于钉钉实现，暂且将之定义为 <code>DingTalkMessageSender</code>，其实这是一个抽象概念，不必与某一实现相捆绑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>dingtalk</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 钉钉消息发送器 * @author Ethan Zhang */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DingTalkMessageSender</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 消息发送器名称，Spring上下文中保证唯一     */</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 默认顺序发送，缓存 1 天     * @param content 消息内容     * @param distinctions 去重特征值，不传默认为消息整体     */</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> distinctions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">send</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>DAYS<span class="token punctuation">,</span> distinctions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 消息顺序发送，自定义缓存时间，在缓存时间内消息不会再次发送     * @param content 消息内容     * @param duration 缓存时间     * @param timeUnit 时间单位     * @param distinctions 去重特征值，不传默认为消息整体     */</span>    <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token keyword">long</span> duration<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> distinctions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 消息延迟发送     * @param content 消息内容     * @param duration 延迟时间     * @param timeUnit 时间单位     * @param distinctions 去重特征值，不传默认为消息整体     */</span>    <span class="token keyword">void</span> <span class="token function">sendDelay</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token keyword">long</span> duration<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> distinctions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我给 <code>MessageSender</code> 定义了两种消息发送方式，分别是消息顺序发送以及消息延时发送， 同时它们都支持在一定时期内保证消息的唯一发送，因为一旦系统出现故障，往往会产生大量重复性的异常信息，此时如果无节制地进行发送只会对开发人员产生干扰，因此我们需要一种去重机制，默认根据消息内容整体去重，也可以摘取消息特征值进行去重，例如我们可以将订单编号作为特征值，可以保证一个订单只发送一次消息。当然这一种机制需要设定一个时间范围，因为在时间范围以外可能是系统另一次的故障事件，我们依然需要保持关注。</p><h2 id="默认消息发送器实现"><a href="#默认消息发送器实现" class="headerlink" title="默认消息发送器实现"></a>默认消息发送器实现</h2><hr><p>首先我们可以为消息发送器提供一种默认实现，它应该能够满足我们系统普遍性的需求。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesdefault-ding-talk-message-sender.png" alt="DefaultDingTalkMessageSender"></p><p>对于一个预警消息发送器来说，我们首先可以明确几个原则：</p><ul><li><p>消息发送行为不应该影响主业务流程，即时消息发送失败，异常也不必对外暴露。</p></li><li><p>消息发送行为可能存在一定的耗时，造成线程阻塞，同时考虑到预警消息并不要求绝对的可靠性，推荐使用异步方式发送。</p></li><li><p>消息发送的频率是非均匀的，而底层的消息客户端实现可能对发送频率存在限制（例如钉钉限制为每分钟20条），因此我们往往需要一个缓冲队列暂存客户端发送的消息，同时可以设定一个周期性执行器作为消息消费者以固定频率从缓冲区取出消息执行发送操作。</p></li><li><p>已发送消息的特征值需要缓存至消息中间件（此处以 <code>Redis</code> 为例），已满足分布式环境下的消息去重功能。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>dingtalk</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>dingtalk<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">DingTalkClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>dingtalk<span class="token punctuation">.</span>api<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">OapiRobotSendRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>dingtalk<span class="token punctuation">.</span>api<span class="token punctuation">.</span>response<span class="token punctuation">.</span></span><span class="token class-name">OapiRobotSendResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Builder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">DigestUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PreDestroy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">PriorityBlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>constant<span class="token punctuation">.</span></span><span class="token class-name">CachePrefixConstant</span><span class="token punctuation">.</span>COMMON_CACHE_PREFIX<span class="token punctuation">;</span><span class="token comment">/** * 钉钉消息发送默认实现 * 消息缓冲，定时发送 * @author Ethan Zhang */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultDingTalkMessageSender</span> <span class="token keyword">implements</span> <span class="token class-name">DingTalkMessageSender</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PREFIX <span class="token operator">=</span> COMMON_CACHE_PREFIX <span class="token operator">+</span> <span class="token string">"ding-talk-message-distinct:"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">DingTalkClient</span> dingTalkClient<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">></span></span> buffer<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledThreadPoolExecutor</span> scheduler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DefaultDingTalkMessageSender</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">,</span> <span class="token class-name">DingTalkClient</span> dingTalkClient<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"DingTalkMessageSender name can not be empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dingTalkClient <span class="token operator">=</span> dingTalkClient<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token operator">::</span><span class="token function">getTimestamp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        scheduler<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">send</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        scheduler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token keyword">long</span> duration<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> distinctions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduler<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">distinctions</span><span class="token punctuation">(</span><span class="token function">convertToSet</span><span class="token punctuation">(</span>distinctions<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                buffer<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDelay</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token keyword">long</span> duration<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> distinctions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        scheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinctions</span><span class="token punctuation">(</span><span class="token function">convertToSet</span><span class="token punctuation">(</span>distinctions<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> duration<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkIfSent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sendDingTalkMessage</span><span class="token punctuation">(</span>dingTalkClient<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">markSent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">sendDingTalkMessage</span><span class="token punctuation">(</span><span class="token class-name">DingTalkClient</span> client<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OapiRobotSendRequest</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OapiRobotSendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setMsgtype</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OapiRobotSendRequest<span class="token punctuation">.</span>Text</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OapiRobotSendRequest<span class="token punctuation">.</span>Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OapiRobotSendRequest<span class="token punctuation">.</span>At</span> at <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OapiRobotSendRequest<span class="token punctuation">.</span>At</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        at<span class="token punctuation">.</span><span class="token function">setIsAtAll</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setAt</span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OapiRobotSendResponse</span> res <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"send ding talk message error!"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">markSent</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> size <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token function">getRedisKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> putRes <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token function">getRedisKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> size <span class="token operator">&amp;&amp;</span> putRes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token function">getRedisKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">checkIfSent</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token function">getRedisKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"check if send error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">getRedisKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> PREFIX <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">convertToSet</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> src<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> src <span class="token operator">||</span> src<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token annotation punctuation">@Builder</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> timestamp<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> expire<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> distinctions<span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>distinctions<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> distinctions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">encode</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5DigestAsHex</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="消息分片发送"><a href="#消息分片发送" class="headerlink" title="消息分片发送"></a>消息分片发送</h2><hr><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesmultipart-ding-talk-message-sender.png" alt="MultipartDingTalkMessageSender"></p><p>在某些场景下，我们需要将统一来源的消息发送至不同的目的地，例如不同的钉钉群，不同的邮件地址或是不同的手机号，如果我们定义为一个 <code>client</code> 指向固定的一个目的地，那么我们需要将消息以某种规则分片到不同的 <code>client</code>，决定它们的走向。因此一个 <code>DingTalkMessageSender</code> 需要持有多个 <code>client</code>，同时多个 <code>client</code> 具有类型负载均衡的作用，假设单个 <code>client</code> 的消息发送频率有限制，那么我们可以组合多个 <code>client</code> 支撑大量的消息发送需求。那么消息如何才能合理分配呢？我们可以定义一种 <code>client</code> 的 <code>selector</code> 机制，利用选择器选出当前最为恰当的客户端进行消息发送，这一选择是可以交给开发人员自定义的，当前也会提供默认实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>dingtalk</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>dingtalk<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">DingTalkClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Cache</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Caffeine</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 消息分片发送 * 当消息量大，单个钉钉机器人的发送频率无法满足时，可将消息分片到多个机器人分别发送 * @author Ethan Zhang */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultipartDingTalkMessageSender</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultDingTalkMessageSender</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_SEND_MESSAGE_PER_MINUTE <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DingTalkClient</span><span class="token punctuation">,</span> <span class="token class-name">Cache</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> clients<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Caffeine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> caffeine <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span>MAX_SEND_MESSAGE_PER_MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DingTalkClientSelector</span> selector <span class="token operator">=</span> clients <span class="token operator">-></span> clients<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>entry <span class="token operator">-></span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">estimatedSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAX_SEND_MESSAGE_PER_MINUTE<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MultipartDingTalkMessageSender</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DingTalkClient</span><span class="token punctuation">></span></span> dingTalkClients<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> redisTemplate<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>dingTalkClients<span class="token punctuation">,</span> <span class="token string">"dingTalkClients can not be empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dingTalkClients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>dingTalkClient <span class="token operator">-></span> clients<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dingTalkClient<span class="token punctuation">,</span> caffeine<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        scheduler<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">send</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"scheduler has bean interrupted!"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkIfSent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">DingTalkClient</span> client <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>clients<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sendDingTalkMessage</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">markSent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            clients<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 客户端选择器，可自定义     */</span>    <span class="token annotation punctuation">@FunctionalInterface</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DingTalkClientSelector</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DingTalkClient</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DingTalkClient</span><span class="token punctuation">,</span> <span class="token class-name">Cache</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> clients<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="消息合并发送"><a href="#消息合并发送" class="headerlink" title="消息合并发送"></a>消息合并发送</h2><hr><p>在某些场景下，通过增大消息发送频率来消费大量消息并不是一种良好的选择，频率的异常预警对于开发人员是一种干扰，长时间的报警可能造成麻木性，失去预警本身的意义，同时我们也不希望重要消息丢失，因此我们可以将一段时间内的消息收集合并发送，例如收集一小时内系统产生的异常信息，合并后一次发送，这样既不会使我们丢失重要信息，也不会带来频繁报警的困扰，当然从消息的即时性上来说有一定的损失。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesmerge-ding-talk-message-sender.png" alt="MergeDingTalkMessageSender"></p><p>消息的合并逻辑我们可以提供一种抽象叫做 <code>merger</code>，可以提供给开发人员扩展，在这里我仅提供了一种字符串合并的实现，从更为广义的角度去思考，我们是否可以可以将消息合并为文件发送？这都是我们可以根据特定业务场景去尝试的实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>dingtalk</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>dingtalk<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">DingTalkClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Instant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZoneId</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span><span class="token punctuation">;</span><span class="token comment">/** * 消息合并发送 * 消息量大，频繁发送影响体验，可定期合并消息发送 * @author Ethan Zhang */</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeDingTalkMessageSender</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultDingTalkMessageSender</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 发送间隔，默认 5s     */</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> period <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">MessageMerger</span> merger <span class="token operator">=</span> messages <span class="token operator">-></span> messages<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>message <span class="token operator">-></span> <span class="token operator">!</span><span class="token function">checkIfSent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>message <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&#123;%s&#125;-&#123;%s&#125;\n\n"</span><span class="token punctuation">,</span> <span class="token function">formatTimestamp</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MergeDingTalkMessageSender</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">,</span> <span class="token class-name">DingTalkClient</span> dingTalkClient<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> redisTemplate<span class="token punctuation">,</span> dingTalkClient<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        scheduler<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">></span></span> messages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">drainTo</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sendMerge</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> period<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sendMerge</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">></span></span> messages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> mergeContent <span class="token operator">=</span> merger<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>mergeContent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sendDingTalkMessage</span><span class="token punctuation">(</span>dingTalkClient<span class="token punctuation">,</span> mergeContent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">markSentMerge</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">markSentMerge</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">></span></span> messages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> size <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token function">getRedisKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token function">getRedisKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                messages<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> message <span class="token operator">-></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token function">getRedisKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> messages<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToLong</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token operator">::</span><span class="token function">getExpire</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0d</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">formatTimestamp</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>ISO_DATE_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 消息合并器，可自定义     */</span>    <span class="token annotation punctuation">@FunctionalInterface</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageMerger</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">></span></span> messages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> BlockingQueue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cache 缓存抽象</title>
      <link href="/2020/11/17/spring-cache-huan-cun-chou-xiang/"/>
      <url>/2020/11/17/spring-cache-huan-cun-chou-xiang/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>要构建一个高性能高吞吐量的系统，缓存是我们必须考虑的问题。几乎可以这样说，任何一个系统都需要 N 个缓存层来解决数据交互中的 <code>IO</code> 问题，因为磁盘 <code>IO</code> 和内存 <code>IO</code> 在耗时上不是一个数量级的，我们总是更倾向于去读写内存而非磁盘，但内存资源的稀缺性决定了我们无法将所有业务数据加载到缓存中，所以这时候就涉及到了缓存的命中率，淘汰机制等问题，在理想状态下，一个系统的缓存应该以最小的内存代价换取最高的缓存命中率。要达到理想状态需要数据结构及算法方面的支撑，所以我们总会选取一些成熟的方案去实现，例如 <code>Guava Cache</code>，<code>Caffeine</code>，<code>EhCache</code>，<code>Redis</code> 等框架或中间件都是我们会考虑的选择，但是在我们的系统集成这些缓存框架时，其实我们并不希望强依赖于框架本身，毕竟底层的缓存方案在未来存在切换或升级的可能性，例如 <code>Spring Boot 2.0</code> 后将 <code>Guava Cache</code> 升级为 <code>Caffeine</code>，如果我们的业务代码与缓存方案强关联，此时升级成本是高昂的，可谓牵一发而动全身。所以采用一个中间层隔开业务系统与缓存框架的强关联性不失为一个明智的选择。因此 <code>Spring Cache</code> 应运而生，官方文档上称之为 <code>Cache Abstraction</code> 缓存抽象，也就是说 <code>Spring Cache</code> 并不作为一个缓存方案的实现，而是作为一个抽象层，帮助我们嫁接第三方的缓存方案，并且 <code>Spring Cache</code> 采用注解驱动的方式极大程度地简化缓存层面的编码。</em></p></blockquote><span id="more"></span><h2 id="Cache-Abstraction-缓存抽象"><a href="#Cache-Abstraction-缓存抽象" class="headerlink" title="Cache Abstraction 缓存抽象"></a>Cache Abstraction 缓存抽象</h2><hr><p><code>Spring Batch</code> 为了将我们的业务代码与底层缓存实现隔离，必然需要建立一些抽象模型，这些模型需要在缓存层面上具有通用性，同时又应该满足我们大部分的业务需求，虽然 <code>Java</code> 生态内庞杂的缓存方案以及它们个性化的 <code>Native API</code>，决定了 <code>Spring Cache</code> 无法做到彻底的兼容并包，但是 <code>Spring Cache</code> 最大程度上为了我们集成不同的框架提供了便利性。</p><h3 id="CacheManager-缓存管理"><a href="#CacheManager-缓存管理" class="headerlink" title="CacheManager 缓存管理"></a>CacheManager 缓存管理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Spring's central cache manager SPI. * Allows for retrieving named &#123;@link Cache&#125; regions. * * @author Costin Leau * @since 3.1 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CacheManager</span> <span class="token punctuation">&#123;</span><span class="token comment">/** * Return the cache associated with the given name. * @param name the cache identifier (must not be &#123;@code null&#125;) * @return the associated cache, or &#123;@code null&#125; if none found */</span><span class="token class-name">Cache</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * Return a collection of the cache names known by this manager. * @return the names of all caches known by the cache manager */</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先 <code>Spring</code> 定义了抽象意义上的缓存 <code>Cache</code>，它泛指任何意义上的缓存，针对一个缓存模型，必然有添加，查找，更新，清除等操作。我们的业务系统中往往需要多个这样的缓存模型，所以我们需要一个缓存管理器将它们管理起来，在 <code>Spring Cache</code> 中的这样的模型叫做 <code>CacheManager</code>。<code>CacheManager#getCache</code> 方法会根据缓存名称匹配到对应的缓存，而 <code>CacheManager#getCacheNames</code> 可以让我们获取到该管理器中所有的缓存名称。</p><h3 id="CaffeineCacheManager-缓存管理实现"><a href="#CaffeineCacheManager-缓存管理实现" class="headerlink" title="CaffeineCacheManager 缓存管理实现"></a>CaffeineCacheManager 缓存管理实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaffeineCacheManager</span> <span class="token keyword">implements</span> <span class="token class-name">CacheManager</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Cache</span><span class="token punctuation">></span></span> cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Cache</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Caffeine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> cacheBuilder <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> cacheLoader<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Cache</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Cache</span> cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cache <span class="token operator">=</span> <span class="token function">createCaffeineCache</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> cache<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token class-name">Cache</span> <span class="token function">createCaffeineCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CaffeineCache</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token function">createNativeCaffeineCache</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isAllowNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span>Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">createNativeCaffeineCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheLoader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cacheBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cacheBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Caffeine</code> 是一个基于 <code>Java8</code> 开发的提供了近乎最佳命中率的高性能的缓存库。，在 <code>Spring Boot 2.0</code> 之后成为官方推荐的本地缓存方案，我们可以参考下 <code>Spring Cache</code> 适配 <code>Caffeine</code> 的 <code>CaffeineCacheManager</code>，如果我们想要将 <code>Caffeine</code> 作为 <code>Spring Cache</code> 的底层方案，那么我们需要在上下文中装配该 <code>bean</code>，其中的 <code>getCache</code> 展示了创建 <code>CaffeineCache</code> 的过程，<code>CaffeineCache</code> 的初始化参数主要取决于 <code>Caffeine</code> 构建者对象，而这时需要开发者去自定义的。在这里我们可以看到 <code>Spring Cache</code> 倾向于引导开发者使用统一的缓存配置，毕竟 <code>Spring Cache</code> 作为一个抽象层，并不适宜于做太多的个性化设计，如果我们业务实在需要个性化，那么 <code>Spring Cache</code> 建议我们使用底层缓存框架的 <code>Native API</code>，<code>Spring Cache</code> 旨在为我们解决大部分的缓存需求。</p><h3 id="注解驱动缓存"><a href="#注解驱动缓存" class="headerlink" title="注解驱动缓存"></a>注解驱动缓存</h3><p><code>Spring Cache</code> 为了降低缓存逻辑对于业务代码的侵入性，使我们仅依赖于一些注解即可实现常规缓存需求，这是一种低耦合的方式，从根本上来说这是 <code>Spring</code> 的 <code>AOP</code> 思想广泛使用于整个家族生态的典型范例。</p><ul><li><p><code>Cacheable</code> 是 <code>Spring Cache</code> 中最常用的注解，用于标注某一方式返回的数据是可被缓存的，而缓存的 <code>key</code> 即为方法参数，该方法被执行一次后，只要缓存尚在有效期内，那么后续针对该方法的调用不会被真正执行，而是在 <code>Spring Cache</code> 的切面中命中缓存返回。</p></li><li><p><code>CacheEvict</code> 用以标注某一方法执行会导致对应缓存的清除，这往往适用于一些 <code>delete</code> 类型的方法，因为数据库数据被删除后缓存中的数据也应该得到及时清除，保持数据一致性，避免产生不可预知的业务问题。</p></li><li><p><code>CachePut</code> 的使用场景相对较少，被该注解标注的方法始终会被执行，而执行结果始终被加入到缓存中，这适用于一些 <code>load</code> 类型的方法，有时候我们希望某一方法始终从数据库读取，保证数据的可靠性，同时将最新数据同步到缓存中，方便其他业务场景使用。或者这一类方法可能被我们用于强制刷新缓存。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>common<span class="token punctuation">.</span>key<span class="token punctuation">.</span></span><span class="token class-name">DemoCacheKey</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>common<span class="token punctuation">.</span>value<span class="token punctuation">.</span></span><span class="token class-name">DemoCacheValue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CacheConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CacheEvict</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CachePut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Cacheable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">SpringCacheAutoConfiguration</span><span class="token punctuation">.</span>REDIS_CACHE_MANAGER<span class="token punctuation">;</span><span class="token comment">/** * 缓存示例 */</span><span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"demo"</span><span class="token punctuation">,</span> cacheManager <span class="token operator">=</span> REDIS_CACHE_MANAGER<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoCache</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 缓存中存在，不执行该方法，否则执行并将结果加入缓存     */</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#demoCacheKey.id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DemoCacheValue</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">DemoCacheKey</span> demoCacheKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DemoCacheValue</span> demoCacheValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoCacheValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demoCacheValue<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>demoCacheKey<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demoCacheValue<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>demoCacheKey<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> demoCacheValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 永远执行该方法，并将结果加入缓存     */</span>    <span class="token annotation punctuation">@CachePut</span>    <span class="token keyword">public</span> <span class="token class-name">DemoCacheValue</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DemoCacheValue</span> demoCacheValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoCacheValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demoCacheValue<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> demoCacheValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 清除对应缓存     */</span>    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#demoCacheKey.id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">DemoCacheKey</span> demoCacheKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是 <code>CacheEvict</code> 注解中有一个属性 <code>allEntries</code>，当该属性被置为 <code>true</code> 时，一旦目标方法被调用，<code>Spring Cache</code> 会自动清除该 <code>cacheName</code> 下的所有缓存，这意味着需要同时删除多个 <code>redis key</code>，而通过查看源码发现，底层是使用 <code>KEYS</code> 命令进行模糊匹配，如果此时涉及 <code>KEY</code> 数量较多，并且其中有 <code>big key</code>，由于 <code>redis</code> 是使用单线程模式执行命令，可能造成 <code>redis</code> 主线程长时间阻塞，影响其他客户端请求的执行，所以这个属性需要慎重使用。如果实在需要批量删除 <code>key</code> 的场景，建议直接使用 <code>redis</code> 的 <code>API</code> （例如使用 <code>scan</code> 命令）进行迭代删除。</p><h2 id="多种-CacheManager-的并存"><a href="#多种-CacheManager-的并存" class="headerlink" title="多种 CacheManager 的并存"></a>多种 CacheManager 的并存</h2><hr><p>在现实的应用场景中我们可能需要多种 <code>Cache</code> 在同个应用中并存，尤其是本地缓存和分布式缓存的并存，对于一些体量较小，实时性要求不高的数据，我们更倾向于将它们缓存到应用本地，毕竟对于本地内存的读写是最为快速的，这个过程不涉及网络 <code>IO</code> 的耗时。其实 <code>Spring Cache</code> 也支持我们达到这样的目的，本人在工作中就做过相应的实践。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesspring-cache-manager.png" alt="spring-cache-manager"></p><p>通过在 <code>Spirng</code> 容器上下文中装配多个 <code>CacheManager</code> 的 <code>bean</code>，而 <code>Spring Cache</code> 中的注解为我们提供了自定义 <code>cacheManager</code> 的属性，因此我们可以自由地选用当前容器中存在的缓存方案，同时我们的代码只是依赖于 <code>Spring</code> 注解，而不强依赖于底层的缓存框架，这对于我们系统的升级与迁移都具有莫大的意义。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Caffeine</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">DemoCache</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">AutoConfigureAfter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span></span><span class="token class-name">RedisAutoConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CacheManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CachingConfigurerSupport</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableCaching</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span></span><span class="token class-name">CaffeineCacheManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericToStringSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>constant<span class="token punctuation">.</span></span><span class="token class-name">CachePrefixConstant</span><span class="token punctuation">.</span>COMMON_CACHE_PREFIX<span class="token punctuation">;</span><span class="token comment">/** * Spring Cache 缓存配置 * @see DemoCache 缓存示例 * @author zhangyifan@wshifu.com */</span><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringCacheAutoConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEFAULT_CACHE_MANAGER <span class="token operator">=</span> <span class="token string">"defaultCacheManager"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> REDIS_CACHE_MANAGER <span class="token operator">=</span> <span class="token string">"redisCacheManager"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">CacheManager</span> defaultCacheManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> defaultCacheManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 本地（默认）缓存方案     * @see &lt;a href="https://github.com/ben-manes/caffeine/wiki/Home-zh-CN">Caffeine&lt;/a>     * @see CaffeineCacheManager     */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomCaffeineCacheConfiguration</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>DEFAULT_CACHE_MANAGER<span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">defaultCacheManager</span><span class="token punctuation">(</span><span class="token class-name">Caffeine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> defaultCaffeine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">CaffeineCacheManager</span> caffeineCacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaffeineCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            caffeineCacheManager<span class="token punctuation">.</span><span class="token function">setCaffeine</span><span class="token punctuation">(</span>defaultCaffeine<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> caffeineCacheManager<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">Caffeine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">defaultCaffeine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Caffeine</span>                    <span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 分布式缓存方案 Redis     * @see RedisCacheManager     */</span>    <span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">RedisAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomRedisCacheConfiguration</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GenericToStringSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> genericToStringSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericToStringSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>REDIS_CACHE_MANAGER<span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">redisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RedisCacheManager</span> redisCacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>            redisCacheManager<span class="token punctuation">.</span><span class="token function">setUsePrefix</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisCacheManager<span class="token punctuation">.</span><span class="token function">setDefaultExpiration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 缓存过期时间自定义，默认缓存 1 天</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span> expires <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            expires<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisCacheManager<span class="token punctuation">.</span><span class="token function">setExpires</span><span class="token punctuation">(</span>expires<span class="token punctuation">)</span><span class="token punctuation">;</span>            redisCacheManager<span class="token punctuation">.</span><span class="token function">setCachePrefix</span><span class="token punctuation">(</span>cacheName <span class="token operator">-></span> stringRedisSerializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>COMMON_CACHE_PREFIX <span class="token operator">+</span> cacheName <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> redisCacheManager<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">setDefaultSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericFastJsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>genericToStringSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>genericToStringSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">setEnableTransactionSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> template<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是本人在工作实践中对于 <code>Spring Cache</code> 自定义配置，本地缓存方案 <code>Caffeine</code> 与分布式缓存 <code>Redis</code> 并存，可以作为参考代码。个人认为 <code>Spring Cache</code> 这个框架最大的意义在于建立缓存的抽象层，最大程度地降低系统业务代码与缓存框架的耦合性，同时简化我们的编码。但是抽象本身是一把双刃剑，松耦合的同时它为我们个性化缓存配置带来了较大的难度，毕竟市场上主流缓存方案的实现各不相同，<code>Spring Cache</code> 在统一层面上不得不做很多的妥协，求同存异，以维持最大程度的统一性。以我个人的使用经验来看，<code>Spring Cache</code> 可以引入我们的系统作为一种兜底的缓存方案，针对特殊化的业务需求，我们依然应该寻求底层缓存框架的 <code>Native API</code> 去解决。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cache </tag>
            
            <tag> Caffeine </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据批量处理优化之 Spring Batch</title>
      <link href="/2020/10/28/shu-ju-pi-liang-chu-li-you-hua-zhi-spring-batch/"/>
      <url>/2020/10/28/shu-ju-pi-liang-chu-li-you-hua-zhi-spring-batch/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>在企业级生产场景中数据的批量处理往往是一个具有广泛性的需求，例如用户数据的导入导出，内部数据的迁移，业务数据的统计计算等，这样的数据往往都是较大体量，需要从一种形式转换为另一种形式，或是从一个数据源迁移到另一个目的地。显然这一类问题是具有高度抽象性的，那就意味着我们可以抽象出一些关键组件解决这一类问题，我了解到 <code>Spring Batch</code> 正是这一类问题的解决方案，与我当时的实现对比，我发现有些设计想法颇为相似，当然 <code>Spring Batch</code> 在数据处理的容错性、并发性、扩展性、复用性上有更深入的考虑。我发现当时的实现有些重复造轮子的感觉，不过每一次造轮子总能让自己有所收获，同时从 <code>Spring Batch</code> 的设计中也可以反思自己在实现过程中的缺陷。</em></p></blockquote><span id="more"></span><h2 id="Spring-Batch-整体架构设计"><a href="#Spring-Batch-整体架构设计" class="headerlink" title="Spring Batch 整体架构设计"></a>Spring Batch 整体架构设计</h2><hr><p>在我们设计一个框架时，首先我们需要规划其整体架构，由简入繁，由抽象到具体，我们需要针对一个问题抓到其本质，并将其抽象为程序语言来表达，下图是 <code>Spring</code> 官方文档中对 <code>Spring Batch</code> 模型的整体描绘，可以帮助我们理解 <code>Spring Batch</code> 的运作机制。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesspring-batch-reference-model.png" alt="Spring Batch 架构模型"></p><ul><li><code>Job</code> 是对一个批处理任务的抽象，代表着我们执行任务的最大粒度。</li><li><code>Job</code> 代表的是我们所定义一类具体化的批处理任务，例如订单导出任务，在实际的场景中一个批处理任务往往具备一定筛选条件，例如我想导出2020年10月的订单，也就是我需要给 <code>Job</code> 设定参数，这些参数就叫做 <code>JobParameters</code>，<code>JobLauncher</code> 是任务加载器，它帮助我们将 <code>Job</code> 和 <code>JobParameters</code> 组合起来成为 <code>JobInstance</code>，<code>JobInstance</code> 代表 <code>Job</code> 的一个实例，它的条件已经是确定的。而 <code>JobInstance</code> 又可能被执行多次，例如一次导出任务失败后，系统可能具备重试机制，这时候每一次执行叫做 <code>JobExecution</code>，所以当我们实际执行一个 <code>Job</code> 时，最终我们运行的是 <code>JobExecution</code> 对象。</li><li><code>Step</code> 代表 <code>Job</code> 中的每一个步骤，一个 <code>Job</code> 可以只有一个步骤组成，也可以是多个步骤组成，这个取决于我们业务的复杂性，<code>Spring Batch</code> 为我们提供了这样的扩展性。</li><li>我们可以把 <code>Step</code> 看成是一个批处理中的子任务，那么一个子任务往往需要三个组成部分，数据的读取（<code>ItemReader</code>），数据的处理（<code>ItemProcessor</code>），数据的写出（<code>ItemWriter</code>），<code>Spring Batch</code> 把一个 <code>Step</code> 切割为这三个部分，可以帮助我们很好地划分一个任务，做到单一责任制，每一个组件可各司其职完成一次任务。</li><li><code>JobRepository</code> 是一个任务持久化仓库，在一个任务的执行过程中，我们总是需要记录一些任务的执行进度，执行状态以及执行结果，所以我们需要将这些数据持久化，<code>Spring Batch</code> 为我们提供了不同的实现，例如基于 <code>JDBC</code> 的实现或是单纯基于内存的实现，一般来讲推荐将数据持久化到数据库，保证任务状态的可靠性。</li></ul><h2 id="构建一个-Spring-Batch-任务"><a href="#构建一个-Spring-Batch-任务" class="headerlink" title="构建一个 Spring Batch 任务"></a>构建一个 Spring Batch 任务</h2><hr><p>要构建一个 <code>Spring Batch</code> 任务，我们需要由外而内地去分解问题，例如我想构建一个 <code>Job</code>，首先我需要分析它应该由几个 <code>Step</code> 组成，每一个 <code>Step</code> 分别承载什么逻辑。<code>Spring Batch</code> 支持使用 <code>Java Bean Configuration</code> 的方式构建任务，以代码为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableBatchProcessing</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchDemoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolTaskExecutor</span> batchTaskExecutor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">JobBuilderFactory</span> jobBuilderFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StepBuilderFactory</span> stepBuilderFactory<span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Job</span> <span class="token function">parallelJob</span><span class="token punctuation">(</span><span class="token class-name">Step</span> demoSecondStep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> jobBuilderFactory                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"parallelJob"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>demoSecondStep<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Step</span> <span class="token function">demoSecondStep</span><span class="token punctuation">(</span><span class="token class-name">DemoInputItemReader</span> demoInputItemReader<span class="token punctuation">,</span>                               <span class="token class-name">DemoInputOutputItemProcessor</span> demoInputOutputItemProcessor<span class="token punctuation">,</span>                               <span class="token class-name">EasyExcelItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoOutput</span><span class="token punctuation">></span></span> easyExcelItemWriter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stepBuilderFactory                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"demoSecondStep"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoInput</span><span class="token punctuation">,</span> <span class="token class-name">DemoOutput</span><span class="token punctuation">></span></span><span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">reader</span><span class="token punctuation">(</span>demoInputItemReader<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">processor</span><span class="token punctuation">(</span>demoInputOutputItemProcessor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span>easyExcelItemWriter<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">taskExecutor</span><span class="token punctuation">(</span>batchTaskExecutor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">throttleLimit</span><span class="token punctuation">(</span>batchTaskExecutor<span class="token punctuation">.</span><span class="token function">getMaxPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@StepScope</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DemoInputItemReader</span> <span class="token function">demoInputItemReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DemoInputItemReader</span> demoInputItemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoInputItemReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demoInputItemReader<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"demoInputItemReader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demoInputItemReader<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demoInputItemReader<span class="token punctuation">.</span><span class="token function">setTotalPage</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> demoInputItemReader<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@StepScope</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DemoInputOutputItemProcessor</span> <span class="token function">demoInputOutputItemProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DemoInputOutputItemProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@StepScope</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">EasyExcelItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoOutput</span><span class="token punctuation">></span></span> <span class="token function">easyExcelItemWriter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;jobParameters['writePath']&#125;"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> writePath<span class="token punctuation">,</span>                                                               <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;jobParameters['template']&#125;"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> template<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">EasyExcelItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoOutput</span><span class="token punctuation">></span></span> easyExcelItemWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EasyExcelItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        easyExcelItemWriter<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>writePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        easyExcelItemWriter<span class="token punctuation">.</span><span class="token function">setTargetClz</span><span class="token punctuation">(</span><span class="token class-name">DemoOutput</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        easyExcelItemWriter<span class="token punctuation">.</span><span class="token function">setMaxSheetLines</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> easyExcelItemWriter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我需要构建一个 <code>Job</code> 名为 <code>parallelJob</code>，它只有一个 <code>Step</code> 组成名为 <code>demoSecondStep</code>，所以首先需要构建这个 <code>Step</code> 子任务。</li><li>把这个 <code>Step</code> 的 <code>chunk</code> 设定为 <code>500</code>，这里的 <code>chunk</code> 意为数据块的大小，在程序设计中，数据的块状驱动是一种很重要的思想，例如当我们想把一组数据写入磁盘时，我们总是更倾向于先将数据写入某个 <code>buffer</code> 缓冲区，缓冲区积累一部分数据后再进行一次刷盘操作，这样的效率往往是更高的，这个缓冲区的大小就相当于这里的 <code>chunk</code>，至于 <code>chunk</code> 设定为多少合适取决于我们的系统情况，一般来讲当一次写出操作比较消耗资源时，我们倾向于将 <code>chunk</code> 设定得大一些，尽可能减少一些写入的执行次数，但是 <code>chunk</code> 设定得过大也意味着降低内存利用率，整体来讲要根据情况综合考虑。</li><li>在这个例子中 <code>demoSecondStep</code> 由 <code>DemoInputItemReader</code>，<code>DemoInputOutputItemProcessor</code>，<code>EasyExcelItemWriter</code> 三部分组成，数据从 <code>reader</code> 中读取成功后，会立刻进入 <code>processor</code> 中间处理，之后放入缓冲区，直到 <code>chunk</code> 被写满后进行一次 <code>writer</code> 操作。</li><li><code>Step</code> 支持多线程并发执行，在构建 <code>Step</code> 可以设定一个 <code>TaskExecutor</code> 类型的执行器，在这里我将 <code>ThreadPoolTaskExecutor</code> 基于线程池实现的执行器传入后，意味着整个 <code>Step</code> 过程会交给线程池执行，一般来说如果 <code>Step</code> 中具有大量的 <code>IO</code> 密集型操作，同时服务器的配置是多核 <code>CPU</code>，那么并发带来的提升是极其显著。不过不得不提的是并发意味着我们需要保证 <code>reader</code>，<code>processor</code>，<code>writer</code> 这些组件必须是线程安全的，这给我们的代码设计带来更大的复杂性，在决定是否使用并发时我们需要根据其必要性，投入产出比等因素多方位考量。</li><li><code>StepScope</code> 注解将 <code>reader</code>，<code>processor</code>，<code>writer</code> 的 <code>bean</code> 生命周期与 <code>Step</code> 捆绑在一起，这样的作用域可以让我们注入 <code>Job</code> 或 <code>Step</code> 上下文中的参数，同时也有助于提高资源利用率，因为在一个 <code>Step</code> 开始时相关的 <code>bean</code> 才会被实例化。</li></ul><h2 id="结合-EasyExcel-扩展-Spring-Batch"><a href="#结合-EasyExcel-扩展-Spring-Batch" class="headerlink" title="结合 EasyExcel 扩展 Spring Batch"></a>结合 EasyExcel 扩展 Spring Batch</h2><hr><p>在数据的批处理需求中，针对文件的读取写入往往尤为普遍，在我工作的实际场景中也是如此，因此以 <code>Excel</code> 文件的读写为例，我针对 <code>Spring Batch</code> 中的 <code>ItemReader</code> 和 <code>ItemWriter</code> 做了相应扩展，其中对于 <code>Excel</code> 文件的读写操作基于 <a href="https://www.yuque.com/easyexcel">EasyExcel</a> 提供的 <code>API</code>，这个例子可以展示 <code>Spring Batch</code> 如何帮助我们方便地构建批处理任务，同时通过自定义相应的组件，我们可以高度定制个性化的业务任务，达到代码的高度扩展性及复用性。</p><h3 id="自定义-ItemReader-之-EasyExcelItemReader"><a href="#自定义-ItemReader-之-EasyExcelItemReader" class="headerlink" title="自定义 ItemReader 之 EasyExcelItemReader"></a>自定义 ItemReader 之 EasyExcelItemReader</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">priv<span class="token punctuation">.</span>just<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>batch<span class="token punctuation">.</span>reader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">ExcelReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>read<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span></span><span class="token class-name">ReadSheet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>batch<span class="token punctuation">.</span>item<span class="token punctuation">.</span></span><span class="token class-name">ItemReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">DisposableBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadSafe</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span><span class="token punctuation">;</span><span class="token comment">/** * EasyExcel 扩展 Spring Batch &#123;@link ItemReader&#125; * 支持多线程并发读取 * 支持读取 excel 文件中的多个 sheet * 支持根据偏移量 &#123;@link #sheetIndexes&#125; 或名称 &#123;@link #sheetNames&#125; 过滤 sheet * @param &lt;T> 目标读取类型 * @author Ethan Zhang           */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ThreadSafe</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EasyExcelItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">ItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Resource</span> resource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> targetClz<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">EasyExcelItemReaderListener</span> listener<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> buffer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ExcelReader</span> reader<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> finished<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> linesReaded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sheetIndexes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sheetNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> sheetNum<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>finished <span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        linesReaded<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> <span class="token string">"The resource must be set!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>targetClz<span class="token punctuation">,</span> <span class="token string">"The target class must be set!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>bufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EasyExcelItemReaderListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetClz<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReadSheet</span><span class="token punctuation">></span></span> readSheets <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">excelExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheetList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>sheetIndexes<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>sheetNames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            readSheets <span class="token operator">=</span> readSheets<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>readSheet <span class="token operator">-></span> sheetIndexes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>readSheet<span class="token punctuation">.</span><span class="token function">getSheetNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token operator">||</span> sheetNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>readSheet<span class="token punctuation">.</span><span class="token function">getSheetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>readSheets<span class="token punctuation">,</span> <span class="token string">"The resource file must have at least 1 sheet!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sheetNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>readSheets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>readSheets<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            reader<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">EasyExcelItemReaderListener</span> <span class="token keyword">extends</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sheetNum<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                finished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"EasyExcelItemReaderListener execute error!"</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            finished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>resource</code> 代表所读取的资源，这里利用了 <code>Spring</code> 对资源的抽象。</li><li><code>targetClz</code> 资源读取后转换成的 <code>Java Bean</code> 类型。</li><li><code>listener</code> 是 <code>EasyExcel</code> 中异步读取 <code>excel</code> 的监听器。</li><li><code>buffer</code> 阻塞式队列，数据读取后先写入这个缓冲区。</li><li><code>bufferSize</code> 数据缓冲区大小限制，主要为了避免 <code>OOM</code>。</li><li><code>reader</code> 是 <code>EasyExcel</code> 中的 <code>excel</code> 读取对象。</li><li><code>finished</code> 标示本次读取是否完成，在 <code>excel</code> 中最后一行数据被读取成功后将其置为 <code>true</code>。</li><li><code>linesReaded</code> 用于实时记录当前被读取的行数。</li><li><code>sheetIndexes</code> 根据偏移量过滤需要被读取的 <code>sheet</code>，默认读取文件中所有 <code>sheet</code>。</li><li><code>sheetNames</code> 根据 <code>sheet</code> 名称过滤需要被读取的 <code>sheet</code>。</li><li><code>sheetNum</code> 倒计数器，被递减为 <code>0</code> 后表示所有 <code>sheet</code> 读取完毕。</li></ul><p>在 <code>EasyExcelItemReader</code> 的初始化过程中，表示一个 <code>Step</code> 已经开始执行，此时需要初始化所有读取 <code>excel</code> 所需要的资源，并且执行 <code>EasyExcel#read</code> 方法开始读取数据，此时被读取的数据会通过 <code>EasyExcelItemReaderListener</code> 被暂存到 <code>buffer</code> 缓冲区中，若 <code>EasyExcelItemReader#read</code> 方法被 <code>Spring Batch</code> 框架调用，此尝试从缓冲区中获取数据，若读取较慢，则阻塞等待最多一分钟。<code>BlockingQueue</code> 类型的缓冲区将 <code>EasyExcel</code>的读取过程和 <code>Spring Batch</code> 的读取过程隔离开来，同时保证了 <code>Spring Batch</code> 使用并发读取时线程安全。</p><h3 id="自定义-ItemWriter-之-EasyExcelItemWriter"><a href="#自定义-ItemWriter-之-EasyExcelItemWriter" class="headerlink" title="自定义 ItemWriter 之 EasyExcelItemWriter"></a>自定义 ItemWriter 之 EasyExcelItemWriter</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">priv<span class="token punctuation">.</span>just<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>batch<span class="token punctuation">.</span>writer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">ExcelWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>write<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span></span><span class="token class-name">WriteSheet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>batch<span class="token punctuation">.</span>item<span class="token punctuation">.</span></span><span class="token class-name">ItemWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">DisposableBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReference</span><span class="token punctuation">;</span><span class="token comment">/** * EasyExcel 扩展 Spring Batch &#123;@link ItemWriter&#125; * 支持三种写入模式 * 常规 &#123;@link WriteMode#NORMAL&#125; * 模块 &#123;@link WriteMode#TEMPLATE&#125; * 填充 &#123;@link WriteMode#FILL&#125; * 常规模式下支持数据分片写入多个工作表 &#123;@link #sheets&#125; * 每个工作表最多写入行数 &#123;@link #maxSheetLines&#125; * 一个工作表写满后 &#123;@link #ensureSheetSize()&#125; 自动扩容 * @param &lt;T> 目标写入类型 * @author Ethan Zhang */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ThreadSafe</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EasyExcelItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Resource</span> resource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ExcelWriter</span> writer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WriteSheet</span><span class="token punctuation">></span></span> sheets<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> curSheetIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> linesWritten <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sheetNamePrefix <span class="token operator">=</span> <span class="token string">"sheet-"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSheetLines <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> targetClz<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Resource</span> template<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">WriteMode</span> writeMode <span class="token operator">=</span> <span class="token class-name">WriteMode</span><span class="token punctuation">.</span>NORMAL<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WriteSheet</span><span class="token punctuation">></span></span> curSheet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>writeMode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> NORMAL<span class="token operator">:</span>                <span class="token function">ensureSheetSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> curSheet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TEMPLATE<span class="token operator">:</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> curSheet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FILL<span class="token operator">:</span>                writer<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> curSheet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        linesWritten<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> <span class="token string">"The resource must be set!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>targetClz<span class="token punctuation">,</span> <span class="token string">"The target class must be set!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>writeMode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> NORMAL<span class="token operator">:</span>                writer <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetClz<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TEMPLATE<span class="token operator">:</span>            <span class="token keyword">case</span> FILL<span class="token operator">:</span>                <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token string">"The template must be set!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"The template file must exists!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetClz<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sheets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureSheetSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            writer<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureSheetSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>linesWritten<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> sheets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> maxSheetLines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>linesWritten<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> sheets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> maxSheetLines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    curSheetIndex<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">WriteSheet</span> writeSheet <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">writerSheet</span><span class="token punctuation">(</span>curSheetIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheetNamePrefix <span class="token operator">+</span> curSheetIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sheets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>writeSheet<span class="token punctuation">)</span><span class="token punctuation">;</span>                    curSheet<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sheets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curSheetIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">WriteMode</span> <span class="token punctuation">&#123;</span>        NORMAL<span class="token punctuation">,</span>        TEMPLATE<span class="token punctuation">,</span>        FILL    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>resource</code> 目标写入资源，一般为系统稳健资源。</li><li><code>writer</code> 是 <code>EasyExcel</code> 中的 <code>excel</code> 写入对象。</li><li><code>sheets</code> 被写入的 <code>sheet</code> 集合，根据需要自动扩容。</li><li><code>curSheetIndex</code> 当前被写入的 <code>sheet</code> 偏移量，逐步递增。</li><li><code>linesWritten</code> 记录当前已被写入的行数。</li><li><code>sheetNamePrefix</code> 自动生成的 <code>sheet</code> 名称前缀，可自定义。</li><li><code>maxSheetLines</code> 限制单个 <code>sheet</code> 所能容纳的最大行数，写入时超出该行数则自动切换 <code>sheet</code>，实现 <code>sheet</code> 的自动扩容。</li><li><code>targetClz</code> 代表写入资源的目标 <code>Java Bean</code> 类型。</li><li><code>writeMode</code> 同于标示 <code>EasyExcel</code> 所支持的三种写入模式，分别为常规模式，模板模式以及填充模式。</li><li><code>template</code> 模板资源，在模板模式以及填充模式下必须提供，一般为 <code>classpath</code> 下的文件资源。</li></ul><p>在 <code>EasyExcelItemWriter</code> 的初始化过程中，首先根据写入模式的不同分别校验并初始化所需要的资源，随后调用 <code>ensureSheetSize</code> 方法进行首次扩容，创建第一个 <code>sheet</code>，在 <code>Spring Batch</code> 的写入过程中，根据写入模式的不同分别调用 <code>EasyExcel</code> 中相应的 <code>API</code>，由于 <code>ExcelWriter#write</code> 方法本身不是线程安全的，暂时采用加锁同步写入的方式，考虑到文件的写入可能需要保持数据的顺序性，且数据的写入过程往往并不是一次数据批处理任务中的性能瓶颈所在，还是建议使用同步方式保持问题的简单化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Batch </tag>
            
            <tag> EasyExcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 与 Spring 生态的融合</title>
      <link href="/2020/10/20/rocketmq-yu-spring-sheng-tai-de-rong-he/"/>
      <url>/2020/10/20/rocketmq-yu-spring-sheng-tai-de-rong-he/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em><code>RocketMQ</code> 作为阿里开源的一款优秀的消息中间件，已经成为很多互联网公司构建其分布式系统的重要组成部分。同时 <code>RocketMQ</code> 成为了 <code>Apache</code> 开源项目，意味着该项目越来越受到开源社区的关注，也意味着更多的人加入到对 <code>RocketMQ</code> 的使用和完善中，相信将其作为企业消息中间件的技术选型不失为一个明智的选择。对于大部分的 <code>Java</code> 系统而言， <code>Spring</code> 已经成为 <code>Java</code> 开发的既定标准，那么我们必然面临如何在 <code>Spring</code> 生态中集成 <code>RocketMQ</code> 客户端，好在官方已经为我们提供了这样的实现，有时候我们也需要在工作中”造轮子”，如何将我们造的”轮子”优雅地集成到 <code>Spring</code> 生态中，这是我们需要思考的问题，或许我们可以在其中得到一种启发。</em></p></blockquote><span id="more"></span><h2 id="RocketMQTemplate-模板客户端"><a href="#RocketMQTemplate-模板客户端" class="headerlink" title="RocketMQTemplate 模板客户端"></a>RocketMQTemplate 模板客户端</h2><hr><p>在 <code>Spring</code> 与第三方框架适配的案例中，我时常可以看到 <code>XXXTemplate</code> 这样的封装，例如 <code>RedisTemplate</code>，<code>JdbcTemplate</code> 等，这样的模板类有利于集成核心的API，为开发者提供了很好的便宜性，显然 <code>RocketMQ</code> 在集成 <code>Spring</code> 的过程中也参考了这样的设计。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">RocketMQProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">MQAdmin</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"rocketmq"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"name-server"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">MessageConverterConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ListenerContainerConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ExtProducerResetConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RocketMQTransactionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">MessageConverterConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">RocketMQTransactionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RocketMQAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">"destroy"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> ROCKETMQ_TEMPLATE_DEFAULT_GLOBAL_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RocketMQTemplate</span> <span class="token function">rocketMQTemplate</span><span class="token punctuation">(</span><span class="token class-name">DefaultMQProducer</span> mqProducer<span class="token punctuation">,</span>        <span class="token class-name">RocketMQMessageConverter</span> rocketMQMessageConverter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RocketMQTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span>mqProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">setMessageConverter</span><span class="token punctuation">(</span>rocketMQMessageConverter<span class="token punctuation">.</span><span class="token function">getMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RocketMQTemplate</code> 主要由两部分组成，<code>DefaultMQProducer</code> 和 <code>MessageConverter</code>，作为生产者的核心API，必然需要由消息生产者和消息转换器两者组成，其中 <code>DefaultMQProducer</code> 作为 <code>Apache RocketMQ</code> 所提供的默认生产者API，封装了大部分我们所需要的消息发送方式，包含同步发送，异步发送，单向消息发送，事务消息发送等常用操作。只不过 <code>RocketMQ</code> 的 <code>Message</code> 结果有其设计上的特殊性，<code>Spring</code> 需要对其进行进一步的抽象，例如将 <code>RocketMQ</code> 中的 <code>topic</code> 和 <code>tag</code> 抽象为 <code>destination</code>，将 <code>org.apache.rocketmq.common.message.Message</code> 抽象为 <code>org.springframework.messaging.Message</code>，<code>Spring</code> 增加这样一层转换的目的主要是尽量不与某一消息中间件的实现强耦合，保持设计上的独立性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">RocketMQProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">MQAdmin</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"rocketmq"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"name-server"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">JacksonFallbackConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ListenerContainerConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">JacksonAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RocketMQAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"rocketmq"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name-server"</span><span class="token punctuation">,</span> <span class="token string">"producer.group"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DefaultMQProducer</span> <span class="token function">defaultMQProducer</span><span class="token punctuation">(</span><span class="token class-name">RocketMQProperties</span> rocketMQProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RocketMQProperties<span class="token punctuation">.</span>Producer</span> producerConfig <span class="token operator">=</span> rocketMQProperties<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> nameServer <span class="token operator">=</span> rocketMQProperties<span class="token punctuation">.</span><span class="token function">getNameServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> groupName <span class="token operator">=</span> producerConfig<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>nameServer<span class="token punctuation">,</span> <span class="token string">"[rocketmq.name-server] must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>groupName<span class="token punctuation">,</span> <span class="token string">"[rocketmq.producer.group] must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultMQProducer</span> producer<span class="token punctuation">;</span>        <span class="token class-name">String</span> ak <span class="token operator">=</span> rocketMQProperties<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccessKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sk <span class="token operator">=</span> rocketMQProperties<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ak<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span>groupName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AclClientRPCHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionCredentials</span><span class="token punctuation">(</span>ak<span class="token punctuation">,</span> sk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                rocketMQProperties<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnableMsgTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                rocketMQProperties<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCustomizedTraceTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            producer<span class="token punctuation">.</span><span class="token function">setVipChannelEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span>groupName<span class="token punctuation">,</span> rocketMQProperties<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnableMsgTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                rocketMQProperties<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCustomizedTraceTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span>nameServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setSendMsgTimeout</span><span class="token punctuation">(</span>producerConfig<span class="token punctuation">.</span><span class="token function">getSendMessageTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendFailed</span><span class="token punctuation">(</span>producerConfig<span class="token punctuation">.</span><span class="token function">getRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span>producerConfig<span class="token punctuation">.</span><span class="token function">getRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setMaxMessageSize</span><span class="token punctuation">(</span>producerConfig<span class="token punctuation">.</span><span class="token function">getMaxMessageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setCompressMsgBodyOverHowmuch</span><span class="token punctuation">(</span>producerConfig<span class="token punctuation">.</span><span class="token function">getCompressMessageBodyThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setRetryAnotherBrokerWhenNotStoreOK</span><span class="token punctuation">(</span>producerConfig<span class="token punctuation">.</span><span class="token function">isRetryNextServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> producer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Spring Boot</code> 会自动帮助我们构建 <code>DefaultMQProducer</code> 生产者，但是我们可以需求定义一些初始化参数：</p><ul><li><code>group</code> 生产者组</li><li><code>sendMessageTimeout</code> 生产者发送消息超时阈值，默认为 3s</li><li><code>compressMessageBodyThreshold</code> 消息压缩阈值，默认为 4K</li><li><code>retryTimesWhenSendFailed</code> 同步发送模式下失败重试次数，默认为 2</li><li><code>retryTimesWhenSendAsyncFailed</code> 异步发送模式下失败重试次数，默认为 2，重试意味着在网络波动情况下可能发生重复消息发送，因此 <code>RocketMQ</code> 要求我们在消费者一方保证逻辑的幂等性</li><li><code>retryNextServer</code> 在消息发送失败时是否尝试切换 <code>broker</code> 进行发送，默认为 false</li><li><code>maxMessageSize</code> 消息体大小限制，默认为 4M</li></ul><h2 id="RocketMQListener-消息监听器"><a href="#RocketMQListener-消息监听器" class="headerlink" title="RocketMQListener 消息监听器"></a>RocketMQListener 消息监听器</h2><hr><p><code>RocketMQ</code> 的消息消费端支持推模式与拉模式，当然推拉模式的本质是相同的，实际上 <code>RocketMQ</code> 在底层只实现了拉模式，而推模式是拉模式的一种封装，主要通过在消费端开启一个线程循环拉取消息。一般来讲 PUSH 模式更为常用，因为在 PUSH 模式下消息会被自动拉取，同时消息负载均衡等机制已经在源码内实现，而 PULL 模式开发者手动指定 <code>MessageQueue</code> 进行消费，实现难度更大。另外从 <code>Spring</code> 官方所推崇的 <code>Event Driven</code> 事件驱动型架构风格来看，PUSH 模式也更加符合这一风格，所以在 <code>Spring</code> 层面上主要将 <code>RocketMQ</code> 中的 <code>Consumer</code> 抽象为 <code>RocketMQListener</code> ，这种监听器的设计显然是对 PUSH 模式的实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListenerContainerConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">,</span> <span class="token class-name">SmartInitializingSingleton</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> beans <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RocketMQMessageListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>beans<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            beans<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">registerContainer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerContainer</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">RocketMQListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>clazz <span class="token operator">+</span> <span class="token string">" is not instance of "</span> <span class="token operator">+</span> <span class="token class-name">RocketMQListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">RocketMQMessageListener</span> annotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RocketMQMessageListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">validate</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> containerBeanName <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s_%s"</span><span class="token punctuation">,</span> <span class="token class-name">DefaultRocketMQListenerContainer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GenericApplicationContext</span> genericApplicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">GenericApplicationContext</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">;</span>        genericApplicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>containerBeanName<span class="token punctuation">,</span> <span class="token class-name">DefaultRocketMQListenerContainer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">createRocketMQListenerContainer</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> annotation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultRocketMQListenerContainer</span> container <span class="token operator">=</span> genericApplicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>containerBeanName<span class="token punctuation">,</span>            <span class="token class-name">DefaultRocketMQListenerContainer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>container<span class="token punctuation">.</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                container<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Started container failed. &#123;&#125;"</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Register the listener to container, listenerBeanName:&#123;&#125;, containerBeanName:&#123;&#125;"</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> containerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">DefaultRocketMQListenerContainer</span> <span class="token function">createRocketMQListenerContainer</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">RocketMQMessageListener</span> annotation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DefaultRocketMQListenerContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRocketMQListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setNameServer</span><span class="token punctuation">(</span>rocketMQProperties<span class="token punctuation">.</span><span class="token function">getNameServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setConsumerGroup</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">consumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setRocketMQMessageListener</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setRocketMQListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RocketMQListener</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> container<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这里利用 <code>SmartInitializingSingleton</code> 这个 <code>Spring</code> 容器的生命周期回调来实现消息监听器的自动装配，这个回调触发在当所有单例 <code>bean</code> 被初始化完成后，一般来说如果我们需要对 <code>bean</code> 进行个性化的后置处理，可以利用这个回调或是 <code>BeanPostProcessor</code>。在这里通过 <code>ListableBeanFactory#getBeansWithAnnotation</code> 获取到所有被 <code>RocketMQMessageListener</code> 的 <code>bean</code>，构建 <code>DefaultRocketMQListenerContainer</code> 对象，并将其注册为 <code>Spring Bean</code>。每一个 <code>DefaultRocketMQListenerContainer</code> 都对应一个 <code>RocketMQ</code> 中的 <code>Consumer</code>。<code>RocketMQ</code> 支持不同的消费者配置，<code>RocketMQMessageListener</code> 注解可以帮助我们传递这些配置项：</p><ul><li><code>consumerGroup</code> 消费者组</li><li><code>topic</code> 订阅主题</li><li><code>selectorType</code> 消息过滤方式，默认根据 <code>TAG</code> 过滤</li><li><code>selectorExpression</code> 消息过滤表达式，例如 <code>tag1 || tag2 || tag3</code></li><li><code>consumeMode</code> 消费模式，默认为并发模式（允许多个线程同时消费）</li><li><code>messageModel</code> 消息通信模式，默认为集群模式（同个消息只发送给消费组中某一消费者）</li><li><code>consumeThreadMax</code> 允许的最大消费线程数，默认为 64</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultRocketMQListenerContainer</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span>    <span class="token class-name">RocketMQListenerContainer</span><span class="token punctuation">,</span> <span class="token class-name">SmartLifecycle</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultMessageListenerConcurrently</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListenerConcurrently</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">></span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> messageExt <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"received msg: &#123;&#125;"</span><span class="token punctuation">,</span> messageExt<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    rocketMQListener<span class="token punctuation">.</span><span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token function">doConvertMessage</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"consume &#123;&#125; cost: &#123;&#125; ms"</span><span class="token punctuation">,</span> messageExt<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"consume message failed. messageExt:&#123;&#125;"</span><span class="token punctuation">,</span> messageExt<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    context<span class="token punctuation">.</span><span class="token function">setDelayLevelWhenNextConsume</span><span class="token punctuation">(</span>delayLevelWhenNextConsume<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>RECONSUME_LATER<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultMessageListenerOrderly</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListenerOrderly</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeOrderlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">></span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeOrderlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> messageExt <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"received msg: &#123;&#125;"</span><span class="token punctuation">,</span> messageExt<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    rocketMQListener<span class="token punctuation">.</span><span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token function">doConvertMessage</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"consume &#123;&#125; cost: &#123;&#125; ms"</span><span class="token punctuation">,</span> messageExt<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"consume message failed. messageExt:&#123;&#125;"</span><span class="token punctuation">,</span> messageExt<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    context<span class="token punctuation">.</span><span class="token function">setSuspendCurrentQueueTimeMillis</span><span class="token punctuation">(</span>suspendCurrentQueueTimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token class-name">ConsumeOrderlyStatus</span><span class="token punctuation">.</span>SUSPEND_CURRENT_QUEUE_A_MOMENT<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeOrderlyStatus</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>DefaultRocketMQListenerContainer</code> 的内部可以看到我们所定义的 <code>RocketMQListener</code> 最终会根据消费类型被转换为 <code>RocketMQ</code> 中的 <code>MessageListenerConcurrently</code>（并发消费）或是 <code>MessageListenerOrderly</code>（顺序消费），<code>RocketMQ</code> 的顺序消息支持全局顺序或分区顺序，一般来讲出于性能的考虑不建议使用全局顺序，如果业务上不对消费顺序作要求，那么使用并发消费的模式可以最大程序上保证消息的吞吐量。当消费者在 PUSH 模式下接受到消息时，消费被委派给 <code>RocketMQListener</code>  处理，这时候我们的业务逻辑被触发。</p><h2 id="RocketMQ-事务消息"><a href="#RocketMQ-事务消息" class="headerlink" title="RocketMQ 事务消息"></a>RocketMQ 事务消息</h2><hr><p>对于 <code>RocketMQ</code> 中每一个 <code>TransactionMQProducer</code> 事务消息生产者而言，都需要一个 <code>TransactionListener</code> 事务监听器与之对应，在我们调用生产者 API 发送事务消息时，源码中会校验该生产者是否持有监听器，不存在则直接抛出异常。<code>RocketMQ</code> 的事务消息为了保证消息的可靠性发送，参考了分布式事务中的 <code>2PC</code> 解决方案。生产者首先发送消息，相当于第一阶段的提交，<code>RocketMQ</code> 把这一类消息成为 <code>HalfMessage</code> 半消息，<code>HalfMessage</code> 对于消费者是不可见的，<code>RocketMQ</code> 会把半消息暂存到内部的某一 <code>topic</code> 中，根据生产者本地事务的执行结果决定提交或回滚半消息。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagestransactional-message.png" alt="RocketMQ 事务消息"></p><p>在生产者本地事务执行完成后，生产者需要向 <code>RocketMQ Server</code> 反馈一个执行结果，<code>Commit</code> 或是 <code>Rollback</code>，由于之前已经成功发送了 <code>Half Message</code>，这时的发送也大概率是成功了，但依然不排除因为网络波动等因素导致执行结果提交失败。因此为了保证事务消息发送的可靠性，<code>RocketMQ</code> 增加了一种状态回查机制，在服务端定时扫描状态未知的 <code>Half Message</code>，向 <code>Producer</code> 发起回查，作为一种补偿机制。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RocketMQLocalTransactionListener</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RocketMQLocalTransactionState</span> <span class="token function">executeLocalTransaction</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RocketMQLocalTransactionState</span> <span class="token function">checkLocalTransaction</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>Spring Boot</code> 开发者通过实现 <code>RocketMQLocalTransactionListener</code> 接口编写本地事务及回查逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RocketMQTransactionAnnotationProcessor</span>    <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>nonProcessedClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass <span class="token operator">=</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">RocketMQTransactionListener</span> listener <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> <span class="token class-name">RocketMQTransactionListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>nonProcessedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// for quick search</span>                log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No @RocketMQTransactionListener annotations found on bean type: &#123;&#125;"</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">processTransactionListenerAnnotation</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to process annotation "</span> <span class="token operator">+</span> listener<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span><span class="token string">"Failed to process annotation "</span> <span class="token operator">+</span> listener<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processTransactionListenerAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RocketMQTransactionListener</span> listener<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transactionHandlerRegistry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">"Bad usage of @RocketMQTransactionListener, "</span> <span class="token operator">+</span>                <span class="token string">"the class must work with RocketMQTemplate"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">RocketMQLocalTransactionListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">"Bad usage of @RocketMQTransactionListener, "</span> <span class="token operator">+</span>                <span class="token string">"the class must implement interface RocketMQLocalTransactionListener"</span><span class="token punctuation">,</span>                <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">TransactionHandler</span> transactionHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionHandler<span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getAutowireCapableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionHandler<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>listener<span class="token punctuation">.</span><span class="token function">txProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionHandler<span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionHandler<span class="token punctuation">.</span><span class="token function">setListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RocketMQLocalTransactionListener</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionHandler<span class="token punctuation">.</span><span class="token function">setCheckExecutor</span><span class="token punctuation">(</span>listener<span class="token punctuation">.</span><span class="token function">corePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">maximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                listener<span class="token punctuation">.</span><span class="token function">keepAliveTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">blockingQueueSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RPCHook</span> rpcHook <span class="token operator">=</span> <span class="token class-name">RocketMQUtil</span><span class="token punctuation">.</span><span class="token function">getRPCHookByAkSk</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            listener<span class="token punctuation">.</span><span class="token function">accessKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">secretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>rpcHook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            transactionHandler<span class="token punctuation">.</span><span class="token function">setRpcHook</span><span class="token punctuation">(</span>rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Access-key or secret-key not configure in "</span> <span class="token operator">+</span> listener <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        transactionHandlerRegistry<span class="token punctuation">.</span><span class="token function">registerTransactionHandler</span><span class="token punctuation">(</span>transactionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RocketMQLocalTransactionListener</code> 是如何别转换为 <code>RocketMQ</code> 中的 <code>TransactionListener</code> 呢？这里就利用 <code>Spring</code> 容器中关键性的 <code>Bean</code> 生命周期回调 <code>BeanPostProcessor</code>，上下文中每一个被容器初始化的 <code>bean</code>，都会回调 <code>postProcessAfterInitialization</code> 方法，此方法在 <code>bean</code> 的后置处理中为开发者提供了拓展机会，如果我们需要扩展增强 <code>Spring</code> 的相关机制，<code>BeanPostProcessor</code> 是我们重点要考虑的一种实现方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Circuit Breaker 服务容错</title>
      <link href="/2020/09/26/spring-cloud-circuit-breaker-fu-wu-rong-cuo/"/>
      <url>/2020/09/26/spring-cloud-circuit-breaker-fu-wu-rong-cuo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考 <code>Spring Cloud</code> 官方文档的描述，<code>Spring Cloud Circuit Breaker</code> 提供了不同断路器实现的抽象，它为开发者选用不同的断路器实现提供了标准化的 API，在实际的项目应用场景中，我们可以基于 <code>Spring Cloud Circuit Breaker</code> 采取低耦合的方式将第三方断路器集成到项目中，而不直接强依赖于某一种实现，我们知道，通过制定标准，而不强制实现，是 <code>Spring</code> 一以贯之的核心编程思想。目前官方提供四种标准实现，分别是 <code>Netfix Hystrix</code>，<code>Resilience4J</code>，<code>Sentinel</code>，以及 <code>Spring Retry</code>，其中 <code>Netfix Hystrix</code> 属于 <code>Spring Cloud</code> 最早支持的一种容错方案，目前已经进入维护模式，此处不再推荐使用，目前官方优先推荐的是 <code>Resilience4J</code> 方案，它借鉴了 <code>Hystrix</code> 的设计思想，同时充分应用了 <code>Java8</code> 函数式编程的 API，由于它只有很少的外部依赖，是一个非常轻量化的容错框架，而且其中很多函数式思想的运用非常值得我们去感悟。另外，<code>Sentinel</code> 作为阿里微服务开源生态的一部分，<code>Spring Cloud Alibaba</code> 对其做了较为完善的适配，在某些功能性上相比于其他方案甚至更加健壮，在方案选型时也是非常值得我们去考虑的。</p></blockquote><span id="more"></span><h2 id="Spring-Cloud-层面的标准化"><a href="#Spring-Cloud-层面的标准化" class="headerlink" title="Spring Cloud 层面的标准化"></a>Spring Cloud 层面的标准化</h2><hr><p>由于各种容错框架的实现机制迥异，但是对于诸如熔断降级这样的功能，在抽象层面上是有迹可循的，不同的框架之间也有思想上的共性，所以 <code>Spring Cloud</code> 为我们提供了标准化的 <code>API</code>，并且对一些主流框架进行自动化适配，以降低开发者的学习成本。</p><h3 id="CircuitBreaker"><a href="#CircuitBreaker" class="headerlink" title="CircuitBreaker"></a>CircuitBreaker</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CircuitBreaker</span> <span class="token punctuation">&#123;</span><span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> toRun<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span>toRun<span class="token punctuation">,</span> throwable <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoFallbackAvailableException</span><span class="token punctuation">(</span><span class="token string">"No fallback available."</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> toRun<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> fallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CircuitBreaker</code> 接口是 <code>Spring Cloud</code> 为我们定义的断路器抽象，它负责去执行一个 <code>Supplier</code> 函数，这里为什么将我们的业务行为抽象为一个 <code>Supplier</code> 呢？因为假设把我们的业务行为当做一个线程，那么它无非是 <code>Runnable</code> 或是 <code>Callable</code>，在函数式编程的层面上，这两种形态是可以用 <code>Supplier</code> 去涵盖的，<code>Runnable</code> 相当于一个 <code>Supplier&lt;Void&gt;</code>，而 <code>Callable&lt;T&gt;</code> 和 <code>Supplier&lt;T&gt;</code> 在函数式表达上是等价的。所以这里 <code>Spring</code> 采用了这样一种抽象的设计，代表对业务行为进行一种包装，嵌入容错方面的逻辑，而 <code>fallback</code> 这个 <code>Function&lt;Throwable, T&gt;</code> 参数代表一种降级策略。</p><h3 id="CircuitBreakerFactory"><a href="#CircuitBreakerFactory" class="headerlink" title="CircuitBreakerFactory"></a>CircuitBreakerFactory</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CircuitBreakerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span>CONF<span class="token punctuation">,</span> CONFB <span class="token keyword">extends</span> <span class="token class-name">ConfigBuilder</span><span class="token punctuation">&lt;</span>CONF<span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token keyword">extends</span> <span class="token class-name">AbstractCircuitBreakerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span>CONF<span class="token punctuation">,</span> CONFB<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">CircuitBreaker</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CircuitBreakerFactory</code> 作为 <code>CircuitBreaker</code> 的工厂类，是对于断路器创建过程的抽象。可以看到这里 <code>Spring Cloud</code> 将断路器的配置类完全泛型化，这是因为不同的容错框架在这方面设计迥异， <code>Spring</code> 很难在一个抽象层面上提供一个绝对的标准，不如将其彻底抽象化，为不同的实现方式提供更高的自由度。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Slf4j</span><span class="token class-name">RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserClient</span> userClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">CircuitBreakerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> circuitBreakerFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getUserInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">UserInfo</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> circuitBreakerFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"getUserInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> userClient<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> throwable <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getUserInfo timeout!"</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"addUserInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">addUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserInfo</span> userInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userClient<span class="token punctuation">.</span><span class="token function">addUserInfo</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用层面上我们可以看到只需要依赖注入 <code>CircuitBreakerFactory</code> 对象后调用其 <code>create</code> 方法即可包装某一业务方法，使其具有容错效果，同时也可以指定 <code>fallback</code> 逻辑，使用上还是非常灵活的。单纯从调用的代码我们无法判断底层使用的容错框架以及其实现方式，这是 <code>Spring Cloud</code> 的抽象性带来的，使我们脱离具体的底层实现，将注意力集中到业务逻辑中。</p><h2 id="Resilience4j-对-Spring-Cloud-的适配"><a href="#Resilience4j-对-Spring-Cloud-的适配" class="headerlink" title="Resilience4j 对 Spring Cloud 的适配"></a>Resilience4j 对 Spring Cloud 的适配</h2><hr><p><code>Resilience4j</code> 本身是一个轻量化但是功能又颇为全面的容错框架，<code>spring-cloud-starter-circuitbreaker-resilience4j</code> 作为 <code>Spring Cloud</code> 对于 <code>Resilience4j</code> 自动适配包，并没有全面化地使用其全部模块功能，目前只引用了 <code>resilience4j-circuitbreader</code>，<code>resilience4j-timelimiter</code> 两个模块，所以本文主要讨论这两个模块如何在 <code>Spring Cloud</code> 中发挥作用。</p><h3 id="Resilience4JCircuitBreaker"><a href="#Resilience4JCircuitBreaker" class="headerlink" title="Resilience4JCircuitBreaker"></a>Resilience4JCircuitBreaker</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resilience4JCircuitBreaker</span> <span class="token keyword">implements</span> <span class="token class-name">CircuitBreaker</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> toRun<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> fallback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">TimeLimiter</span> timeLimiter <span class="token operator">=</span> <span class="token class-name">TimeLimiter</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>timeLimiterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futureSupplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>toRun<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Callable</span> restrictedCall <span class="token operator">=</span> <span class="token class-name">TimeLimiter</span><span class="token punctuation">.</span><span class="token function">decorateFutureSupplier</span><span class="token punctuation">(</span>timeLimiter<span class="token punctuation">,</span>futureSupplier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>resilience4j<span class="token punctuation">.</span>circuitbreaker<span class="token punctuation">.</span></span>CircuitBreaker</span> defaultCircuitBreaker <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">circuitBreaker</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> circuitBreakerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>circuitBreakerCustomizer<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>customizer <span class="token operator">-></span> customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>defaultCircuitBreaker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> callable <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>resilience4j<span class="token punctuation">.</span>circuitbreaker<span class="token punctuation">.</span></span>CircuitBreaker</span><span class="token punctuation">.</span><span class="token function">decorateCallable</span><span class="token punctuation">(</span>defaultCircuitBreaker<span class="token punctuation">,</span> restrictedCall<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>callable<span class="token operator">::</span><span class="token function">call</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span>fallback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Resilience4JCircuitBreaker</code> 中包含了 <code>Resilience4j</code> 与 <code>Spring Cloud Circuit Breaker</code> 集成的关键性代码，个人认为这是一种对 <code>Decorator Pattern</code> 的灵活运用。首先 <code>Supplier&lt;T&gt;</code> 是我们传入的某一业务行为，如果想嵌入服务熔断降级的相关逻辑，那么必须去包装这个 <code>Supplier&lt;T&gt;</code>，这里主要包含了几个关键过程：</p><ul><li> 将 <code>Supplier&lt;T&gt;</code> 业务抽象包装成为 <code>Supplier&lt;Future&lt;T&gt;&gt;</code>，将其交给 <code>ExecutorService</code> 线程池执行，当前线程池是允许开发者去自定义的。</li><li> 通过 <code>TimeLimiter</code> 包装业务行为，嵌入超时熔断逻辑，转换为一个 <code>Callable</code></li><li> 从缓存中获取 <code>io.github.resilience4j.circuitbreaker.CircuitBreaker</code> 实例，若缓存中不存在，则进行首次创建。</li><li> 对 <code>CircuitBreaker</code> 的自定义处理。</li><li> 使用 <code>CircuitBreaker</code> 对 <code>Callable</code> 进一步包装，嵌入断路器逻辑，产生新的 <code>Callable</code>.</li><li> 执行最终的 <code>Callable</code>，其中已经嵌入了 <code>Resilience4j</code> 容错相关的逻辑。</li></ul><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesspring-cloud-circuit-breaker.png" alt="spring cloud circuit breaker resilience4j"></p><h3 id="TimeLimiter-快速失败"><a href="#TimeLimiter-快速失败" class="headerlink" title="TimeLimiter 快速失败"></a>TimeLimiter 快速失败</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeLimiterImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TimeLimiter</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">F</span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">decorateFutureSupplier</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">F</span><span class="token punctuation">></span></span> futureSupplier<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> futureSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">T</span> result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getTimeLimiterConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimeoutDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getTimeLimiterConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shouldCancelRunningFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    future<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Throwable</span> t <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token punctuation">)</span> t<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据上文我们知道针对一个业务行为，<code>TimeLimiter</code> 会首先对其进行包装，由于处于内层包装，所以 <code>TimeLimiter</code> 的逻辑是最先被执行，可以看到它的代码是比较简单，只是利用 <code>Java</code> 中 <code>Future</code> 对象的等待超时机制判定业务调用是否成功。若等待阈值时间后目前函数依然没有返回，则判定为该次调用失败。这种快速失败的机制在微服务架构中具有重要意义，因为当服务间的 RPC 调用非常普遍时，若系统中的某个服务产生故障，必然导致大量请求阻塞等待在某一链路节点上，此时可能会导致服务端大量线程资源被占用，而线程是宝贵的资源，我们无法忍受线程被某一用户线程长时间占用，所以我们需要设定一个时间阈值，对于超出阈值的调用，快速抛出异常或执行 <code>fallback</code> 备用方案，这是一种取舍，牺牲单一功能的可用性，避免整个系统产生全面性的崩溃，毕竟在一个复杂系统中，总有一些功能在极端情况下是可舍的。</p><h3 id="CircuitBreakerStateMachine-状态机"><a href="#CircuitBreakerStateMachine-状态机" class="headerlink" title="CircuitBreakerStateMachine 状态机"></a>CircuitBreakerStateMachine 状态机</h3><p>当一个断路器处于闭合状态时，调用链路是畅通的，处于断开状态时，任何调用请求都是被拒绝的，也就是说对于一个断路器而言，它拥有几种状态，在不同的环境下相互切换，同时在某一状态下它的性质是不同的。对于这样的一种应用场景，我们首先想到的设计模式就是 <code>State Pattern</code> 状态机模式，<code>Resilience4j</code> 中的 <code>CircuitBreakerStateMachine</code> 正是采用了状态机的设计思想。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CircuitBreakerStateMachine</span> <span class="token keyword">implements</span> <span class="token class-name">CircuitBreaker</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CircuitBreakerState</span><span class="token punctuation">></span></span> stateReference<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CircuitBreakerConfig</span> circuitBreakerConfig<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CircuitBreakerEventProcessor</span> eventProcessor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Clock</span> clock<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SchedulerFactory</span> schedulerFactory<span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的核心状态就是 <code>stateReference</code>，它是一个 <code>CircuitBreakerState</code> 类型，之所以用 <code>AtomicReference</code> 包装，是为了状态切换时的线程安全。当一个 <code>CircuitBreakerStateMachine</code> 被初始化时，状态机的初始状态为 <code>ClosedState</code> 闭合状态，在此状态下，任何请求都是被放行的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">interface</span> <span class="token class-name">CircuitBreakerState</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">tryAcquirePermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">acquirePermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">releasePermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token keyword">long</span> duration<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> durationUnit<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token keyword">long</span> duration<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> durationUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CircuitBreaker<span class="token punctuation">.</span>State</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CircuitBreakerMetrics</span> <span class="token function">getMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Should the CircuitBreaker in this state publish events     * @return a boolean signaling if the events should be published     */</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">shouldPublishEvents</span><span class="token punctuation">(</span><span class="token class-name">CircuitBreakerEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>forcePublish <span class="token operator">||</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>allowPublish<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CircuitBreakerState</code> 作为状态抽象了状态机在不同状态下的行为，例如在 <code>ClosedState</code> 下 <code>tryAcquirePermission</code> 是永远成功的，意味着业务调用不会被拦截，如果业务调用成功则触发 <code>onSuccess</code> 回调，若业务调用抛出异常则触发 <code>onError</code> 回调。业务请求的调用结果决定了数据指标的统计，而在 <code>onSuccess</code> 和 <code>onError</code> 中会对数据指标进行分析，判定当前的状态是否需要进行切换。其中主要包含几个决定因素：</p><ul><li><code>failureRateThreshold</code> 失败调用率（默认阈值50%）</li><li><code>slowCallRateThreshold</code> 慢请求比率（默认阈值100%）</li><li><code>waitDurationInOpenState</code> 断路器断开状态维持时间（默认60s）</li><li><code>permittedNumberOfCallsInHalfOpenState</code> 断路器在半开状态下允许的请求数量（默认为10）</li><li><code>slowCallDurationThreshold</code> 慢请求判断阈值（默认为60s）</li></ul><p>这些因素决定了断路器在各个状态下如何切换，以维持系统的容错性：</p><ul><li> 在 <code>ClosedState</code> 如果失败调用率或慢请求比率被突破，那么状态机会被切换至 <code>OpenState</code> 此时意味着断路器断开，触发熔断。</li><li>在 <code>OpenState</code> 状态下，在一定时期内 <code>tryAcquirePermission</code> 是必然失败的，因为此时断路器断开，所有的业务调用都会被拒绝，这个时间范围 <code>retryAfterWaitDuration</code> 是可配置的（默认为60s），这里通过一个 <code>Java8</code> 引入的 <code>Clock</code> 对象记录时间的流逝，当断开状态维持超过所配置的时间范围时，状态机被切换至 <code>HalfOpenState</code> 状态。</li><li>在 <code>HalfOpenState</code> 状态下，一定数量的业务调用是被允许的，因为在断路器半开状态，需要取一部分调用样本作为分析依赖，以判定断路器是否应该重新进入闭合状态，在微服务状态下，某些服务有可能是在网络环境不稳定的情况下导致访问失败，或者服务在短暂宕机后又及时恢复了，那么断路器也应该及时地在服务恢复正常状态后放开对该服务的访问。所以对于在 <code>HalfOpenState</code> 下被放行的请求来说，它们也需要被列入数据指标的统计，这一点与 <code>ClosedState</code> 状态下是相同的，若统计结果超出相应的阈值，那么进入 <code>OpenState</code>，反之进入 <code>ClosedState</code>，总而言之 <code>HalfOpenState</code> 属于一种中间状态，它使断路器变得更具弹性。</li></ul><h3 id="Fallback-降级策略"><a href="#Fallback-降级策略" class="headerlink" title="Fallback 降级策略"></a>Fallback 降级策略</h3><p>在 <code>Spring Cloud Circuit Breaker</code> 中 <code>fallback</code> 策略被定义为 <code>Function&lt;Throwable, T&gt;</code> 类型，它表示一个 <code>Throwable</code> 异常到目前类型 <code>T</code> 的转换函数。这个转换过程由开发者自行定义，有时当一个服务不可用时，我们或许可以从某一个缓存层中获取临时性数据以维持业务的正常运转，或是访问一个备用的服务，又或是记录异常信息，而直接舍弃局部性的功能，这都取决于具体的业务场景，总之 <code>Spring Cloud</code> 为我们提供了足够的灵活性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Resilience4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观 Spring Cloud OpenFeign 设计有感</title>
      <link href="/2020/09/15/guan-spring-cloud-openfeign-she-ji-you-gan/"/>
      <url>/2020/09/15/guan-spring-cloud-openfeign-she-ji-you-gan/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em><code>Spring Cloud Feign</code> 是 <code>Spring</code> 官方提供的一个轻量级 <code>web</code> 声明式客户端，它的设计初衷在于使我们更容易地编写 <code>web</code> 客户端程序，它将一个 <code>web</code> 请求所需要的信息抽象为基于接口和注解的元信息，使我们从复杂的编码中解放出来，而真实的请求交互过程依赖于 <code>Feign</code> 底层的代理模式进行处理。同时 <code>Feign</code> 提供了强大的扩展性，例如我们可以自定义 <code>Contract</code>，<code>Encoder</code>，<code>Decoder</code> 等组件，个性化请求数据的编解码过程，也可以选用不同的 <code>HTTP</code> 客户端解决方案作为 <code>Feign</code> 底层的支撑。甚至我们可以将自定义的网络交互协议集成到 <code>Feign</code> 之中，<code>Feign</code> 本身更像是一种代理框架，几乎不决定性能表现，它的性能表现取决于底层使用的网络交互技术，偶然看到网上有人将 <code>Feign</code> 与诸如 <code>Dubbo</code> 这样的 <code>RPC</code> 框架进行性能对比，本质上这是两种定位的技术，理论上 <code>Feign</code> 可以将任何网络交互方案集成进来，两者并不是对立或排斥的。</em></p></blockquote><span id="more"></span><h3 id="FeignClient-自动装配"><a href="#FeignClient-自动装配" class="headerlink" title="FeignClient 自动装配"></a>FeignClient 自动装配</h3><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getUserInfo"</span><span class="token punctuation">)</span>    <span class="token class-name">UserInfo</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"addUserInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">long</span> <span class="token function">addUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserInfo</span> userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>FeignClient</code> 是基于接口形式定义的，那么我们自定义的 <code>FeignClient</code> 是如何被装配到 <code>IOC</code> 容器中的呢？首先我们需要引入注解 <code>EnableFeignClients</code> 并指定 <code>basePackages</code>告诉 <code>Spring</code> 容器到目标 <code>package</code> 下扫描我们定义的所有 <code>FeignClient</code> 并将其装配为 <code>Spring Bean</code>，其后我们才可以通过 <code>DI</code> 依赖注入的方式使用代理对象进行网络交互。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FeignClientsRegistrar</span><span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">registerDefaultConfiguration</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerFeignClients</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从 <code>FeignClientsRegistrar</code> 我们可以看到 <code>FeignClient</code> 被装配的核心逻辑，首先被装配的是 <code>Feign</code> 相关的默认配置，跟踪代码我们可以知道 <code>Feign</code> 配置最后会被注册一个 <code>FeignClientSpecification</code> 类型的 <code>Bean</code>，这个 <code>Bean</code> 持有了 <code>FeignClient</code> 所有的配置信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FeignClientsRegistrar</span><span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerFeignClients</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> basePackage <span class="token operator">:</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">></span></span> candidateComponents <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span> candidateComponent <span class="token operator">:</span> candidateComponents<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>candidateComponent <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// verify annotated class is an interface</span><span class="token class-name">AnnotatedBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> candidateComponent<span class="token punctuation">;</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"@FeignClient can only be specified on an interface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> attributes <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">FeignClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token function">getClientName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerClientConfiguration</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> name<span class="token punctuation">,</span>attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"configuration"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerFeignClient</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了 <code>Feign</code> 的全局配置以外，我们也可以针对单个 <code>FeignClient</code> 进行个性化配置，设置其 <code>contextId</code> 用于配置隔离，同样的，个性化配置最终也需要注册为 <code>FeignClientSpecification</code> 类型的 <code>Bean</code>，被 <code>IOC</code> 容器管理起来，以待后续使用。另外最核心的就是通过 <code>registerFeignClient</code> 方法构建 <code>FeignClient</code> 代理对象，在这个例子中也就是构建 <code>UserClient</code> 的代理对象。跟踪代码可以发现代理对象的创建流程是通过 <code>FeignClientFactoryBean</code> 进行控制的。跟踪 <code>FeignClientFactoryBean#getTarget</code> 方法，我们可以大致归纳其创建过程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FeignClientFactoryBean</span><span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">FeignContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">FeignContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Feign<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token function">feign</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">+=</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token function">loadBalance</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> context<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HardCodedTarget</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Client</span> client <span class="token operator">=</span> <span class="token function">getOptional</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">Client</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token class-name">Targeter</span> targeter <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">Targeter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> targeter<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> builder<span class="token punctuation">,</span> context<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HardCodedTarget</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>从 <code>Spring</code> 上下文中获取 <code>FeignContext</code> 对象，<code>FeignContext</code> 中持有了全局以及所有 <code>FeignClient</code> 的 <code>Configuration</code>，它是整个应用的 <code>Feign</code> 配置上下文。</li><li>通过 <code>Feign.Builder</code> 构建者模式进行配置填充，这里面要注意各层级配置的优先级。</li><li>构建请求地址，若没有采取硬编码的方式指定 <code>url</code>，则尝试使用负载均衡的方式构建客户端，一般需要依赖于 <code>Ribbon</code> 这样的组件，此处暂且不表。</li><li>调用 <code>Feign#build</code> 创建目前类型（此处为 <code>UserClient</code>）的代理对象。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectiveFeign</span> <span class="token keyword">extends</span> <span class="token class-name">Feign</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MethodHandler</span><span class="token punctuation">></span></span> nameToHandler <span class="token operator">=</span> targetToHandlersByName<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">MethodHandler</span><span class="token punctuation">></span></span> methodToHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">MethodHandler</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DefaultMethodHandler</span><span class="token punctuation">></span></span> defaultMethodHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DefaultMethodHandler</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DefaultMethodHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMethodHandler</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultMethodHandlers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        methodToHandler<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        methodToHandler<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> nameToHandler<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Feign</span><span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> methodToHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">T</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DefaultMethodHandler</span> defaultMethodHandler <span class="token operator">:</span> defaultMethodHandlers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      defaultMethodHandler<span class="token punctuation">.</span><span class="token function">bindTo</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>Feign</code> 底层是基于 <code>JDK</code> 动态代理创建针对目标接口的代理对象，这里面主要涉及到几个关键流程：</p><ul><li>根据 <code>Contract</code> 规则解析 <code>FeignClient</code> 中的各个 <code>method</code> 获取方法元信息。之所以我们可以在 <code>FeignClient</code> 中使用 <code>Spring MVC</code> 的注解，因为 <code>SpringMvcContract</code> 可以成功识别这些注解将之转化为有意义的元信息，由于广大开发者对于 <code>Spring MVC</code> 比较熟悉，因此 <code>Spring</code> 提供了这样的 <code>Contract</code> 帮助我们降低学习成本。</li><li>构建一个 <code>Map&lt;Method, MethodHandler&gt;</code>，其中维护了目标方法到方法执行器的映射关系，当我们调用目标方法时，最终请求会被委托给对应的 <code>MethodHandler</code> 执行。</li><li>此时代理对象创建完成，<code>FeignInvocationHandler</code> 的 <code>invoke</code> 逻辑被成功嵌入到了我们的代理对象中。</li></ul><h3 id="FeignClient-执行流程"><a href="#FeignClient-执行流程" class="headerlink" title="FeignClient 执行流程"></a>FeignClient 执行流程</h3><hr><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesfeign-client.png" alt="FeignClient执行流程"></p><h4 id="Encoder-编码器"><a href="#Encoder-编码器" class="headerlink" title="Encoder 编码器"></a>Encoder 编码器</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignClientsConfiguration</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"org.springframework.data.domain.Pageable"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Encoder</span> <span class="token function">feignEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringEncoder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Encoder</code> 是对于我们业务上 <code>JavaBean</code> 转化为底层请求信息这一过程的抽象，默认的实现是 <code>SpringEncoder</code> ，主要是依赖于 <code>Spring</code> 底层的 <code>HttpMessageConverter</code> 进行实现。这个过程的主要目的是将我们的 <code>JavaBean</code> 转化为可进行网络传输的字节流。以 <code>UserClient#addUserInfo</code> 这个接口为例，我们传入的 <code>JavaBean</code> 类型为 <code>UserInfo.class</code>，这时候 <code>SpringEncoder</code> 会帮助我们匹配到 <code>MappingJackson2HttpMessageConverter</code> 转换器，最终将 <code>UserInfo</code> 对象转换为字节流暂存到 <code>RequestTemplate</code> 对象中进行 <code>Feign</code> 后续流程。</p><h4 id="RequestInterceptor-拦截器"><a href="#RequestInterceptor-拦截器" class="headerlink" title="RequestInterceptor 拦截器"></a>RequestInterceptor 拦截器</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RequestInterceptor</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * Called for every request. Add data using methods on the supplied &#123;@link RequestTemplate&#125;.   */</span>  <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们想在 <code>Encoder</code> 编码阶段之后对 <code>RequestTemplate</code> 做进一步的修改，<code>RequestInterceptor</code> 为我们提供了这样的可能。同样 <code>RequestInterceptor</code> 也支持不同的作用域，可以作用于全局，也可以只作用于单个 <code>FeignClient</code> ，我们只需要将自定义的 <code>RequestInterceptor</code> 注册为 <code>Spring Bean</code> 即可生效。</p><h4 id="Client-请求客户端"><a href="#Client-请求客户端" class="headerlink" title="Client 请求客户端"></a>Client 请求客户端</h4><p>在本文的引言中我们提到过 <code>Feign</code> 本身不决定服务间交互的性能表现，它的的性能主要取决于底层依赖的请求客户端，也就是 <code>Client</code> 所代表的网络请求发送的抽象过程。在这一点上 <code>Feign</code> 为我们提供了足够的扩展空间，理论上整个 <code>Client</code> 请求过程我们都可以通过自定义编码完成。<code>Client</code> 的默认实现是基于 <code>JDK</code> 中的 <code>HttpURLConnection</code> ，这是一种较为简洁的兜底解决方案，在性能以及资源利用上表现不佳，在实际生产场景中我们可以考虑使用优秀的开源客户端对其进行替代，例如 <code>Apache HttpClient</code>，<code>OkHttp</code> 等。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">Feign</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">FeignClientProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">FeignHttpClientProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DefaultGzipDecoderConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">OkHttpClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"com.netflix.loadbalancer.ILoadBalancer"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">okhttp3<span class="token punctuation">.</span></span>OkHttpClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span><span class="token string">"feign.okhttp.enabled"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OkHttpFeignConfiguration</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">Client</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Client</span> <span class="token function">feignClient</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">okhttp3<span class="token punctuation">.</span></span>OkHttpClient</span> client<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以集成 <code>OkHttp</code> 为例，当我们项目的 <code>classpath</code> 下存在 <code>OkHttp</code> 依赖时，<code>FeignAutoConfiguration</code> 中的条件化装配会自动为我们装配 <code>OkHttpClient</code> 客户端，当使用 <code>FeignClientFactoryBean</code> 去初始化我们的 <code>FeignClient</code> 时，自然能够从上下文中获取到 <code>OkHttpClient</code> 实例作用到 <code>FeignClient</code> 的构建过程中，这个 <code>Client</code> 切换过程对于上层的调用是无感知的，这完全得益于 <code>Feign</code> 的抽象能力，使我们从复杂的底层网络请求中解放出来。</p><h4 id="Decoder-解码器"><a href="#Decoder-解码器" class="headerlink" title="Decoder 解码器"></a>Decoder 解码器</h4><p>当客户端受到服务端响应的 <code>response</code> 对象，我们需要把它转化为有意义的 <code>JavaBean</code>，也就是我们目标方法的 <code>returnType</code>，<code>Decoder</code> 的默认实现为 <code>OptionalDecoder</code>，它是 <code>SpringDecoder</code> 的一种包装，此处主要是为了兼容 <code>Java8</code> 引入的 <code>Optional</code> 类型，最终底层也是基于 <code>HttpMessageConverter</code> 的类型转换，此处不再赘述。</p><h3 id="Feign-负载均衡"><a href="#Feign-负载均衡" class="headerlink" title="Feign 负载均衡"></a>Feign 负载均衡</h3><hr><p><code>Feign</code> 默认采用 <code>Ribbon</code> 作为负载均衡实现，当我们的项目 <code>classpath</code> 下存在 <code>spring-cloud-starter-netflix-ribbon</code> 依赖时，配置类 <code>FeignRibbonClientAutoConfiguration</code> 会被自动装配。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">ILoadBalancer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Feign</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"spring.cloud.loadbalancer.ribbon.enabled"</span><span class="token punctuation">,</span>matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span><span class="token class-name">FeignAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">FeignHttpClientProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Order is important here, last should be the default, first should be optional</span><span class="token comment">// see</span><span class="token comment">// https://github.com/spring-cloud/spring-cloud-netflix/issues/2086#issuecomment-316281653</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">HttpClientFeignLoadBalancedConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">OkHttpFeignLoadBalancedConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">DefaultFeignLoadBalancedConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignRibbonClientAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到有三个配置类被依次引入，分别是 <code>DefaultFeignLoadBalancedConfiguration</code>，<code>OkHttpFeignLoadBalancedConfiguration</code>，<code>HttpClientFeignLoadBalancedConfiguration</code>，分别对应 <code>Feign</code> 支持的三种 <code>HTTP</code> 实现：<code>HttpUrlConnection</code>，<code>OkHttp</code> 以及 <code>Apache HttpClient</code>，这里有一个典型的 <code>Decorator Pattern</code> （装饰器模式）使用场景，试想一下 <code>Client</code> 的实现可以是不同的，如果分别对每一种客户端类型进行负载均衡的定制化处理，那么代码复杂度是可想而知，如果负载均衡的逻辑是统一的，那么我们完全可以把这部分逻辑抽象为一个装饰器，用它去增强不同类型的 <code>Client</code>，而被装饰后的 <code>Client</code> 依赖只是一个 <code>Client</code> 对象，那么对于调用方来说这一层装饰是无感知的，这无疑是一种良好的选择。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">OkHttpClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span><span class="token string">"feign.okhttp.enabled"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">OkHttpFeignConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">OkHttpFeignLoadBalancedConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">Client</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Client</span> <span class="token function">feignClient</span><span class="token punctuation">(</span><span class="token class-name">CachingSpringLoadBalancerFactory</span> cachingFactory<span class="token punctuation">,</span><span class="token class-name">SpringClientFactory</span> clientFactory<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">okhttp3<span class="token punctuation">.</span></span>OkHttpClient</span> okHttpClient<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">OkHttpClient</span> delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadBalancerFeignClient</span><span class="token punctuation">(</span>delegate<span class="token punctuation">,</span> cachingFactory<span class="token punctuation">,</span> clientFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 <code>OkHttp</code> 为例，<code>LoadBalancerFeignClient</code> 作为负载均衡装饰器，它本身是 <code>Client</code> 的实现，用 <code>LoadBalancerFeignClient</code> 装饰 <code>OkHttpClient</code> 后，请求首先会被 <code>LoadBalancerFeignClient</code> 处理，嵌入负载均衡逻辑后，负载均衡客户端会自动帮助我们选取服务实例，再将请求委托给真正的 <code>OkHttpClient</code> 执行，之后的逻辑与常规请求无异，有一个注意点，引入负载均衡机制后 <code>FeignClient</code> 的 <code>url</code> 不能特殊指定，因为请求地址需要交给客户端自动选取，如果我们特殊指定那么也就失去了负载均衡的意义，这时候我们可以采用配置项  <code>$&#123;name&#125;.ribbon.listOfServers</code> 通过硬编码的方式指定某服务的实例列表，或者集成 <code>DiscoveryClient</code> 服务注册中心进行动态获取，此处暂且不表。</p><h3 id="第三方服务注册中心如何适应-Feign-的负载均衡"><a href="#第三方服务注册中心如何适应-Feign-的负载均衡" class="headerlink" title="第三方服务注册中心如何适应 Feign 的负载均衡"></a>第三方服务注册中心如何适应 Feign 的负载均衡</h3><hr><p>上文我们谈到 <code>Feign</code> 的负载均衡是基于 <code>Ribbon</code> 实现的，所以负载均衡是 <code>Ribbon</code> 层面解决的问题，所以这个问题不妨说是第三方服务注册中心如何适应 <code>Ribbon</code> 的负载均衡，目前市面上有很多服务注册中心的解决方案，例如 <code>Eureka</code>，<code>Zookeeper</code>，<code>Nacos</code> 等，由于 <code>Spring</code> 生态强大的融合能力，这些不同的实现方案往往都会选择拥抱 <code>Spring Cloud</code> 定义的标准规范，<code>Spring Cloud</code> 更多地是去定义标准化接口，它并不强制开发者使用哪一种实现，而且随着 <code>Spring Cloud</code> 生态的蓬勃发展，这一指导思想能更为明显被我们感知到。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token comment">// Order is important here, last should be the default, first should be optional</span><span class="token comment">// see</span><span class="token comment">// https://github.com/spring-cloud/spring-cloud-netflix/issues/2086#issuecomment-316281653</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">HttpClientConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">OkHttpRibbonConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">RestClientRibbonConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">HttpClientRibbonConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonClientConfiguration</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ServerList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">></span></span> <span class="token function">ribbonServerList</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">isSet</span><span class="token punctuation">(</span><span class="token class-name">ServerList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ServerList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ConfigurationBasedServerList</span> serverList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBasedServerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serverList<span class="token punctuation">.</span><span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> serverList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于负载均衡来说，当一个系统引入服务注册中心后，无非是服务实例列表的来源发生了改变，原来是采用硬编码方式配置的，现在需要从服务注册中心动态获取，在 <code>Ribbon</code> 的规范中 <code>ServerList</code> 接口代表服务实例列表的抽象，它的默认实现是 <code>ConfigurationBasedServerList</code>，顾名思义，默认是通过 <code>$&#123;name&#125;.ribbon.listOfServers</code> 配置源获取。毫无疑问，当我们引入服务注册中心，需要覆盖这一实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnRibbonNacos</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosRibbonClientConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> <span class="token class-name">ServerList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">ribbonServerList</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> config<span class="token punctuation">,</span><span class="token class-name">NacosDiscoveryProperties</span> nacosDiscoveryProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">NacosServerList</span> serverList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NacosServerList</span><span class="token punctuation">(</span>nacosDiscoveryProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>serverList<span class="token punctuation">.</span><span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> serverList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> <span class="token class-name">NacosServerIntrospector</span> <span class="token function">nacosServerIntrospector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServerIntrospector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处以 <code>Spring Cloud Alibaba Nacos</code> 为例，当我们引入相关依赖后，<code>NacosRibbonClientConfiguration</code> 配置类被自动装配，<code>NacosServerList</code> 作为 <code>Ribbon</code> 规范中 <code>ServerList</code> 的实现，覆盖了原有的默认实现。将获取服务实例列表的请求委托给 <code>Nacos</code> 客户端，并定时从 <code>Nacos</code> 服务端获取服务列表维护到本地缓存中，这是一个典型的 <code>Spring Cloud Alibaba</code> 扩展 <code>Spring Cloud</code> 标准的范例，本文不再详细论述。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><hr><p>从 <code>Spring Cloud OpenFeign</code> 的整体架构设计中我们还是可以得到很多启发，如何从一个复杂逻辑中抽象化标准流程，并提供关键的扩展点，这也是设计模式中所谓的开闭原则，对于抽象化的骨架，尽可能地去封闭，如果我们是一个框架的设计者，我们并不期待框架的使用者去修改我们所认定的骨架标准。同时我们应该在框架的关键节点提供丰富的扩展点，这是一个优秀框架灵活性和弹性的保障，引导使用者去实现这些扩展点以满足他们的个性化需求，当然扩展点的实现不是必须的，框架本身也应该提供兜底方案。这是一个愿景，如何规划好每一行代码去实现这个愿景，这是我们学习开源框架和阅读源码的根本目的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Spring Cloud Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锁之浅见</title>
      <link href="/2020/08/17/suo-zhi-qian-jian/"/>
      <url>/2020/08/17/suo-zhi-qian-jian/</url>
      
        <content type="html"><![CDATA[<p><strong>在计算机科学中，锁是在执行多线程时用于强行限制资源访问的同步机制，即用于在并发控制中保证对互斥要求的满足。一般的锁是建议锁（advisory lock），每个线程在访问对应资源前都需获取锁的信息，再根据信息决定是否可以访问。若访问对应信息，锁的状态会改变为锁定，因此其他线程此时不会访问该资源，当资源结束后，会恢复锁的状态，允许其他线程的访问。有些系统有强制锁（mandatory lock），若有未授权的线程想要访问锁定的数据，在访问时就会产生异常。</strong></p><blockquote><p>以上是维基百科中对于锁的定义，在现代化软件尤其是互联网行业中，系统的吞吐量成为技术衡量的重要指标，因为并发编程的广泛使用几乎是必然的。当我们享受着并发编程带来的更高硬件利用率以及更好用户体验的同时，针对共享资源的访问控制成为一个绕不开的话题。有时候我们甚至需要牺牲一定的并发性来保障数据的一致性和可靠性，一个优秀的系统不是偏执的，而是在多种因素之间取得一种完美的平衡，如何优雅地给程序加锁需要我们去探索和思考。</p></blockquote><span id="more"></span><h2 id="Java-中-ReentrantLock-设计带来的启发"><a href="#Java-中-ReentrantLock-设计带来的启发" class="headerlink" title="Java 中 ReentrantLock 设计带来的启发"></a>Java 中 ReentrantLock 设计带来的启发</h2><hr><p>我们知道 <code>ReentrantLock</code> 是 <code>JDK</code> 在代码层面实现的锁，而它是通过扩展大名鼎鼎的 <code>AQS</code> 实现的，众所周知 <code>AQS</code> 是 <code>Java</code> 为我们提供的一种同步器抽象，本身利用了 <code>Template Method Pattern</code> 的设计思想，通过扩展 <code>AQS</code> 我们可以方便地实现自定义的同步器，而锁本身也只是一种较为特殊的同步器而已，<code>Java</code> 中例如 <code>CountDownLatch</code>，<code>CyclicBarrier</code>，<code>Semaphore</code> 这样的经典同步器都不外乎是通过扩展 <code>AQS</code> 实现，为我们在并发编程中提供了强大的功能支持。通过探究 <code>ReentrantLock</code> 的源码设计我们可以感悟到锁的本质是什么？因为分布锁虽然在网络通信上更具有其复杂性，在作为锁本身的逻辑上是殊途同归的。</p><h3 id="锁的试探性获取"><a href="#锁的试探性获取" class="headerlink" title="锁的试探性获取"></a>锁的试探性获取</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>ReentrantLock#tryLock()</code> 方法代表对锁的试探性获取，这个操作是非阻塞的，直接返回获取结果。<code>ReentrantLock</code> 内部有个两个同步器的实现，分别为 <code>NonfairSync</code> 和 <code>FairSync</code>，它们都继承于 <code>Sync</code>，而 <code>tryLock</code> 最终调用的是同一个方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为对于这个操作，并没有公平锁和非公平锁之分。如果当前 <code>AQS</code> 中的 <code>state</code> 为 0，则通过 <code>compareAndSetState</code> 尝试竞争锁即可。否则判断锁是否被当前线程持有，若当前线程已持有该锁则对 <code>state</code> 累加操作，这是对可重入性的支持，否则本次竞争失败。</p><h3 id="锁的阻塞式获取（有限等待）"><a href="#锁的阻塞式获取（有限等待）" class="headerlink" title="锁的阻塞式获取（有限等待）"></a>锁的阻塞式获取（有限等待）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在实际的业务中如果某项资源具有竞争性，而我们的业务操作又是必须完成的，那么我们往往会倾向于阻塞式地去获取锁，如果锁已被其他线程持有，当前线程会进入阻塞状态直到所被它的拥有者释放重新进入竞争。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token function">doAcquireNanos</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟踪代码我们发现首先依然会尝试使用非阻塞式方式去竞争一次锁，若竞争失败，则调用 <code>doAcquireNanos</code> 方法。该方法是在 <code>AQS</code> 中实现的，是加锁的核心逻辑所在。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">doAcquireNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanosTimeout<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            nanosTimeout <span class="token operator">=</span> deadline <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                nanosTimeout <span class="token operator">></span> spinForTimeoutThreshold<span class="token punctuation">)</span>                <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法的主要逻辑如下：</p><ol><li>计算 <code>deadline</code> 最后期限，在循环中判断，一旦当前时间超过最后期限则本次锁竞争失败。</li><li>将当前线程构建为 <code>Node</code> 节点，进行入队操作，并返回该节点。</li><li>取到当前节点的前驱节点，并判断前驱节点是否为链表头节点，若为链表头节点，表示当前线程有资格竞争锁，这很大程度上是为了避免不必要的重试。</li><li>判断 <code>tryAcquire</code> 方法的执行结果，该方法由 <code>AQS</code> 子类实现，这也是公平锁与非公平锁的根本实现差异所在，分别在 <code>NonfairSync</code> 和 <code>FairSync</code> 中有各自实现。两者的主要区别在于公平锁需要判断当前链表头节点之后是否还有线程在竞争锁，因为公平锁需要遵循先到先得的顺序依次获取锁。</li><li>若成功获取锁，则将当前节点设置为头结点，返回。</li><li><code>shouldParkAfterFailedAcquire</code> 方法判断当前线程是否需要被挂起（只要当前节点前已有线程被挂起，则当前线程也需要被挂起），<code>Unsafe#park</code> 挂起线程后等待别唤醒重新竞争锁，或者超出最大等待时间后自动解除挂起状态，重新加入竞争。</li><li>若最终依然没有获取锁，则调用 <code>cancelAcquire</code> 方法，则释放相关资源。</li></ol><h3 id="锁的阻塞式获取（无限等待）"><a href="#锁的阻塞式获取（无限等待）" class="headerlink" title="锁的阻塞式获取（无限等待）"></a>锁的阻塞式获取（无限等待）</h3><p><code>ReentrantLock#lock</code> 方法的逻辑与 <code>ReentrantLock#tryLock(long timeout, TimeUnit unit)</code> 类似，只是前者没有时间限制，会无限期地重试竞争锁，除非当前线程被 <code>interrupt</code> 才会停止，一般来讲此种方式不推荐使用，因为在大部分的业务场景中我们往往会设定一个当前业务所能容忍的最大耗时，长时间地阻塞并没有意义，同时会导致系统中业务竞争该资源时被阻塞，这时候我们更倾向于制造一种快速失败的熔断效应，例如在分布式锁的实现中往往会在中间件设定锁的最大存活时间，避免死锁问题的产生。</p><h2 id="Redisson-中分布式锁实现带来的启发"><a href="#Redisson-中分布式锁实现带来的启发" class="headerlink" title="Redisson 中分布式锁实现带来的启发"></a>Redisson 中分布式锁实现带来的启发</h2><hr><h3 id="锁的获取"><a href="#锁的获取" class="headerlink" title="锁的获取"></a>锁的获取</h3><p><code>Redisson</code> 作为一个优秀的 <code>Redis</code> 开源客户端，它最大的意义在于将各种 <code>Redis</code> 操作抽象为我们所熟悉的 <code>Java</code> 对象，使我们在使用 <code>Redis</code> 的过程中隔离中间件本身的复杂性，就像在进行 <code>Java</code> 原生编程那样自然。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RLock</span> <span class="token function">getLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedissonLock</span><span class="token punctuation">(</span>connectionManager<span class="token punctuation">.</span><span class="token function">getCommandExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显然在分布锁层面上 <code>Redisson</code> 也为我们提供了这样的抽象，我们可以借用 <code>RedissonClient#getLock</code> 获取一个 <code>RedissonLock</code> 对象，其中已经封装了我们需要的加锁解锁等操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">tryLockInnerAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">long</span> threadId<span class="token punctuation">,</span> <span class="token class-name">RedisStrictCommand</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> command<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    internalLockLeaseTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">evalWriteAsync</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LongCodec</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">,</span> command<span class="token punctuation">,</span>            <span class="token string">"if (redis.call('exists', KEYS[1]) == 0) then "</span> <span class="token operator">+</span>                    <span class="token string">"redis.call('hincrby', KEYS[1], ARGV[2], 1); "</span> <span class="token operator">+</span>                    <span class="token string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> <span class="token operator">+</span>                    <span class="token string">"return nil; "</span> <span class="token operator">+</span>                    <span class="token string">"end; "</span> <span class="token operator">+</span>                    <span class="token string">"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then "</span> <span class="token operator">+</span>                    <span class="token string">"redis.call('hincrby', KEYS[1], ARGV[2], 1); "</span> <span class="token operator">+</span>                    <span class="token string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> <span class="token operator">+</span>                    <span class="token string">"return nil; "</span> <span class="token operator">+</span>                    <span class="token string">"end; "</span> <span class="token operator">+</span>                    <span class="token string">"return redis.call('pttl', KEYS[1]);"</span><span class="token punctuation">,</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> internalLockLeaseTime<span class="token punctuation">,</span> <span class="token function">getLockName</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RedissonLock#tryLockInnerAsync</code> 方法是加锁的核心逻辑，<code>Redisson</code> 的操作几乎都是基于 <code>Lua</code> 脚本实现的</p><ol><li>判断以当前锁名称为 key 的缓存是否存在。</li><li>若 key 不存在，则存入一个 Hash 结构，Hash 中的 key 为当前客户端ID + 线程ID，也就是说可以精确标识某一服务中的某一线程，Hash 中的 value 为 1。设置锁的缓存时间，避免客户端宕机死锁。加锁成功直接返回。</li><li>若 key 所对应的 Hash 表已存在，则直接对其中当前线程对应的 value 进行自增操作，并重新设置过期时间，加锁成功返回。</li><li>若加锁失败，则返回当前锁的过期剩余时间。</li></ol><h3 id="锁的等待"><a href="#锁的等待" class="headerlink" title="锁的等待"></a>锁的等待</h3><p>那么 <code>Redisson</code> 是如何实现锁的等待机制的呢？我们知道对于一个成熟的分布式锁设计， 当我们第一次尝试获取锁失败后，在一定时间范围内需要一种重试机制，帮忙我们多次竞争锁。但是这种重试机制该如何设计呢？如果在短时间内密集重试实际是没有意义的，因为此时别的业务线程还未释放该锁，此时的重试行为只是无端增加了对于中间件的访问量，在极端情况下可能造成流量激增，甚至造成中间件服务宕机（本人在实际场景中由于锁设计不当就遇到过此类问题）。也就是我们需要模仿一种类似于 <code>AQS</code> 中那样的 <code>park</code> 机制，当这个锁未被它的持有者释放时，应该挂起其余的竞争者线程，避免无意义的重试，直到该锁被释放时再唤醒它们加入新的竞争。这种行为在单体服务中实现是相对容易的，而在分布式系统中意味着需要服务间的通信，因为当服务A的线程获取到锁时，必须挂起服务B中的线程，这无疑增加了复杂性。那么 <code>Redisson</code> 是怎么做的？它利用了 <code>Redis</code> 中的发布订阅模式。我们可以想象成每一个锁都持有一个 <code>Topic</code> 主题，当一个线程竞争锁失败后，它会成为这个 <code>Topic</code> 的 <code>Subscriber</code> 订阅者，一旦 <code>Topic</code> 的内容被修改为可竞争状态，它便解除挂起状态，重新加入竞争，除非超出最大等待时间解除订阅，返回失败。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedissonLockEntry</span><span class="token punctuation">></span></span> subscribeFuture <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscribeFuture<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscribeFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        subscribeFuture<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">unsubscribe</span><span class="token punctuation">(</span>subscribeFuture<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">acquireFailed</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么我们可以猜测在 <code>Redisson</code> 的解锁的逻辑中必然存在发布消息的逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">unlockInnerAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">evalWriteAsync</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LongCodec</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">,</span> <span class="token class-name">RedisCommands</span><span class="token punctuation">.</span>EVAL_BOOLEAN<span class="token punctuation">,</span>            <span class="token string">"if (redis.call('hexists', KEYS[1], ARGV[3]) == 0) then "</span> <span class="token operator">+</span>                    <span class="token string">"return nil;"</span> <span class="token operator">+</span>                    <span class="token string">"end; "</span> <span class="token operator">+</span>                    <span class="token string">"local counter = redis.call('hincrby', KEYS[1], ARGV[3], -1); "</span> <span class="token operator">+</span>                    <span class="token string">"if (counter > 0) then "</span> <span class="token operator">+</span>                    <span class="token string">"redis.call('pexpire', KEYS[1], ARGV[2]); "</span> <span class="token operator">+</span>                    <span class="token string">"return 0; "</span> <span class="token operator">+</span>                    <span class="token string">"else "</span> <span class="token operator">+</span>                    <span class="token string">"redis.call('del', KEYS[1]); "</span> <span class="token operator">+</span>                    <span class="token string">"redis.call('publish', KEYS[2], ARGV[1]); "</span> <span class="token operator">+</span>                    <span class="token string">"return 1; "</span> <span class="token operator">+</span>                    <span class="token string">"end; "</span> <span class="token operator">+</span>                    <span class="token string">"return nil;"</span><span class="token punctuation">,</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getChannelName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LockPubSub</span><span class="token punctuation">.</span>UNLOCK_MESSAGE<span class="token punctuation">,</span> internalLockLeaseTime<span class="token punctuation">,</span> <span class="token function">getLockName</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>如果 Hash 表中当前线程持有的锁已经不存在，表示锁可能已经过期被自动释放，此时直接返回即可。</li><li>减小 Hash 表中的 value 值，如果之后 value 依然大于0，表示锁依然被持有，重试设置缓存时间后返回。</li><li>如果 value 值已经被减为0，则表示锁已经被完全释放，删除 Hash 表缓存，并发布 Topic 通知。</li></ol><p>另外由于 Hash 表中的 key 值是与线程ID相关的，所以并不会出现A线程误释放B线程锁的情况，对于分布式锁设计来说这也是一个重点所在。</p><h2 id="Redis-分布式锁的简易实现"><a href="#Redis-分布式锁的简易实现" class="headerlink" title="Redis 分布式锁的简易实现"></a>Redis 分布式锁的简易实现</h2><hr><p>在实际的工作中，使用诸如 <code>Redisson</code>，<code>Curator</code> 这样的开源客户端帮助我们实现分布锁往往是较为健壮可靠的，从不重复造轮子的原则出发，这样的基础组件已经经过前人不断的验证，可以帮忙我们构建稳定的系统。但有时基于项目的现实情况，我们需要自己编码，以下是我实现的 <code>Redis</code> 分布式锁简易版本，还有一些细节待完善，仅作记录。</p><h3 id="锁的抽象"><a href="#锁的抽象" class="headerlink" title="锁的抽象"></a>锁的抽象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span><span class="token punctuation">;</span><span class="token comment">/** * 分布式锁 * &#123;@link #tryLock(String)&#125; 尝试获取锁，不阻塞立刻返回 * &#123;@link #tryLock(String, int)&#125; 设定重试次数，重试完获取不到锁则抛出 &#123;@link DistributedLockException&#125; * &#123;@link #tryLock(String, long, TimeUnit)&#125; 在指定时间内不断尝试获取锁，超出时间获取不到则抛出 &#123;@link DistributedLockException&#125; * @author zhangyifan@wshifu.com */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DistributedLock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestId<span class="token punctuation">,</span> <span class="token keyword">int</span> retryCount<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DistributedLockException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retryCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">tryLock</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">AtomicInteger</span> incrementer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>incrementer<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> retryCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DistributedLockException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"acquire distributed lock failed, retried over %s times!"</span><span class="token punctuation">,</span> retryCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryLock</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestId<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DistributedLockException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> deadline <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeUnit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>deadline <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DistributedLockException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"acquire distributed lock failed, retried over %s %s!"</span><span class="token punctuation">,</span> time<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryLock</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis-实现"><a href="#Redis-实现" class="headerlink" title="Redis 实现"></a>Redis 实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>component<span class="token punctuation">.</span></span><span class="token class-name">RedisHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>core<span class="token punctuation">.</span>constant<span class="token punctuation">.</span></span><span class="token class-name">CacheKeyConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 分布式锁 redis 实现 * @author zhangyifan@wshifu.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisLock</span> <span class="token keyword">implements</span> <span class="token class-name">DistributedLock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisHelper</span> redisHelper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> redisKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> expire<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RedisLock</span><span class="token punctuation">(</span><span class="token class-name">RedisHelper</span> redisHelper<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>redisHelper<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">RedisLock</span><span class="token punctuation">(</span><span class="token class-name">RedisHelper</span> redisHelper<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> expire<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisHelper <span class="token operator">=</span> redisHelper<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">CacheKeyConstant</span><span class="token punctuation">.</span>DISTRIBUTED_LOCK_KEY<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expire <span class="token operator">=</span> expire<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeUnit <span class="token operator">=</span> timeUnit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisHelper<span class="token punctuation">.</span><span class="token function">tryGetDistributedLock</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> timeUnit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        redisHelper<span class="token punctuation">.</span><span class="token function">releaseDistributedLock</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注解支持"><a href="#注解支持" class="headerlink" title="注解支持"></a>注解支持</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * @see DistributedLock * @see RedisLock * @author zhangyifan@wshifu.com */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DistributedLocked</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 锁名称，默认为MD5(className + methodName)     */</span>    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 过期时间，默认为5s     */</span>    <span class="token keyword">int</span> <span class="token function">expireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 过期时间单位，默认为秒     */</span>    <span class="token class-name">TimeUnit</span> <span class="token function">expireUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">;</span>    <span class="token comment">/**     * 业务ID，默认与name相同     */</span>    <span class="token class-name">String</span> <span class="token function">requestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 最大等待时间，默认为60s     */</span>    <span class="token keyword">long</span> <span class="token function">waitTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 最大等待时间单位，默认为秒     */</span>    <span class="token class-name">TimeUnit</span> <span class="token function">waitUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">;</span>    <span class="token comment">/**     * 重试次数，当重试次数>0时，优先使用重试次数，忽略等待时间     */</span>    <span class="token keyword">int</span> <span class="token function">retryCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 锁的实现，暂时只支持Redis方式     */</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DistributedLock</span><span class="token punctuation">></span></span> <span class="token function">implementationClz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">RedisLock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取不到锁时的降级处理，默认抛出异常 &#123;@link DistributedLockException&#125;     */</span>    <span class="token class-name">String</span> <span class="token function">fallbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AOP-支持"><a href="#AOP-支持" class="headerlink" title="AOP 支持"></a>AOP 支持</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>intercept<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>intercept<span class="token punctuation">.</span></span><span class="token class-name">MethodInvocation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span></span><span class="token class-name">AspectJExpressionPointcutAdvisor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ReflectUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">DigestUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token comment">/** * 针对 &#123;@link DistributedLocked&#125; 切面处理 * @author zhangyifan@wshifu.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributedLockedAdvisor</span> <span class="token keyword">extends</span> <span class="token class-name">AspectJExpressionPointcutAdvisor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> POINTCUT <span class="token operator">=</span> <span class="token string">"@annotation(com.wanshifu.user.framework.business.cache.lock.DistributedLocked)"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">DistributedLockProvider</span> distributedLockProvider<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setExpression</span><span class="token punctuation">(</span>POINTCUT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DistributedLockedAdvice</span><span class="token punctuation">(</span>distributedLockProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DistributedLockedAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DistributedLockProvider</span> distributedLockProvider<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">DistributedLockedAdvice</span><span class="token punctuation">(</span><span class="token class-name">DistributedLockProvider</span> distributedLockProvider<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>distributedLockProvider <span class="token operator">=</span> distributedLockProvider<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Method</span> targetMethod <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DistributedLocked</span><span class="token punctuation">[</span><span class="token punctuation">]</span> distributedLockeds <span class="token operator">=</span> targetMethod<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotationsByType</span><span class="token punctuation">(</span><span class="token class-name">DistributedLocked</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>distributedLockeds<span class="token punctuation">)</span> <span class="token operator">||</span> distributedLockeds<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"DistributedLocked annotation not found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">DistributedLocked</span> distributedLocked <span class="token operator">=</span> distributedLockeds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> lockName <span class="token operator">=</span> distributedLocked<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>lockName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lockName <span class="token operator">=</span> <span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5DigestAsHex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>targetMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> targetMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">DistributedLock</span> lock <span class="token operator">=</span> distributedLockProvider<span class="token punctuation">.</span><span class="token function">getRedisLock</span><span class="token punctuation">(</span>lockName<span class="token punctuation">,</span> distributedLocked<span class="token punctuation">.</span><span class="token function">expireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> distributedLocked<span class="token punctuation">.</span><span class="token function">expireUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> requestId <span class="token operator">=</span> distributedLocked<span class="token punctuation">.</span><span class="token function">requestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                requestId <span class="token operator">=</span> lockName<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> retryCount <span class="token operator">=</span> distributedLocked<span class="token punctuation">.</span><span class="token function">retryCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>retryCount <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>requestId<span class="token punctuation">,</span> retryCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>requestId<span class="token punctuation">,</span> distributedLocked<span class="token punctuation">.</span><span class="token function">waitTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> distributedLocked<span class="token punctuation">.</span><span class="token function">waitUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DistributedLockException</span><span class="token punctuation">(</span><span class="token string">"acquire distributed lock failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DistributedLockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> fallbackMethodName <span class="token operator">=</span> distributedLocked<span class="token punctuation">.</span><span class="token function">fallbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>fallbackMethodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Method</span> fallbackMethod <span class="token operator">=</span> <span class="token class-name">ReflectUtils</span><span class="token punctuation">.</span><span class="token function">findDeclaredMethod</span><span class="token punctuation">(</span>targetMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        fallbackMethodName<span class="token punctuation">,</span> targetMethod<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>fallbackMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>targetMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>fallbackMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                fallbackMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> fallbackMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Lock </tag>
            
            <tag> AQS </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式编程之浅见</title>
      <link href="/2020/06/28/xiang-ying-shi-bian-cheng-zhi-qian-jian/"/>
      <url>/2020/06/28/xiang-ying-shi-bian-cheng-zhi-qian-jian/</url>
      
        <content type="html"><![CDATA[<p><strong>在计算中，响应式编程或反应式编程（英语：Reactive programming）是一种面向数据流和变化传播的声明式编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。</strong></p><blockquote><p><em>以上是维基百科中对于响应式编程的定义，这段文字很简短同时也很抽象，乍一看或许并不是那么好理解。其实响应式编程对于我们并不是一个陌生的概念，响应式编程的设计理念充斥了软件系统的各个角落。例如我们在设计模式中常提到的观察者模式（Observer Pattern），将多个Observer注册到Observable上，对于Observable的数据变化做出实时反映，这是面向对象设计模式中响应式思想的体现。Java8中的Stream流，CompletableFuture，函数式风格API，一直到Java9引入的Flow API，让我们看到JDK的设计者们对于Java未来的想象，我们可以发现Java语言的发展逐渐趋向于追随函数式和响应式的编程范式。同时RxJava，Project Reactor等第三方库的支持，为构建响应式风格的系统提供了良好的基础建设。尤其是Spring家族作为Java生态的引领者，在Spring Framework 5.0版本开始全面使用Reactive API实现一些功能组件，似乎Spring官方对于响应式风格的推广有强烈信心，那么响应式编程到底能给我们带来什么呢？</em></p></blockquote><span id="more"></span><h2 id="阻塞意味着浪费"><a href="#阻塞意味着浪费" class="headerlink" title="阻塞意味着浪费"></a>阻塞意味着浪费</h2><hr><p>现代应用程序需要应对大量的并发用户，虽然硬件的性能水平在快速发展，但也往往无法跟上并发量的增长，因此我们需要在软件层面通过更巧妙的设计以有限的硬件资源来支撑较大的并发量。从广义上来说有两种方式来提升系统的性能：</p><ul><li>横向扩容，使用更多的服务器等硬件资源，这意味着花费更高的成本。</li><li>更有效地使用现有资源，这意味着对软件设计有更高的要求，而响应式编程的目的正在于此。</li></ul><p>我们知道利用Java并发编程可以通过调度更多线程充分地压榨CPU，以达到更高的硬件资源利用率，尤其是在I/O密集型的程序中带来的提升是明显的，但同时带来的是更高的代码复杂度以及资源并发访问所导致的各种线程安全问题。</p><h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><hr><p>通过编写异步非阻塞式的代码，我们可以在当前线程进入I/O等待时，将资源让出执行其他任务，异步处理执行完成后再返回到当前逻辑。在Java中主要有两种异步编程模型：</p><h3 id="Callback-回调"><a href="#Callback-回调" class="headerlink" title="Callback 回调"></a>Callback 回调</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">priv<span class="token punctuation">.</span>just<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ForkJoinPool</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallbackDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token function">invokeAsync</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeAsync</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span><span class="token function">commonPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// ... do something</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">"second"</span><span class="token punctuation">;</span>            consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Future-占位符"><a href="#Future-占位符" class="headerlink" title="Future 占位符"></a>Future 占位符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">priv<span class="token punctuation">.</span>just<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// ... do something</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"second"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种方式都有其局限性，在一种复杂的业务场景下，多个异步任务很难组合到一起，任务的编排难度大幅增加，而且当多个回调逻辑嵌套在一起时，会产生所谓的 Callback Hell（回调地狱），代码的可读性和可维护性都大幅降低。而响应式库可以帮助我们优雅地进行异步编程。</p><h3 id="CompletableFuture-任务编排"><a href="#CompletableFuture-任务编排" class="headerlink" title="CompletableFuture 任务编排"></a>CompletableFuture 任务编排</h3><p>我们可以假想这样一个业务场景：</p><ol><li>调用 <code>getUserIds()</code> 获取一组用户ID。</li><li>针对每个用户ID，调用 <code>getUserRole()</code> 获取其角色名称。</li><li>针对每个用户ID，调用 <code>getUserCompany()</code> 获取其公司名称。</li><li>将所有结果组合为 <code>userId-userRole-userCompany</code> 返回。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">invokeSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> userIds <span class="token operator">=</span> <span class="token function">getUserIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> userId <span class="token operator">:</span> userIds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> userRole <span class="token operator">=</span> <span class="token function">getUserRole</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userCompany <span class="token operator">=</span> <span class="token function">getUserCompany</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userId <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> userRole <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> userCompany<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在不采用任何并发及异步编程的情况下显然这段代码的效率是低下的，因为获取多个用户的信息之前存在并行的可能，而获取用户角色和获取用户公司两者之间没有相互依赖的关系，也可以并行化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">invokeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getUserIds</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">thenComposeAsync</span><span class="token punctuation">(</span>userIds <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tasks <span class="token operator">=</span> userIds<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>userId <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> getUserRoleTask <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">getUserRole</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> getUserCompanyTask <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">getUserCompany</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> getUserRoleTask<span class="token punctuation">.</span><span class="token function">thenCombineAsync</span><span class="token punctuation">(</span>getUserCompanyTask<span class="token punctuation">,</span> <span class="token punctuation">(</span>userRole<span class="token punctuation">,</span> userCompany<span class="token punctuation">)</span> <span class="token operator">-></span> userId <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> userRole <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> userCompany<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>v <span class="token operator">-></span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token operator">::</span><span class="token function">join</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>采用 <code>CompletableFuture</code> 对任务进行编排后更充分地利用了多核CPU的性能，代码的执行效率有所提升，但我们发现代码变成了层层嵌套的结构，类似于回调地狱的状况，代码的可读性明显降低，而且在整个程序中普遍实行这样的编程方式代码复杂度是不可想象的。</p><h3 id="响应式库将并发问题抽离出来"><a href="#响应式库将并发问题抽离出来" class="headerlink" title="响应式库将并发问题抽离出来"></a>响应式库将并发问题抽离出来</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ParallelFlux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">invokeReactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token function">getUserIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">runOn</span><span class="token punctuation">(</span><span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">newParallel</span><span class="token punctuation">(</span><span class="token string">"myParallel"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>userId <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                 <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userRole <span class="token operator">=</span> <span class="token function">getUserRole</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userCompany <span class="token operator">=</span> <span class="token function">getUserCompany</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> userRole<span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span>userCompany<span class="token punctuation">,</span>  <span class="token punctuation">(</span>role<span class="token punctuation">,</span> company<span class="token punctuation">)</span> <span class="token operator">-></span> userId <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> role <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> company<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以上的代码中通过调用 <code>parallel()</code> 方法将 <code>Flux</code> 响应式流转化为 <code>ParallelFlux</code> 并行流，使之后的 <code>flatMap</code> 操作并行化，并通过 <code>runOn()</code> 方法指定在某个线程池上运行。在这个过程中我们并没有去考虑诸如线程的创建，任务的编排等问题，因为响应式库帮我们抽象了并发逻辑，很大程度上使我们从复杂的并发编程中解脱出来。</p><h2 id="在订阅前什么都不会发生"><a href="#在订阅前什么都不会发生" class="headerlink" title="在订阅前什么都不会发生"></a>在订阅前什么都不会发生</h2><hr><p>在响应式编程中数据的消费者是行为的发起者，在消费者对数据进行订阅之前，所有的计算操作都不会发生。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">publishOn</span><span class="token punctuation">(</span><span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">elastic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// Nothing Happens Until You subscribe()</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在数据流被 <code>subscribe()</code> 之前，一切的代码只是在创建异步流程的抽象描述，可以想象成在声明一条数据的流水线，每一个操作符都代表流水线的某个操作环节，而此时是没有数据在这条流水线上流动的，也就是CPU并没有进行计算行为。而当 <code>subscribe()</code> 方法被调用时，数据的订阅者开始向上游发出数据请求，触发整个数据流的计算。</p><h2 id="Backpressure-背压"><a href="#Backpressure-背压" class="headerlink" title="Backpressure 背压"></a>Backpressure 背压</h2><hr><p>背压本身是对一种现象的描述，它表示的是数据生产者的生产速率大于数据消费者的消费速率，因此造成数据在缓冲区堆积的现象。试想在一条制造业的生产流水线上，如果上游加工环节的工人熟练度大于下游，那么可能造成产品在某一环节产生挤压，而最终产品的生产效率是由下游决定的，即使上游的生产效率再高也没有意义。从软件层面上来说，背压现象往往意味着数据缓冲区被占满，此时如果不对缓冲区容量进行限制，就意味着OOM，而限制缓冲区容量就意味着需要丢弃部分数据。理想情况是数据的生产消费速率是近乎匹配的，此时意味着最大程度地节省内存。而响应式编程中经常提到的背压机制实际指的是对于背压现象的调价，也就是由数据消费者引导生产者的生产速率，使生产者的速率与自身消费速率相匹配。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagespublisher-subscriber.png.png" alt="推拉模型"></p><h3 id="pull-拉模型的体现，迭代器模式"><a href="#pull-拉模型的体现，迭代器模式" class="headerlink" title="pull 拉模型的体现，迭代器模式"></a>pull 拉模型的体现，迭代器模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Publisher</span> publisher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Publisher<span class="token punctuation">.</span>PublisherIterator</span> iterator <span class="token operator">=</span> publisher<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">PublisherIterator</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PublisherIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">PublisherIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> res <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="push-推模型的体现，观察者模式"><a href="#push-推模型的体现，观察者模式" class="headerlink" title="push 推模型的体现，观察者模式"></a>push 推模型的体现，观察者模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Publisher</span> publisher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    publisher<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    publisher<span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token keyword">extends</span> <span class="token class-name">Observable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> number <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在拉模型中我们往往会采用诸如分页查询的策略对数据进行分批查询，所以一般不会产生背压现象，但数据的生产和消费是交替进行的，两者无法并行最大程度地利用多核CPU的计算性能。在推模型中数据是由生产者驱动的，只要生产速率快于消费速率，数据在内存中积累必然产生背压现象，此时会降低内存利用率，在不加以控制的情况下产生OOM。</p><h3 id="拉与推的结合，响应式编程"><a href="#拉与推的结合，响应式编程" class="headerlink" title="拉与推的结合，响应式编程"></a>拉与推的结合，响应式编程</h3><p>以 Project Reactor 为例，响应式流为我们提供四种背压策略：</p><ul><li>ERROR： 当下游跟不上节奏的时候发出一个错误信号。</li><li>DROP：当下游没有准备好接收新的元素的时候抛弃这个元素。</li><li>LATEST：让下游只得到上游最新的元素。</li><li>BUFFER：缓存下游没有来得及处理的元素（如果缓存不限大小的可能导致OutOfMemoryError）。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">priv<span class="token punctuation">.</span>just<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>reactivestreams<span class="token punctuation">.</span></span><span class="token class-name">Subscription</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">BaseSubscriber</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OnBackpressureErrorDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-></span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">onBackpressureBuffer</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span>                <span class="token comment">//.onBackpressureError()</span>                <span class="token comment">//.onBackpressureDrop()</span>                <span class="token comment">//.onBackpressureLatest()</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hookOnSubscribe</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hookOnNext</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"next: "</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hookOnComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hookOnError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程模型的演化"><a href="#线程模型的演化" class="headerlink" title="线程模型的演化"></a>线程模型的演化</h2><hr><h3 id="Java-BIO-模型"><a href="#Java-BIO-模型" class="headerlink" title="Java BIO 模型"></a>Java BIO 模型</h3><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesjava-bio.jpg" alt="java-bio"></p><p>在 Java 1.4 之前的 BIO 模型中，客户端每建立一个 socket 连接，服务端都需要创建一个线程并分配给这个连接，直到这个连接被关闭，而在服务端线程是宝贵的资源，如果长时间被占用就是对资源的浪费，所以原生的 Java BIO 只适用于并发量要求很低的系统。</p><h3 id="Tomcat-BIO-模型"><a href="#Tomcat-BIO-模型" class="headerlink" title="Tomcat BIO 模型"></a>Tomcat BIO 模型</h3><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagestomcat-bio.jpg" alt="tomcat-bio"></p><p>tomcat 中的 BIO 线程模型是通过一个 Accept 线程建立与客户端的 TCP 连接，随后将连接交给线程池处理，相比于原生的 Java BIO 模型，线程池本身对于线程资源有整体的管控，意味着对服务端存在一定的保护，但由于依赖的依然是 Java BIO 的 API，线程池资源被占尽后的请求只能进入等待或被拒绝，整体的吞吐量并没有提升。</p><h3 id="Tomcat-NIO-模型"><a href="#Tomcat-NIO-模型" class="headerlink" title="Tomcat NIO 模型"></a>Tomcat NIO 模型</h3><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagestomcat-nio.jpg" alt="tomcat-nio"></p><ul><li>Acceptor 线程负责建立连接，同时把连接加入 Poller 队列。</li><li>每个 Poller 队列中有一个队列，同时有一个 Selector 轮询这个队列，一旦某个连接被绑定到了某个 Poller 上，绑定关系永远不会改变，Selector 一旦发现该连接上发生读写事件，则将读写事件交给业务线程池处理。</li><li>接收新请求与请求的业务处理分离，意味着新请求不会被业务处理阻塞。同时只有在连接上发生读写事件时该请求才会占用业务线程池，显然这种模式对于线程的利用率是更高的。</li></ul><h3 id="Netty-Reactor-模型"><a href="#Netty-Reactor-模型" class="headerlink" title="Netty Reactor 模型"></a>Netty Reactor 模型</h3><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesnetty-reactor.jpg" alt="netty-reactor"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Reactive Programing </tag>
            
            <tag> Project Reactor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos 如何适应 Spring Cloud 规范</title>
      <link href="/2020/06/20/nacos-ru-he-gua-ying-spring-cloud-gui-fan/"/>
      <url>/2020/06/20/nacos-ru-he-gua-ying-spring-cloud-gui-fan/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>我们知道在 Java 微服务生态体系的发展过程中，有两种主流的解决方案逐渐受到行业内的关注，一种是基于 Spring 技术体系，由 Spring 官方团队推出的 Spring Cloud 微服务一体式解决方案可以为我们方便地搭建一个微服务架构，而且基于 Spring 良好的粘合剂的特性我们可以方便地将各类第三方框架集成到该体系中。另一个方面，由阿里所推出的 Dubbo 从早期单纯的一个 RPC 框架自从阿里宣布重新启动对 Dubbo 的维护后，逐渐自成一派，融合了如 Nacos, Sentinel, Seata, RocketMQ 一类的中间件技术，成为全新一套完整的微服务解决方案，为企业构建自身的架构提供了不同的选择。很多时候我们在面临选择拥抱哪一种生态的时候，往往会权衡利弊，有所犹豫，直到 Spring Cloud Alibaba 的推出，这一切又变得迥然不同。面对 Spring Cloud 体系的蓬勃发展并受到大众的广泛接受，Dubbo 体系选择拥抱 Spring Cloud，基于 Spring 体系强大的包容性和扩展性推出了适用 Spring Cloud 规范而生的 Spring Cloud Alibaba，如今在 Spring 官网我们已经看到 Spring Cloud Alibaba 的英文文档，意味着这种方案已经被 Spring 官方所认可和推崇。</em></p></blockquote><span id="more"></span><h2 id="Nacos-如何适应-Spring-Cloud-中的服务注册与发现"><a href="#Nacos-如何适应-Spring-Cloud-中的服务注册与发现" class="headerlink" title="Nacos 如何适应 Spring Cloud 中的服务注册与发现"></a>Nacos 如何适应 Spring Cloud 中的服务注册与发现</h2><hr><h3 id="DiscoveryClient-服务发现客户端"><a href="#DiscoveryClient-服务发现客户端" class="headerlink" title="DiscoveryClient 服务发现客户端"></a>DiscoveryClient 服务发现客户端</h3><p>在微服务架构中 Consumer 服务消费者必须具有服务发现的功能，基于此 Consumer 才能从 Registry 服务注册中心获取 Provider 服务提供者的地址列表，通过某一种 LoadBalance 负载均衡的策略选取一个地址进行 RPC 通信访问。在这个过程中诸如 Registry, LoadBalance 这样的实现方式也许是不同，但可以从中抽象出几个重要的实体，整个过程只是这几个实体之间的交互。而 <code>org.springframework.cloud.client.discovery.DiscoveryClient</code> 正是 Spring Cloud 对于服务发现者的抽象，在微服务架构中每个 Consumer 都必须是一个 DiscoveryClient 服务发现者。那么 Nacos 对这个接口必然有一个实现 <code>com.alibaba.cloud.nacos.discovery.NacosDiscoveryClient</code> ，其中的核心方法就是 <code>getServices()</code> 用于获取所有的 Provider 列表。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> services <span class="token operator">=</span> discoveryProperties<span class="token punctuation">.</span><span class="token function">namingServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getServicesOfServer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> services<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"get service name from nacos server fail,"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到请求被委托给了 <code>NamingServiceInstance</code> ，这个所谓的 NamingService 是什么呢？这是 Nacos 内部的一个命名服务，通过跟踪代码我们发现这个实例时通过反射创建的，它的真正实现是 <code>com.alibaba.nacos.client.naming.NacosNamingService</code>，这个请求最终调用的是 <code>NamingProxy#getServiceList()</code> 方法，通过 HTTP 方式从 Nacos 服务获取服务列表。也就是说 Spring Cloud 提供的 DiscoveryClient 只是一个规范，或者说一层包装，而内部真正是实现是第三方框架所提供的，如 Spring Cloud 默认提供的 Eureka 服务注册中心是 Netflix 所提供的实现。这是 Spring 家族贯穿始终的一种设计思想，框架层面提供抽象性的设计，而具体的实现是可扩展，可自定义的，个人认为这是 Spring 成为 Java 生态粘合剂的根本指导思想。</p><h3 id="服务自动注册"><a href="#服务自动注册" class="headerlink" title="服务自动注册"></a>服务自动注册</h3><p>在微服务架构中 Provider 服务提供者在启动后就应该自动向注册中心进行注册，以实现微服务架构中的一个重要特性，服务动态扩容。<code>com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration</code> 负责自动将服务信息自动注册到 Nacos，这是一个较为简易的实现，核心逻辑已经被 Spring Cloud 抽象实现了，因为服务自动注册是一个普遍性功能，与具体实现无关，只是各框架的注册方式不同而已。<code>org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration</code> 就是 Spring Cloud 提供的抽象实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAutoServiceRegistration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span> <span class="token keyword">extends</span> <span class="token class-name">Registration</span><span class="token punctuation">></span></span><span class="token keyword">implements</span> <span class="token class-name">AutoServiceRegistration</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">,</span><span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebServerInitializedEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到它实现了 <code>ApplicationListener&lt;WebServerInitializedEvent&gt;</code>，也就是它本身是一个事件监听器，会对 <code>WebServerInitializedEvent</code> 服务初始化事件作出反应。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">WebServerInitializedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">bind</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">WebServerInitializedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebServerApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"management"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableWebServerApplicationContext</span><span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务一启动便执行了 <code>bind()</code> 逻辑，这里了主要是设置端口号，接着执行 <code>start()</code> 逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Discovery Lifecycle disabled. Not starting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// only initialize if nonSecurePort is greater than 0 and it isn't already running</span><span class="token comment">// because of containerPortInitializer below</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>running<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstancePreRegisteredEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldRegisterManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">registerManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstanceRegisteredEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>running<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里首先判断服务自动注册是否被禁用，接着利用了一个 <code>AtomicBoolean</code> 避免重复注册，同时向上下文发布了服务注册前后的 <code>InstancePreRegisteredEvent</code> 和 <code>InstanceRegisteredEvent</code> 两个事件，如果我们有业务需要在服务注册前后嵌入相关逻辑，可以通过监听这两个事件来实现，其中核心便是执行 <code>register()</code> 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BeatInfo</span> beatInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeatInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beatInfo<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupedName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beatInfo<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beatInfo<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beatInfo<span class="token punctuation">.</span><span class="token function">setCluster</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beatInfo<span class="token punctuation">.</span><span class="token function">setWeight</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beatInfo<span class="token punctuation">.</span><span class="token function">setMetadata</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beatInfo<span class="token punctuation">.</span><span class="token function">setScheduled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> instanceInterval <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getInstanceHeartBeatInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beatInfo<span class="token punctuation">.</span><span class="token function">setPeriod</span><span class="token punctuation">(</span>instanceInterval <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> DEFAULT_HEART_BEAT_INTERVAL <span class="token operator">:</span> instanceInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>        beatReactor<span class="token punctuation">.</span><span class="token function">addBeatInfo</span><span class="token punctuation">(</span><span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupedName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">,</span> beatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    serverProxy<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span><span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupedName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过跟踪代码可以发现 registry 请求依然是委托给 <code>NacosNamingService</code> 执行的，可以说这个类是 Nacos 实现服务注册发现的核心。同时这里通过 <code>BeatReactor</code> 添加了一个心跳任务，因为 Nacos 采用心跳机制判断向自己注册的服务是否依然存活，以此动态维护服务列表，这一点与 Eurake 相似。<code>BeatReactor</code> 中持有了一个 <code>ScheduledExecutorService</code> 用以周期性地执行心跳任务，默认间隔为五秒，每次心跳任务会上报该服务的元数据信息表示自身依然存活。</p><h2 id="Nacos-如何适应-Spring-Cloud-Config-配置中心"><a href="#Nacos-如何适应-Spring-Cloud-Config-配置中心" class="headerlink" title="Nacos 如何适应 Spring Cloud Config 配置中心"></a>Nacos 如何适应 Spring Cloud Config 配置中心</h2><hr><h3 id="PropertySourceLocator-配置源定位"><a href="#PropertySourceLocator-配置源定位" class="headerlink" title="PropertySourceLocator 配置源定位"></a>PropertySourceLocator 配置源定位</h3><p><code>org.springframework.cloud.bootstrap.config.PropertySourceLocator</code> 是 Spring Cloud 抽象的一个接口，用于从 <code>Environment</code> 中定位到 <code>PropertySource</code> 配置资源，在微服务架构中，由于配置存储在远程的配置中心，我们需要从远程配置中心进行拉取。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> env<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ConfigService</span> configService <span class="token operator">=</span> nacosConfigProperties<span class="token punctuation">.</span><span class="token function">configServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> configService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"no instance of config service found, can't load config from nacos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> timeout <span class="token operator">=</span> nacosConfigProperties<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nacosPropertySourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NacosPropertySourceBuilder</span><span class="token punctuation">(</span>configService<span class="token punctuation">,</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> nacosConfigProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> dataIdPrefix <span class="token operator">=</span> nacosConfigProperties<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dataIdPrefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dataIdPrefix <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dataIdPrefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dataIdPrefix <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.application.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">CompositePropertySource</span> composite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositePropertySource</span><span class="token punctuation">(</span>NACOS_PROPERTY_SOURCE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadSharedConfiguration</span><span class="token punctuation">(</span>composite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadExtConfiguration</span><span class="token punctuation">(</span>composite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadApplicationConfiguration</span><span class="token punctuation">(</span>composite<span class="token punctuation">,</span> dataIdPrefix<span class="token punctuation">,</span> nacosConfigProperties<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> composite<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>com.alibaba.cloud.nacos.client.NacosPropertySourceLocator</code> 是 Nacos 对该接口的实现，其中的 <code>locate()</code> 方法是其核心逻辑。可以看到其中调用的三个私有方法分别为我们加载了三个层级的配置信息，因为Nacos为我们提供了三个层级的配置，分别是</p><ul><li>Shared 共享配置信息，这个层级一般存放一些所有服务共有的默认配置信息，优先级最低。</li><li>Ext 扩展配置信息，这个层级可以存放可供选择的公用配置信息，如一个项目集成了 Redis，才需要 Redis 相关的配置。</li><li>Application 应用配置信息，这是服务独有的配置信息，并支持环境隔离。<br>这三种配置的加载顺序也决定了他们的优先级，加载越迟，配置优先级越高。</li></ul><h3 id="Nacos-配置动态刷新"><a href="#Nacos-配置动态刷新" class="headerlink" title="Nacos 配置动态刷新"></a>Nacos 配置动态刷新</h3><p>在微服务架构中，当我们修改配置中心的配置信息后，我们希望这些变化能实时地被系统中的各服务获取，反映到我们业务中的逻辑变化。所以 Nacos 通过一些机制实现了该特性。<code>com.alibaba.cloud.nacos.refresh.NacosContextRefresher</code> 中我们可以看到其核心逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosContextRefresher</span><span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationReadyEvent</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同样它也是一个事件监听器，当 <code>ApplicationReadyEvent</code> 这个生命周期事件被派发后，便开始向 Nacos 注册相应的监听器负责监听配置信息的变化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerNacosListenersForApplications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>refreshProperties<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">NacosPropertySource</span> nacosPropertySource <span class="token operator">:</span> <span class="token class-name">NacosPropertySourceRepository</span><span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nacosPropertySource<span class="token punctuation">.</span><span class="token function">isRefreshable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> dataId <span class="token operator">=</span> nacosPropertySource<span class="token punctuation">.</span><span class="token function">getDataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerNacosListener</span><span class="token punctuation">(</span>nacosPropertySource<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerNacosListener</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> dataId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Listener</span> listener <span class="token operator">=</span> listenerMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> i <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">refreshCountIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> md5 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>md5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> <span class="token operator">|</span> <span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"[Nacos] unable to get md5 for dataId: "</span> <span class="token operator">+</span> dataId<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>refreshHistory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> md5<span class="token punctuation">)</span><span class="token punctuation">;</span>applicationContext<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Refresh Nacos config"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Refresh Nacos config group "</span> <span class="token operator">+</span> group <span class="token operator">+</span> <span class="token string">",dataId"</span> <span class="token operator">+</span> dataId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>configService<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环当前服务中的每一个 <code>NacosPropertySource</code> 配置源，分别为其注册 Nacos 监听器，<code>listenerMap</code> 是一个 <code>ConcurrentHashMap</code> 作为监听器缓存，同时避免重复注册。Nacos 的监听器功能与 <code>zookeeper</code> 中 <code>Watcher</code> 类似，非常适合用于分布式系统中的数据协调。当配置信息发生改变时，<code>receiveConfigInfo()</code> 方法会被回调，加入一条配置刷新历史，同时向上下文中派发一个 <code>RefreshEvent</code> 事件，这个事件可以触发刷新 Spring 上下文中的 <code>PropertySource</code>，之后我们从 <code>Environment</code> 中获取到的 Property 已经是更新后的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务网关 Spring Cloud Gateway 之限流</title>
      <link href="/2020/04/08/wei-fu-wu-wang-guan-spring-cloud-gateway-zhi-xian-liu/"/>
      <url>/2020/04/08/wei-fu-wu-wang-guan-spring-cloud-gateway-zhi-xian-liu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>Spring Cloud Gateway 作为 Spring 官方全新推出的微服务网关解决方案，用于替代原有的 Netflix Zuul 框架，相比于 Zuul，Spring Cloud Gateway 最大的不同点在于它是基于 Spring Boot 2.x 版本进行开发，我们知道  Spring 从 Spring Boot 2.0 以上（也就是 Spring Framework 5.0 以上）的版本引入了全新的 Java Web 框架Spring Webflux，基于 Project Reactor 进行开发，与基于 Servlet API 的 Spring MVC 不同，由于它依赖于Reactor 响应式编程框架，基于 Spring Webflux 构建的服务是非阻塞式的，支持所谓的 back pressure（背压），尽管目前业内对 Spring Webflux 的使用普及程度似乎还不高，但从 Spring 官方对该框架的推崇程度来看，我们有理由相信选择 Spring Cloud Gateway 构建我们的网关服务不失为一个长远的选择。</em></p></blockquote><span id="more"></span><h2 id="Spring-Cloud-Gateway-中的限流"><a href="#Spring-Cloud-Gateway-中的限流" class="headerlink" title="Spring Cloud Gateway 中的限流"></a>Spring Cloud Gateway 中的限流</h2><hr><p>在微服务架构中网关服务作为整个系统与外部交互的屏障，承担了全部路由管理的职责，那么限流似乎是一个绕不开的话题。显然 <code>Spring Cloud Gateway</code> 也给我们提供了相应的实现。</p><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesgateway-process.png" alt="Spring Cloud Gateway 工作流程"></p><p>上图是 <code>Spring</code> 官方文档中对于网关工作流程的示意图，<code>Spring Cloud Gateway</code> 主要有以下三个核心概念：</p><ul><li><code>Route</code>：网关中某一个路由的基本单位，有自己的 <code>ID</code> 以及目标 <code>URI</code> 可以理解为我们需要利用网关进行的某一种请求转发过程，主要由一组 <code>Predicate</code> 和一组 <code>Filter</code> 构成。</li><li><code>Predicate</code>：我们知道 <code>Predicate</code> 本身是 <code>Java8</code> 引入的一个函数式接口，代表一个判断真伪的函数，在这里也是相似的概念，用于描述匹配到某一路由所需的条件。</li><li><code>Filter</code>：在对某一请求进行路由的过程中，我们往往需要对请求做相应的特殊处理，如果对 <code>request</code> 或 <code>response</code> 的信息进行编辑，基于这样的需求，<code>Spring Cloud Gateway</code> 为我们提供了一系列的过滤器，当然我们也可以对其进行扩展。</li></ul><p>在本文中我们探讨的限流正是通过某一个 <code>Filter</code> 将限流的逻辑作用到我们所指定的 <code>Route</code> 在不侵入业务逻辑的前提下 <code>Spring Cloud Gateway</code> 可以帮助我们进行灵活的限流控制。</p><h2 id="RequestRateLimiterGatewayFilterFactory-限流过滤器"><a href="#RequestRateLimiterGatewayFilterFactory-限流过滤器" class="headerlink" title="RequestRateLimiterGatewayFilterFactory 限流过滤器"></a>RequestRateLimiterGatewayFilterFactory 限流过滤器</h2><hr><p>当我们引入 <code>spring-cloud-starter-gateway</code> 依赖后，<code>GatewayAutoConfiguration</code> 自动配置类将会生效，我们可以在其中看到如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">PrincipalNameKeyResolver</span><span class="token punctuation">.</span>BEAN_NAME<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">KeyResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">PrincipalNameKeyResolver</span> <span class="token function">principalNameKeyResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PrincipalNameKeyResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">KeyResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">RequestRateLimiterGatewayFilterFactory</span> <span class="token function">requestRateLimiterGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token class-name">RateLimiter</span> rateLimiter<span class="token punctuation">,</span> <span class="token class-name">KeyResolver</span> resolver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestRateLimiterGatewayFilterFactory</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">,</span> resolver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>Spring</code> 帮我们自动配置了两个 <code>bean</code>，其中 <code>RequestRateLimiterGatewayFilterFactory</code> 就是用于实现限流核心逻辑的过滤器工厂，而它需要依赖容器中存在两种类型的 <code>bean</code> 才会触发自动装配，其中对于 <code>KeyResolver</code> 类型已经自动装配了一个 <code>PrincipalNameKeyResolver</code>，而 <code>RateLimiter</code> 类型的 <code>bean</code> 我们暂时没有看到，它们的具体作用会在下文说明。</p><h2 id="KeyResolver"><a href="#KeyResolver" class="headerlink" title="KeyResolver"></a>KeyResolver</h2><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">KeyResolver</span> <span class="token punctuation">&#123;</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrincipalNameKeyResolver</span> <span class="token keyword">implements</span> <span class="token class-name">KeyResolver</span> <span class="token punctuation">&#123;</span><span class="token comment">/** * &#123;@link PrincipalNameKeyResolver&#125; bean name. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> BEAN_NAME <span class="token operator">=</span> <span class="token string">"principalNameKeyResolver"</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Principal</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>KeyResolver</code> 接收一个 <code>ServerWebExchange</code> 参数，代表某一种 <code>String</code> 类型的 <code>key</code> 解析器，那么这个 <code>key</code> 代表什么含义呢？首先如果我们需要限流，必然需要一个标的，或者说限流必然存在一个细粒度。比如说我们是需要对某一用户进行限流，还是针对某一客户端，又或是某一接口，这个限流的边界是由开发者决定的，所以框架需要为我们提供这样的拓展，假设我们需要以用户为细粒度进行限流，那么这个 <code>key</code> 也许就是某个用户的 <code>ID</code> 或是手机号，这完全取决于我们的需求对其进行个性化实现。如果我们没有装配自定义的 <code>KeyResolver</code>，那么框架会为我们提供默认实现 <code>PrincipalNameKeyResolver</code>，一般来讲此处都需要自定义。</p><h2 id="RateLimiter"><a href="#RateLimiter" class="headerlink" title="RateLimiter"></a>RateLimiter</h2><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RateLimiter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">StatefulConfigurable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> allowed<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> tokensRemaining<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headers<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> allowed<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowed <span class="token operator">=</span> allowed<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokensRemaining <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> <span class="token string">"headers may not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> headers<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> allowed<span class="token punctuation">,</span> <span class="token keyword">long</span> tokensRemaining<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowed <span class="token operator">=</span> allowed<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokensRemaining <span class="token operator">=</span> tokensRemaining<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> allowed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTokensRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> tokensRemaining<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"Response&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"allowed="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>allowed<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", headers="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", tokensRemaining="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tokensRemaining<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RateLimiter</code> 代表一种限流算法的抽象，它接收 <code>routeId</code> 以及 <code>KeyResolver</code> 解析得到的 <code>key</code>，返回是否允许请求的结果，我们可以通过装配自己的 <code>RateLimiter</code> 实现自定义限流算法或依赖于其他第三方框架实现，如计数器算法、漏桶算法、令牌桶算法等。</p><h2 id="基于-Redis-实现的令牌桶算法-RedisRateLimiter"><a href="#基于-Redis-实现的令牌桶算法-RedisRateLimiter" class="headerlink" title="基于 Redis 实现的令牌桶算法 RedisRateLimiter"></a>基于 Redis 实现的令牌桶算法 RedisRateLimiter</h2><hr><p>我们可以选择引入 <code>spring-boot-starter-data-redis-reactive</code> 依赖，<code>Spring</code> 已经提供了基于 <code>Redis</code> 实现的令牌桶限流算法，其中涉及三个关键性的变量配置，如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> test_route        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">8070</span>        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> Method=GET<span class="token punctuation">,</span> POST        <span class="token punctuation">-</span> Path=/testRoute/<span class="token important">**</span>        <span class="token key atrule">filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> AddRequestHeader=color<span class="token punctuation">,</span> blue        <span class="token punctuation">-</span> StripPrefix=1        <span class="token punctuation">-</span> MyCustom=xxx<span class="token punctuation">,</span> yyy        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RequestRateLimiter          <span class="token key atrule">args</span><span class="token punctuation">:</span>            <span class="token key atrule">key-resolver</span><span class="token punctuation">:</span> <span class="token string">"#&#123;@myCustomKeyResolver&#125;"</span>            <span class="token comment"># 向令牌桶中加入令牌的速率（每秒加入的令牌数），不会超过令牌桶总容量</span>            <span class="token key atrule">redis-rate-limiter.replenishRate</span><span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token comment"># 令牌桶总容量</span>            <span class="token key atrule">redis-rate-limiter.burstCapacity</span><span class="token punctuation">:</span> <span class="token number">50</span>            <span class="token comment"># 每个请求消耗的令牌数</span>            <span class="token key atrule">redis-rate-limiter.requestedTokens</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">client-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 172.16.246.27    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> redis@wanshifu2017.com    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">1984</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看，通过对 <code>replenishRate</code> 、<code>burstCapacity</code> 、<code>requestedTokens</code> 三个变量的控制就可以达到我们想要的限流指标。其中 <code>replenishRate</code> 控制每秒产生的令牌数，这是核心参数，代表我们所期望的服务所能提供的 <code>QPS</code>，而 <code>burstCapacity</code> 控制令牌桶容量，代表我们希望限流提供一定的弹性，以应对某一时间点突发的请求量飙升。<code>requestedTokens</code> 则控制单个请求所消耗的令牌数，因为在部分场景下我们可能希望对某些路由采取权重分配。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">RedisReactiveAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span><span class="token class-name">GatewayAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">ReactiveRedisTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">GatewayRedisAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">RedisScript</span> <span class="token function">redisRequestRateLimiterScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DefaultRedisScript</span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisScript<span class="token punctuation">.</span><span class="token function">setScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"META-INF/scripts/request_rate_limiter.lua"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> redisScript<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> <span class="token class-name">RedisRateLimiter</span> <span class="token function">redisRateLimiter</span><span class="token punctuation">(</span><span class="token class-name">ReactiveStringRedisTemplate</span> redisTemplate<span class="token punctuation">,</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token class-name">RedisRateLimiter</span><span class="token punctuation">.</span>REDIS_SCRIPT_NAME<span class="token punctuation">)</span> <span class="token class-name">RedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span> redisScript<span class="token punctuation">,</span><span class="token class-name">ConfigurationService</span> configurationService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisRateLimiter</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">,</span> redisScript<span class="token punctuation">,</span> configurationService<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们的项目 <code>classpath</code> 下存在相应依赖的时候，<code>RedisRateLimiter</code> 会在 <code>GatewayRedisAutoConfiguration</code> 中被自动装配，同时我们可以看到通过 <code>RedisScript</code> 对象引用了一个 <code>lua</code> 脚本，通过 <code>Redis</code> 缓存控制限流变量的逻辑就在其中，我们可以找到这个脚本文件：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> tokens_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">-- 剩余令牌数缓存KEY</span><span class="token keyword">local</span> timestamp_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">-- 最后一次更新时间缓存KEY</span><span class="token comment">--redis.log(redis.LOG_WARNING, "tokens_key " .. tokens_key)</span><span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">-- 每秒产生的令牌数</span><span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">-- 令牌桶总容量</span><span class="token keyword">local</span> now <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">-- 当前时间戳</span><span class="token keyword">local</span> requested <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">-- 本次请求消耗的令牌数</span><span class="token keyword">local</span> fill_time <span class="token operator">=</span> capacity<span class="token operator">/</span>rate <span class="token comment">-- 填充满令牌桶所需的时间</span><span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fill_time<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">-- 缓存过期时间</span><span class="token comment">--redis.log(redis.LOG_WARNING, "rate " .. ARGV[1])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "capacity " .. ARGV[2])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "now " .. ARGV[3])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "requested " .. ARGV[4])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "filltime " .. fill_time)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "ttl " .. ttl)</span><span class="token keyword">local</span> last_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_tokens <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_tokens <span class="token operator">=</span> capacity <span class="token comment">-- 若缓存不存在，将剩余令牌数重置为最大值</span><span class="token keyword">end</span><span class="token comment">--redis.log(redis.LOG_WARNING, "last_tokens " .. last_tokens)</span><span class="token keyword">local</span> last_refreshed <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_refreshed <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_refreshed <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">-- 若最后一次更新时间不存在，重置为0</span><span class="token keyword">end</span><span class="token comment">--redis.log(redis.LOG_WARNING, "last_refreshed " .. last_refreshed)</span><span class="token keyword">local</span> delta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> now<span class="token operator">-</span>last_refreshed<span class="token punctuation">)</span> <span class="token comment">--当前时间与最后一次更新时间的差值</span><span class="token keyword">local</span> filled_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> last_tokens<span class="token operator">+</span><span class="token punctuation">(</span>delta<span class="token operator">*</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 根据时间差值补充令牌数，计算出补充后的总数量</span><span class="token keyword">local</span> allowed <span class="token operator">=</span> filled_tokens <span class="token operator">>=</span> requested <span class="token comment">-- 若补充后的总令牌数不小于本地请求所需的令牌数，则请求被允许</span><span class="token keyword">local</span> new_tokens <span class="token operator">=</span> filled_tokens<span class="token keyword">local</span> allowed_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> allowed <span class="token keyword">then</span>  new_tokens <span class="token operator">=</span> filled_tokens <span class="token operator">-</span> requested <span class="token comment">-- 若请求被允许，计算新的剩余令牌数</span>  allowed_num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token comment">--redis.log(redis.LOG_WARNING, "delta " .. delta)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "filled_tokens " .. filled_tokens)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "allowed_num " .. allowed_num)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "new_tokens " .. new_tokens)</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> new_tokens<span class="token punctuation">)</span> <span class="token comment">-- 更新剩余令牌数</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> now<span class="token punctuation">)</span> <span class="token comment">-- 更新时间戳</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span> allowed_num<span class="token punctuation">,</span> new_tokens <span class="token punctuation">&#125;</span> <span class="token comment">-- 返回限流结果及剩余令牌数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中主要的逻辑我已经通过注解进行标注，比较有意思的是对于令牌的生产 <code>Spring</code> 并没有采用定时器实时更新的方式，而是采用一种惰性更新的方式，只有请求再次去访问时才进行一次计算。另外 <code>Spring</code> 对于令牌数量的缓存时间设定为填充满令牌桶所需的时间的两倍，个人认为这是一种权衡的结果，这意味着每秒产生的令牌数与令牌桶容量越接近，这个缓存时间就越短，这是相对合理的，试想一下，如果瞬间就可以将令牌桶补充满，那么这个缓存的存在意义就不大，并且如果我们基于用户进行限流，那么部分用户的请求间隔可能是很长的，我们并没有必要长时间维护该用户的缓存浪费 <code>Redis</code> 的内存资源，到了使用时再重置即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud Gateway </tag>
            
            <tag> Flow Control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据批量处理优化</title>
      <link href="/2019/09/29/shu-ju-pi-liang-chu-li-you-hua/"/>
      <url>/2019/09/29/shu-ju-pi-liang-chu-li-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="整体概要设计"><a href="#整体概要设计" class="headerlink" title="整体概要设计"></a>整体概要设计</h2><hr><p><img src="https://ethanzhang-1256933438.cos.ap-shanghai.myqcloud.com/blog/imagesbatch-export.png" alt="批量导出设计"></p><ul><li>针对每一个导出请求，构建 <code>ExportTask</code> 导出任务。</li><li>针对每一个导出任务，对其分配 <code>BlockingQueue</code> 阻塞式队列。（该队列主要用于生产者任务与消费者之间的缓冲，解耦两者逻辑，避免生产者线程与消费者线程串行相互等待，同时该队列具有最大容量限制，避免内存溢出）</li><li>针对每一个导出任务，构建 <code>ProducerTask</code> 生产者任务，该任务负责从数据库中拉取原始数据，之后对数据进行组装，最后将结果数据排序后入队。（本功能要求导出数据有序）</li><li>针对每一个导出任务，构建 <code>ConsumerTask</code> 消费者任务，该任务负责不断从队列中取出结果数据，将结果数据写入结果文件中。</li><li>针对一个 <code>ProducerTask</code> 生产者任务，对其分配 N 个 <code>ProcessTask</code> 数据组装任务，并行处理，将原始数据组装为可导出的结果数据。（在本功能中此过程占据主要耗时，是性能瓶颈所在，故对其分配主要线程资源）</li></ul><h2 id="整体优化思路"><a href="#整体优化思路" class="headerlink" title="整体优化思路"></a>整体优化思路</h2><hr><ul><li><p>在此实现中 <code>BlockingQueue</code> 的使用至关重要，作为 JDK 给我们提供的阻塞式队列，此队列在异步编程中具有广发的使用价值（例如线程池 <code>ThreadPoolExecutor</code> 中的 <code>workQueue</code> 队列也是基于此实现）。在本次重构中，此队列的主要作用在于作为生产者线程与消费者线程间的缓冲区，生产者只管写入数据，无需关心消费者进度，消费者只管消费数据，无需关心生产者进度，但是生产消费速度本身不可控，两者无法彻底协调，因此队列必须是阻塞式的。假如队列满，生产者线程进入阻塞状态，消费者继续消费，假如队列空，消费者线程进入阻塞状态，生产者继续生产。在本实现中，由于生产者缓慢而消费者迅速，所以采用多线程写入，单线程取出的模型，尽可能协调两者速率，避免长时间相互等待。</p></li><li><p>众所周知，我们可以把程序分为三种类型，计算密集型、内存密集型和 I/O密集型。在实际场景中，一个程序往往同时包含了这三种操作，但是其比重是不同的，一个程序必然具有某一种偏向。一般来讲，一个程序中 I/O 操作越频繁，那么我们可以说这个程序偏向于 I/O 密集型，对于这一类程序，多线程所带来的吞吐量提升往往是革命性的。原因很简单，大量的网络 I/O 或磁盘 I/O 必然导致线程频繁被挂起，被挂起的线程是不需要占用 CPU 时间片的，如果这时候程序中并没有其他并发任务需要被执行，那么相当于 CPU 被闲置了，性能没有得到充分压榨，从大局来看，也就意味着整个系统的吞吐量下降了。在本示例中，<code>ProcessTask</code> 所承担的职责是将数据库原始数据转换为可导出的结果数据，在此过程中需要请求大量接口获取所需数据（大量网络 I/O 操作），每一次接口请求都存在响应时间，线程被挂起，但采用多线程并发处理情况则不用，若 A 线程被挂起，CPU 依然可以切换到 B 线程进行计算操作，在线程上下文切换的过程中 CPU 整体的利用率是大幅提升的，在现代多核 CPU 下提升则更为明显。</p></li><li><p>如何有效控制单个请求的内存占用量，大量的软件问题本质是对于时间复杂度和空间复杂度的权衡，在此示例中，无论一个请求需要导出几百量级的数据还是十万级的数据量，它所能占用的内存应该是有一个最大限度的。不能因为一个请求的失控触发OOM导致服务器宕机。因此这里将 <code>BlockingQueue</code> 的作用域和生命周期限定于一个请求中，不采用多请求共享的方式，队列随请求生而生，请求结束，无论成功与否，该请求所占用的资源都必须被释放。</p></li></ul><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><hr><h3 id="ExportTask"><a href="#ExportTask" class="headerlink" title="ExportTask"></a>ExportTask</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>export<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BusException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>importapi<span class="token punctuation">.</span>domains<span class="token punctuation">.</span>emums<span class="token punctuation">.</span></span><span class="token class-name">ExportType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>importapi<span class="token punctuation">.</span>domains<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>export<span class="token punctuation">.</span></span><span class="token class-name">ExportContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Instant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Supplier</span><span class="token punctuation">;</span><span class="token comment">/** * 批量导出任务，一个导出任务拆分为  * 生产者任务 &#123;@link AbstractProducerTask&#125; 可并发生产者任务 &#123;@link AbstractConcurrentProducerTask&#125; * 消费者任务 &#123;@link AbstractConsumerTask&#125; * 数据中间处理任务 &#123;@link AbstractProcessTask&#125; * 阻塞式队列作为中间缓冲 &#123;@link BlockingQueue&#125; * 数据源（DB） -> 生产者（producer） -> 数据中间处理（process） -> 队列（queue） -> 消费者（consumer） -> 结果文件（file）  * @author zhangyifan@wshifu.com */</span>  <span class="token annotation punctuation">@Getter</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractExportTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Exportable</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** * 队列容量  */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_QUEUE_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">/** * 最大等待时间（30分钟）  */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_MAX_EXPORT_MILLIS <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** * 导出上下文  */</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">;</span>    <span class="token comment">/** * 阻塞式队列  */</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">;</span>    <span class="token comment">/** * 生产者线程  */</span>  <span class="token keyword">private</span> <span class="token class-name">AbstractProducerTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> producer<span class="token punctuation">;</span>    <span class="token comment">/** * 消费者线程  */</span>  <span class="token keyword">private</span> <span class="token class-name">AbstractConsumerTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">;</span>    <span class="token comment">/** * 结果文件  */</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">File</span> file<span class="token punctuation">;</span>    <span class="token comment">/** * 线程池  */</span>  <span class="token keyword">private</span> <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">;</span>    <span class="token comment">/** * 缓存管理  */</span>  <span class="token keyword">private</span> <span class="token class-name">CacheManager</span> cacheManager<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractExportTask</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">,</span> <span class="token keyword">long</span> exportId<span class="token punctuation">,</span> <span class="token class-name">ExportType</span> exportType<span class="token punctuation">,</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        exportContext<span class="token punctuation">.</span><span class="token function">setStart</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> exportCount <span class="token operator">=</span> <span class="token function">getExportCount</span><span class="token punctuation">(</span>exportContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exportCount <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusException</span><span class="token punctuation">(</span><span class="token string">"520"</span><span class="token punctuation">,</span> <span class="token string">"没有查询到数据，无法导出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        exportContext<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> exportId<span class="token punctuation">,</span> exportType<span class="token punctuation">,</span> exportCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>exportContext <span class="token operator">=</span> exportContext<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheManager <span class="token operator">=</span> <span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>exportCount<span class="token punctuation">,</span> DEFAULT_QUEUE_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>file <span class="token operator">=</span> <span class="token function">generateFile</span><span class="token punctuation">(</span>exportContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>producer <span class="token operator">=</span> <span class="token function">generateProducer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> exportContext<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>consumer <span class="token operator">=</span> <span class="token function">generateConsumer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> exportContext<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">File</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">preExport</span><span class="token punctuation">(</span>exportContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> producerTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> consumerTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>producerTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>consumerTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* * 此处阻塞，等待生产者消费者线程结束，最大等待时间：30分钟  * 超时则视为失败，避免导出长时间无结果  * 一旦生产者或消费者线程抛出异常，此处可以捕获，判定该次导出失败  */</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            producerTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>DEFAULT_MAX_EXPORT_MILLIS<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            consumerTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>DEFAULT_MAX_EXPORT_MILLIS<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusException</span><span class="token punctuation">(</span><span class="token string">"export producer/consumer error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            exportContext<span class="token punctuation">.</span><span class="token function">getExportCountDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span>DEFAULT_MAX_EXPORT_MILLIS<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusException</span><span class="token punctuation">(</span><span class="token string">"export timeout (over 30 minutes)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        exportContext<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">postExport</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 获取预期耗时（毫秒数）  */</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getExpectedCostMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>exportContext<span class="token punctuation">.</span><span class="token function">getExportCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> cacheManager<span class="token punctuation">.</span><span class="token function">getUnitCost</span><span class="token punctuation">(</span>exportContext<span class="token punctuation">.</span><span class="token function">getExportType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 批量导出前置处理  */</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">preExport</span><span class="token punctuation">(</span><span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/** * 批量导出后置处理  */</span>  <span class="token keyword">protected</span> <span class="token class-name">File</span> <span class="token function">postExport</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> file<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 获取批量导出总数  */</span>  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getExportCount</span><span class="token punctuation">(</span><span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** * 生成结果文件  */</span>  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">File</span> <span class="token function">generateFile</span><span class="token punctuation">(</span><span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** * 构建生产者任务  * @param queue 队列  * @param exportContext 导出上下文  * @param executor 线程池  */</span>  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">AbstractProducerTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">generateProducer</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">,</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** * 构建消费者任务  * @param queue 队列  * @param exportContext 导出上下文  * @param file 结果文件  */</span>  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">AbstractConsumerTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">generateConsumer</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">,</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">,</span> <span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>executor</code>：线程池</li><li><code>exportCount</code>：导出总数据量</li><li><code>exportCountDown</code>：导出任务倒计数器（每写入文件一条数据则递减，为零时代表批量导出任务完成）</li><li><code>queue</code>：阻塞式队列</li><li><code>producer</code>：生产者任务</li><li><code>consumer</code>：消费者任务</li><li><code>file</code>：结果文件</li><li><code>start</code>：开始时间戳（用于计算任务总耗时）</li><li><code>conditions</code>：数据查询条件（取决于具体业务）</li></ul><p><code>Exportable</code> 类似于标记性接口，没有实质内容，用于表示可导出对象，是 <code>ExportTask</code> 的目标结果。<code>exportCountDown.await()</code> 方法在批量导出任务未完成时会被阻塞，但是设定了最大等待时间，代表着业务所能接受的最长导出时间。若超时则认为任务失败，释放资源。<code>getRate()</code> 方法可以返回当前导出进度，便于对任务进行监控。<code>generateProducer()</code> 方法用于构建生产者任务，交给具体子类实现，<code>generateConsumer()</code> 方法同理。此处可以理解为是一种模板方法模式（Template Method），在抽象类中进行流程规范，子类进行业务实现。总之 <code>ExportTask</code> 中主要负责初始化资源，以及启动生产者消费者任务。</p><h3 id="ProducerTask"><a href="#ProducerTask" class="headerlink" title="ProducerTask"></a>ProducerTask</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>export<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BusException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>importapi<span class="token punctuation">.</span>domains<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>export<span class="token punctuation">.</span></span><span class="token class-name">ExportContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span><span class="token punctuation">;</span><span class="token comment">/** * 生产者任务  * @author zhangyifan@wshifu.com */</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Getter</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractProducerTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Exportable</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractProducerTask</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">,</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>exportContext <span class="token operator">=</span> exportContext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 1.循环调用process()获取单批处理结果  * 2.根据需要对结果数据进行排序  * 3.数据依次入队  */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> exportableList <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">nonNull</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">needSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    exportableList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">getComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> exportable <span class="token operator">:</span> exportableList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>exportable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                exportableList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">postProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">hasMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"producer task finish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"producer task error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 一旦生产者线程异常，将倒计数器归零，避免消费者线程长时间阻塞</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>exportContext<span class="token punctuation">.</span><span class="token function">getExportCountDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                exportContext<span class="token punctuation">.</span><span class="token function">getExportCountDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusException</span><span class="token punctuation">(</span><span class="token string">"producer task error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 是否有更多数据  */</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">hasMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 后置处理  */</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/** * 是否需要排序  */</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">needSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 获取比较器  */</span>  <span class="token keyword">protected</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">hashCode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 处理单批数据  */</span>  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ProducerTask</code> 中主要承担的职责为当 <code>hasMore()</code> 方法返回为 <code>true</code> 时，调用 <code>process()</code> 方法将一批原始数据处理为 <code>Exportable</code> 类型的结果数据，之后根据需求进行排序，最后入队。此处为抽象化的流程，不捆绑多线程的实现，提供拓展性。</p><h3 id="ConcurrentProducerTask"><a href="#ConcurrentProducerTask" class="headerlink" title="ConcurrentProducerTask"></a>ConcurrentProducerTask</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>export<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>importapi<span class="token punctuation">.</span>domains<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>export<span class="token punctuation">.</span></span><span class="token class-name">ExportContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Supplier</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span><span class="token punctuation">;</span><span class="token comment">/** * 并发生产任务，将生产任务拆分为多个子任务，多线程执行后合并结果  * 扩展 &#123;@link AbstractProducerTask&#125; * @author zhangyifan@wshifu.com */</span>  <span class="token annotation punctuation">@Getter</span>  <span class="token annotation punctuation">@Setter</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractConcurrentProducerTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Exportable</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProducerTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** * 默认单批处理数据量  */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_PROCESS_COUNT <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token comment">/** * 单批处理最大等待时间  */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_MAX_PROCESS_MILLIS <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CacheManager</span> cacheManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> processCount<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractConcurrentProducerTask</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">,</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> exportContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheManager <span class="token operator">=</span> <span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>processCount <span class="token operator">=</span> DEFAULT_PROCESS_COUNT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * @see CompletableFuture 任务编排  * 1.&#123;@link #getProcessTaskList()&#125; 获取子任务列表  * 2.&#123;@link CompletableFuture#allOf(CompletableFuture[])&#125; 合并子任务  * 3.&#123;@link CompletableFuture#supplyAsync(Supplier)&#125; 并发执行所有子任务  * 4.&#123;@link CompletableFuture#join()&#125; 等待所有子任务完成后合并结果返回  */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractProcessTask</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> processTaskList <span class="token operator">=</span> <span class="token function">getProcessTaskList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futureTaskList <span class="token operator">=</span> processTaskList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>processTask <span class="token operator">-></span>                <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span>processTask<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> futureTaskArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span>futureTaskList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> completableFutures <span class="token operator">=</span> futureTaskList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>futureTaskArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> allFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>completableFutures<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> resFuture <span class="token operator">=</span> allFuture<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>v <span class="token operator">-></span>                futureTaskList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token operator">::</span><span class="token function">join</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>DEFAULT_MAX_PROCESS_MILLIS<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 获取子任务列表，具体子任务由子类实现  */</span>  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractProcessTask</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getProcessTaskList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ConcurrentProducerTask</code> 继承了 <code>ProducerTask</code>，上文说过 <code>ProducerTask</code> 中不捆绑多线程并发实现，所以便在此实现。在单批数据 <code>process()</code> 过程中，针对单条数据，对其构建数据转换任务 <code>ProcessTask</code>，随后将任务统一交给 <code>executor</code> 线程池处理，处理完后返回处理结果。<code>getProcessTaskList()</code> 方法构建子任务列表，交给具体业务实现完成。</p><h3 id="ProcessTask"><a href="#ProcessTask" class="headerlink" title="ProcessTask"></a>ProcessTask</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>export<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>importapi<span class="token punctuation">.</span>domains<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>export<span class="token punctuation">.</span></span><span class="token class-name">ExportContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Supplier</span><span class="token punctuation">;</span><span class="token comment">/** * 数据处理任务  * @author zhangyifan@wshifu.com */</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Getter</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractProcessTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Exportable</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CacheManager</span> cacheManager<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractProcessTask</span><span class="token punctuation">(</span><span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>exportContext <span class="token operator">=</span> exportContext<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheManager <span class="token operator">=</span> <span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 单条数据处理异常，也需要更新进度，避免消费者线程长时间阻塞</span>  exportContext<span class="token punctuation">.</span><span class="token function">getExportCountDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cacheManager<span class="token punctuation">.</span><span class="token function">incrementExportCount</span><span class="token punctuation">(</span>exportContext<span class="token punctuation">.</span><span class="token function">getExportId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"process task error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 处理单位数据  */</span>  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">T</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ProcessTask</code> 中逻辑较为简单，将单条原始数据转换为 <code>Exportable</code> 结果数据，具体逻辑交给子类实现。</p><h3 id="ConsumerTask"><a href="#ConsumerTask" class="headerlink" title="ConsumerTask"></a>ConsumerTask</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>export<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BusException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>importapi<span class="token punctuation">.</span>domains<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>export<span class="token punctuation">.</span></span><span class="token class-name">ExportContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token comment">/** * 消费者任务  * @author zhangyifan@wshifu.com */</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Getter</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractConsumerTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Exportable</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">File</span> file<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CacheManager</span> cacheManager<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractConsumerTask</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">,</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">,</span> <span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>exportContext <span class="token operator">=</span> exportContext<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>file <span class="token operator">=</span> file<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheManager <span class="token operator">=</span> <span class="token class-name">ApplicationContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 1.循环从队列中取出数据  * 2.调用process()处理数据，写入文件，更新导出进度  * 3.直到倒计数器递减为0，所有数据消费完毕  */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>exportContext<span class="token punctuation">.</span><span class="token function">getExportCountDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> exportableList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                exportableList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">drainTo</span><span class="token punctuation">(</span>exportableList<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">process</span><span class="token punctuation">(</span>exportableList<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> exportableList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    exportContext<span class="token punctuation">.</span><span class="token function">getExportCountDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 将导出进度更新到redis，解决分布式问题</span>  cacheManager<span class="token punctuation">.</span><span class="token function">incrementExportCount</span><span class="token punctuation">(</span>exportContext<span class="token punctuation">.</span><span class="token function">getExportId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">postProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"consumer task finish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"consumer task error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusException</span><span class="token punctuation">(</span><span class="token string">"consumer task error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** * 后置处理  */</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/** * 释放资源  */</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/** * 处理数据  */</span>  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> exportableList<span class="token punctuation">,</span> <span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ConsumerTask</code> 的职责为不断从阻塞式队列中 <code>take()</code> 数据，随后调用 <code>process()</code> 方法进行处理。</p><h3 id="ConsumerToExcelTask"><a href="#ConsumerToExcelTask" class="headerlink" title="ConsumerToExcelTask"></a>ConsumerToExcelTask</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>export<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">ExcelWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>write<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span></span><span class="token class-name">WriteSheet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>write<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>fill<span class="token punctuation">.</span></span><span class="token class-name">FillConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>importapi<span class="token punctuation">.</span>domains<span class="token punctuation">.</span>emums<span class="token punctuation">.</span></span><span class="token class-name">ExportType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>wanshifu<span class="token punctuation">.</span>user<span class="token punctuation">.</span>importapi<span class="token punctuation">.</span>domains<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>export<span class="token punctuation">.</span></span><span class="token class-name">ExportContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BlockingQueue</span><span class="token punctuation">;</span><span class="token comment">/** * 消费数据至 EXCEL 任务  * 扩展 &#123;@link AbstractConsumerTask&#125; * @author zhangyifan@wshifu.com */</span>  <span class="token annotation punctuation">@Getter</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerToExcelTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Exportable</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConsumerTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ExcelWriter</span> writer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">WriteSheet</span> sheet<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">FillConfig</span> fillConfig<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ConsumerToExcelTask</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">,</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">,</span> <span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> exportContext<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ConsumerToExcelTask</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">,</span> <span class="token class-name">ExportContext</span> exportContext<span class="token punctuation">,</span> <span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">FillConfig</span> fillConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> exportContext<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fillConfig <span class="token operator">=</span> fillConfig<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> exportableList<span class="token punctuation">,</span> <span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            writer<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>exportableList<span class="token punctuation">,</span> fillConfig<span class="token punctuation">,</span> sheet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"export to excel error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            writer<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExportType</span> exportType <span class="token operator">=</span> <span class="token function">getExportContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExportType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> templateSuffix <span class="token operator">=</span> exportType<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">URL</span> resource <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"templates/export_template_%s.xlsx"</span><span class="token punctuation">,</span> templateSuffix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> templatePath <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token operator">?</span> resource<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>writer <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withTemplate</span><span class="token punctuation">(</span>templatePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sheet <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">writerSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于本业务中主要需求为将结果数据写至 Excel 中，所以 <code>ConsumerToExcelTask</code> 作为此实现，其中依赖了阿里开源组件 <a href="https://github.com/alibaba/easyexcel">easyexcel</a> 进行 Excel 读写操作，避免重复造轮子。本示例中提供的代码均为抽象上层代码，具体业务实现需对其进行拓展，此处不进行探讨。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件驱动之 Spring Cloud Bus</title>
      <link href="/2019/09/25/shi-jian-qu-dong-zhi-spring-cloud-bus/"/>
      <url>/2019/09/25/shi-jian-qu-dong-zhi-spring-cloud-bus/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>在分布式系统中我们往往需要大量的状态广播，以通知系统中各个节点，触发相关行为，例如用于保证分布式数据一致性或进行相关补偿行为。这时候事件驱动型的编程模型有利于我们处理相关问题，在一个节点发布一个事件，另外N个节点监听该事件作出相关反应，这种类似发布-订阅的模型我们往往会考虑利用消息中间件来实现。同样 Spring Cloud Bus 也需要依赖于MQ，我们知道 Spring Cloud Stream 在框架层面为我们抽象了一系列操作消息中间件（目前官方支持 Rabbit MQ，kafka）的API，而 Spring Cloud Bus 基于这些API实现的事件驱动模型几乎可以使我们无感知地在分布式节点之间实现事件监听机制。</em></p></blockquote><span id="more"></span><h2 id="服务内部的事件监听机制"><a href="#服务内部的事件监听机制" class="headerlink" title="服务内部的事件监听机制"></a>服务内部的事件监听机制</h2><hr><p>Spring提供了 <code>ApplicationEvent</code> 事件抽象和 <code>ApplicationListener</code> 事件监听器抽象为我们在服务内实现事件监听提供了支持。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">priv<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>deep<span class="token punctuation">.</span>in<span class="token punctuation">.</span>java<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EventListener</span><span class="token punctuation">;</span><span class="token comment">/** * @description: * @author: yixiezi1994@gmail.com * @date: 2019-09-25 16:32 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationEventDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListenerConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyApplicationEvent</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationListenerConfiguration</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span><span class="token class-name">MyApplicationEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMyApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">MyApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyApplicationEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>        <span class="token class-name">MyApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上文的 demo 所示，<code>ApplicationContext</code> 本身继承了 <code>ApplicationEventPublisher</code>，也就意味着 Spring 上下文本身就是一个事件发布器，调用其 <code>publishEvent</code> 方法即可发布事件，在这里我定义了一个 <code>MyApplicationEvent</code> ，在事件发布后被 <code>@EventListener(MyApplicationEvent.class)</code> 注解的方法所监听，执行相关业务逻辑，这就是一个简单的服务内事件驱动示例。</p><h2 id="Spring-Cloud-Bus-实现服务间事件监听"><a href="#Spring-Cloud-Bus-实现服务间事件监听" class="headerlink" title="Spring Cloud Bus 实现服务间事件监听"></a>Spring Cloud Bus 实现服务间事件监听</h2><hr><p>根据上文的示例我们知道在服务内通过 Spring 事件监听机制来解耦我们的业务是十分简洁的，那么我们能否实现在 A 服务 publish 一个 Event，使 B 服务的 Listener 监听到该事件呢。其实 Spring Coud Bus 正式为我们提供了这样的支持。目前 Spring 官方提供两种依赖 <code>spring-cloud-starter-bus-amqp</code> 和 <code>spring-cloud-starter-bus-kafka</code> ，分别支持两种消息中间件，本文中以 kafka 为例。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实 Spring Cloud Bus 基于 actuator 已经为我们提供了两种事件传播，<code>/actuator/bus-env</code> 修改上下文中的配置信息，<code>/actuator/bus-refresh</code> 用于刷新配置。为了达到远程传播事件的目的，Spring 中定义了 <code>RemoteApplicationEvent</code> 作为远程事件的抽象，该类继承了原有的 <code>ApplicationEvent</code>，以 <code>bus-env</code> 事件为例，<code>EnvironmentChangeRemoteApplicationEvent</code> 继承了 <code>RemoteApplicationEvent</code> ，当我们访问 <code>/actuator/bus-env</code> 地址时，服务发布了该事件，根据 actuator 的机制我们可以猜想这是在某个 Endpoint 中进行的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Endpoint</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"bus-env"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvironmentBusEndpoint</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBusEndpoint</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">EnvironmentBusEndpoint</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisher</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@WriteOperation</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">busEnvWithDestination</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Selector</span> <span class="token class-name">String</span> destination<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">publish</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EnvironmentChangeRemoteApplicationEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    destination<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@WriteOperation</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">busEnv</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">publish</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EnvironmentChangeRemoteApplicationEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>EnvironmentBusEndpoint</code> 中发布了该事件，但如此只是在服务内部发布了一个事件，我们并没有看到与传统的 <code>ApplicationEvent</code> 有何区别，那么该事件是如何在微服务节点间传输的呢？这时候就需要 Bus 消息总线的介入。当我们引入 <code>spring-cloud-starter-bus-kafka</code> 依赖后，<code>BusAutoConfiguration</code> 配置类会被自动装载。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">RemoteApplicationEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acceptLocal</span><span class="token punctuation">(</span><span class="token class-name">RemoteApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serviceMatcher<span class="token punctuation">.</span><span class="token function">isFromSelf</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">AckRemoteApplicationEvent</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cloudBusOutboundChannel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到其中声明了一个事件监听器，用于监听所有的 <code>RemoteApplicationEvent</code>，也就是说在前文中我们所发布的 <code>EnvironmentChangeRemoteApplicationEvent</code> 也会被此处接收，随后该事件被 Spring Cloud Stream 的消息通道广播到整个系统中（基于消息中间件，此处不详谈），那么另一端的服务如何接收到该事件呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@StreamListener</span><span class="token punctuation">(</span><span class="token class-name">SpringCloudBusClient</span><span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acceptRemote</span><span class="token punctuation">(</span><span class="token class-name">RemoteApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">AckRemoteApplicationEvent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">getTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>serviceMatcher<span class="token punctuation">.</span><span class="token function">isFromSelf</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventPublisher <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// If it's an ACK we are finished processing at this point</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serviceMatcher<span class="token punctuation">.</span><span class="token function">isForSelf</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventPublisher <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>serviceMatcher<span class="token punctuation">.</span><span class="token function">isFromSelf</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">getAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">AckRemoteApplicationEvent</span> ack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AckRemoteApplicationEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>serviceMatcher<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">getAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDestinationService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span><span class="token function">getDestinationService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cloudBusOutboundChannel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>ack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>ack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">getTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventPublisher <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// We are set to register sent events so publish it for local consumption,</span><span class="token comment">// irrespective of the origin</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SentApplicationEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span><span class="token function">getOriginService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getDestinationService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到只要另一端的服务也依赖于 Bus 消息总线，那么便会监听 Bus 用于传播事件的消息通道，经过一系列的判断，核心判断是如果该事件不是由自身节点所发布的，那么就把该事件发布到自身的上下文中。随后该事件被 <code>EnvironmentChangeListener</code> 接收到，执行更新配置信息的相关操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvironmentChangeListener</span><span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EnvironmentChangeRemoteApplicationEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">EnvironmentChangeListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">EnvironmentManager</span> env<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">EnvironmentChangeRemoteApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Received remote environment change request. Keys/values to update "</span><span class="token operator">+</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> values<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RemoteApplicationEvent</code> 之所以可以在服务间传播，是因为 Spring Cloud Bus 依赖于 Spring Cloud Stream 进行消息传输，而 Spring Cloud Stream 是对于不同消息中间件的一种封装和上层抽象，也就是说 MQ 在 Bus 总线中承担中间介质的角色，而我们在上层使用时几乎感知不到这一点，个人认为这就是 Spirng 优秀的封装抽象能力带给我们的思考和启发，也是探究源码实现最大的意义所在。</p><h2 id="自定义远程事件传播"><a href="#自定义远程事件传播" class="headerlink" title="自定义远程事件传播"></a>自定义远程事件传播</h2><hr><p>上文中我们讨论了源码中给我们提供的 <code>EnvironmentChangeRemoteApplicationEvent</code>，那么我自己能否自定义远程事件以支持我们的业务呢？基于 Spring 一贯强大的可拓展性，答案当然是肯定的。例如我想实现 A 服务发布一个添加用户的事件，B 服务监听到该事件后执行添加用户的操作。</p><p>自定义添加用户事件（注意：必须提供空参构造器，用于消息反序列化）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>api<span class="token punctuation">.</span>bus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>api<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">RemoteApplicationEvent</span><span class="token punctuation">;</span><span class="token comment">/** * @description: * @author: yixiezi1994@gmail.com * @date: 2019-09-24 20:53 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddUserRemoteApplicationEvent</span> <span class="token keyword">extends</span> <span class="token class-name">RemoteApplicationEvent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AddUserRemoteApplicationEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AddUserRemoteApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token class-name">String</span> originService<span class="token punctuation">,</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> originService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AddUserRemoteApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token class-name">String</span> originService<span class="token punctuation">,</span> <span class="token class-name">String</span> destinationService<span class="token punctuation">,</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> originService<span class="token punctuation">,</span> destinationService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在事件的接收方必须添加 <code>@RemoteApplicationEventScan</code> 注解扫描自定义事件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>provider</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>api<span class="token punctuation">.</span>mq<span class="token punctuation">.</span></span><span class="token class-name">SpringCloudDemoProcessor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span></span><span class="token class-name">RemoteApplicationEventScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span></span><span class="token class-name">EnableHystrix</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableBinding</span><span class="token punctuation">;</span><span class="token comment">/** * @description: 服务提供方 * @author: yixiezi1994@gmail.com * @date: 2019-08-26 19:56 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableHystrix</span><span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span><span class="token class-name">SpringCloudDemoProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RemoteApplicationEventScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.just1984.spring.cloud.demo.service.api.bus"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringCloudDemoServiceProviderApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringCloudDemoServiceProviderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事件发布，在 <code>RemoteApplicationEvent</code> 的构造器中有两个参数 <code>originService</code> 和 <code>destinationService</code>，分别代表事件源服务和事件目标服务，通过相应的匹配规则我们可以将事件传播到特定的 1 个或 N 个服务，在这里我从 Consumer 服务发布事件到 Provider 服务的所有实例，<code>destinationService</code> 的值为 <code>spring-cloud-demo-service-provider:**</code>，其中 <code>spring-cloud-demo-service-provider</code> 是服务 ID，<code>**</code> 代表任意端口号。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>api<span class="token punctuation">.</span>bus<span class="token punctuation">.</span></span><span class="token class-name">AddUserRemoteApplicationEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span></span><span class="token class-name">ProviderApi</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>api<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>bus<span class="token punctuation">.</span></span><span class="token class-name">BusProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @description: * @author: yixiezi1994@gmail.com * @date: 2019-09-24 20:55 */</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"remoteEventClientService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteEventClientServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ClientService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring-cloud-demo-service-provider.application.name&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> destinationService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ProviderApi</span> providerApi<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ApplicationEventPublisher</span> publisher<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BusProperties</span> busProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        publisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AddUserRemoteApplicationEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> busProperties<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> destinationService <span class="token operator">+</span> <span class="token string">":**"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> providerApi<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        providerApi<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费端事件监听，执行业务操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>bus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>api<span class="token punctuation">.</span>bus<span class="token punctuation">.</span></span><span class="token class-name">AddUserRemoteApplicationEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>just1984<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ProviderService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EnvironmentChangeRemoteApplicationEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">RefreshRemoteApplicationEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EventListener</span><span class="token punctuation">;</span><span class="token comment">/** * @description: * @author: yixiezi1994@gmail.com * @date: 2019-09-24 19:49 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteApplicationEventListenerConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ProviderService</span> providerService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span><span class="token class-name">AddUserRemoteApplicationEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAddUserRemoteApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">AddUserRemoteApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"监听到AddUserRemoteApplicationEvent事件：【&#123;&#125;】"</span><span class="token punctuation">,</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Bus </tag>
            
            <tag> Event Driven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码感悟之 Spring Cloud Ribbon</title>
      <link href="/2019/09/20/yuan-ma-gan-wu-zhi-spring-cloud-ribbon/"/>
      <url>/2019/09/20/yuan-ma-gan-wu-zhi-spring-cloud-ribbon/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>我们知道，Spring Cloud Ribbon 是 Spring Cloud 技术栈中用于微服务架构中服务间调用实现负载均衡功能的组件。在此实现中，Spring官方采用客户端负载均衡（Client Side Load Balancer）可谓有利有弊，一方面，客户端负载均衡由于相关配置由单个客户端维护，具有稳定性高，相互几乎无影响的优点，提高了负载均衡整体的可用性，同时，在升级相关依赖时，需要对各客户端进行单独升级，无疑提高了系统的维护成本。但无论如何，Spring Cloud Ribbon 对于负载均衡的实现与设计是值得我们感悟和思考的，其中的一些设计思想对我们设计自己的程序时有莫大的启发。</em></p></blockquote><span id="more"></span><h2 id="在不使用-Eureka-的情况下使用-Ribbon"><a href="#在不使用-Eureka-的情况下使用-Ribbon" class="headerlink" title="在不使用 Eureka 的情况下使用 Ribbon"></a>在不使用 Eureka 的情况下使用 Ribbon</h2><hr><p>（此处重点探讨Ribbon的实现机制，故尽量不引入其他依赖）</p><p>服务提供方接口 demo （<a href="http://localhost:8090/getPort%EF%BC%89">http://localhost:8090/getPort）</a> :<br>接口逻辑很简单，返回服务实例的端口号，用于区分实际访问了哪个实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getPort"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> port<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务消费方接口 demo （&lt;<a href="http://localhost:8070/getPort%EF%BC%89%EF%BC%9A">http://localhost:8070/getPort）：</a></p><p>服务引导类（添加 Ribbon 客户端注解）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span><span class="token string">"provider"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConsumerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入 <code>spring-cloud-starter-netflix-ribbon</code> 依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置服务实例列表（如果集成 Eureka 会自动从注册中心获取，无需硬编码配置）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8070</span><span class="token key atrule">provider</span><span class="token punctuation">:</span>  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>    <span class="token key atrule">listOfServers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8090</span><span class="token punctuation">,</span>localhost<span class="token punctuation">:</span><span class="token number">8091</span><span class="token punctuation">,</span>localhost<span class="token punctuation">:</span><span class="token number">8092</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>装配 <code>RestTemplate</code>，并添加 <code>@LoadBalanced</code> 标示为需要客户端负载均衡</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token class-name">RestTemplateBuilder</span> restTemplateBuilder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> restTemplateBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>RestTemplate</code> 执行GET请求调用服务方接口获取服务实例的端口号并返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getPort"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://provider/getPort"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以发现，当我们在消费方启动引导类上添加 <code>@RibbonClient(&quot;provider&quot;)</code> 注解后，使用 <code>RestTemplate</code> 访问接口 <code>http://provider/getPort</code> 时会自动对地址进行解析，而我们所做的只是在装配 <code>RestTemplate</code> 时增加了注解 <code>@LoadBalanced</code> ，实际此时 Spring 底层已经帮我们实现了负载均衡去请求 Provider 服务，我们可以猜测 Spring 底层是对 <code>RestTemplate</code> 做了文章，那么它究竟是怎么做的呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RestTemplateCustomizer</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以在 Spring 中找到 <code>RestTemplateCustomizer</code> 这个接口，这里可以理解成是一种较为简化的访问者模式，该接口的实现作为 <code>RestTemplate</code> 的 Visitor，通过相关 api 达到增强 <code>RestTemplate</code> 的目的，而 Ribbon 也是通过此种方式来嵌入负载均衡的逻辑。<br>在 <code>spring-cloud-commons</code> 依赖中我们一个配置类 <code>LoadBalancerAutoConfiguration</code>，通过该类的命名我们可以知道这是一个被 Spring Boot 应用自动装配的类（至于 Spring 为什么要将该类放在 commons 这样较为核心的包中，个人理解这也是一种面向接口编程的设计思想，如此 Spring Cloud 的核心包不需要强依赖于 Ribbon 这样的具体实现，提供更大的拓展性），在该类中我们可以看到这样一段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@LoadBalanced</span> <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RestTemplate</span><span class="token punctuation">></span></span> restTemplates <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">SmartInitializingSingleton</span> <span class="token function">loadBalancedRestTemplateInitializerDeprecated</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">RestTemplateCustomizer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> restTemplateCustomizers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> restTemplateCustomizers<span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span>customizers <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">:</span> <span class="token class-name">LoadBalancerAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>restTemplates<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RestTemplateCustomizer</span> customizer <span class="token operator">:</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>restTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在此配置类会获取上下文中所有被 <code>@LoadBalanced</code>（@LoadBalanced 是对注解 @Qualifier 的派生，可以理解成一种特定的限定符，用于标定某些特定的 bean）注解的 <code>RestTemplate</code> 实例，然后在 <code>SmartInitializingSingleton</code>（SmartInitializingSingleton中只有一个方法afterSingletonsInstantiated()，其作用是是 在spring容器管理的所有单例对象（非懒加载对象）初始化完成之后调用的回调接口。）生命周期回调中获取到所有的 <code>RestTemplateCustomizer</code> 实例对 <code>RestTemplate</code> 进行修饰，使之具有拓展功能。显然，Ribbon 必然也实现了<code>RestTemplateCustomizer</code>，在 <code>LoadBalancerAutoConfiguration</code> 可以看到如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"org.springframework.retry.support.RetryTemplate"</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerInterceptorConfig</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">LoadBalancerInterceptor</span> <span class="token function">ribbonInterceptor</span><span class="token punctuation">(</span><span class="token class-name">LoadBalancerClient</span> loadBalancerClient<span class="token punctuation">,</span><span class="token class-name">LoadBalancerRequestFactory</span> requestFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadBalancerInterceptor</span><span class="token punctuation">(</span>loadBalancerClient<span class="token punctuation">,</span> requestFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> <span class="token class-name">RestTemplateCustomizer</span> <span class="token function">restTemplateCustomizer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">LoadBalancerInterceptor</span> loadBalancerInterceptor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> restTemplate <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClientHttpRequestInterceptor</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>restTemplate<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>loadBalancerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>restTemplate<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>RestTemplate</code> 中被添加了一个 <code>LoadBalancerInterceptor</code> 拦截器，并且这个拦截器的构造器中传入了 <code>LoadBalancerClient</code> 实例，而这个负载均衡客户端正是 Ribbon 所提供的，可以猜测是这个拦截器起了作用，我们可以进一步深入探究在 <code>RestTemplate</code> 被 Ribbon 修饰后，我们的请求到底是怎么被处理的。</p><p>打开 DEBUG 模式，可以看到我们装配的 <code>RestTemplate</code> 已经被 Ribbon 所修饰，持有了一个负载均衡拦截器。在处理请求的过程中，拦截器生效，执行 <code>LoadBalancerInterceptor#intercept</code> 方法，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ClientHttpResponse</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HttpRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">,</span><span class="token keyword">final</span> <span class="token class-name">ClientHttpRequestExecution</span> execution<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token class-name">URI</span> originalUri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> serviceName <span class="token operator">=</span> originalUri<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>serviceName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"Request URI does not contain a valid hostname: "</span> <span class="token operator">+</span> originalUri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancer<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestFactory<span class="token punctuation">.</span><span class="token function">createRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">,</span> execution<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该方法中实际调用负载均衡客户端 <code>RibbonLoadBalancerClient#execute</code> 方法执行请求。</p><h2 id="自定义-Ribbon-客户端相关配置"><a href="#自定义-Ribbon-客户端相关配置" class="headerlink" title="自定义 Ribbon 客户端相关配置"></a>自定义 Ribbon 客户端相关配置</h2><hr><p><code>RibbonClientConfiguration</code> 中 Ribbon 为我们提供了默认配置，例如 <code>IRule</code> <code>IPing</code> <code>ILoadBalancer</code> 等核心 bean 都已经被自动装配到 Spring 容器中，当然，这些 bean 无疑都被 <code>@ConditionalOnMissingBean</code> 注解，意味着可以被我们自行配置的同类型 bean 所覆盖，通过自定义相关接口的实现便可以嵌入我们的自定义代码逻辑，这也是贯穿 Spring Boot 的一种设计，为开发人员提供可插拔式的配置。以 <code>IPing</code> 为例，默认的策略为 <code>DummyPing</code> ，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DummyPing</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerPing</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">DummyPing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token class-name">Server</span> server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> clientConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>isAlive</code> 永远返回 true，也就意味着在不集成 Eureka（集成 Eureka 会采用服务健康检查机制，此处不详谈） 并不自定义策略的情况下 Ribbon 认为每个服务实例都是可用的，都有概率分配请求，这显然是一种比较粗暴的处理方式，我们可以借助 <code>spring-boot-starter-actuator</code> 提供的服务指标信息接口作为 Ribbon 进行 <code>IPing</code> 的依据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerRibbonConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IPing</span> <span class="token function">iPing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HealthCheckPing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HealthCheckPing</span> <span class="token keyword">implements</span> <span class="token class-name">IPing</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token class-name">Server</span> server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"http://%s/actuator/health"</span><span class="token punctuation">,</span> server<span class="token punctuation">.</span><span class="token function">getHostPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>UP<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"server instance &#123;&#125; not online!"</span><span class="token punctuation">,</span> server<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上 demo 所示，<code>HealthCheckPing</code> 被装配后，<code>isAlive</code> 方法会被定时调用探测目标服务健康状况，我们可以进一步探究它的实现机制。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">BaseLoadBalancer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">IRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">LoadBalancerStats</span> stats<span class="token punctuation">,</span>          <span class="token class-name">IPing</span> ping<span class="token punctuation">,</span> <span class="token class-name">IPingStrategy</span> pingStrategy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"LoadBalancer [&#123;&#125;]:  initialized"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ping <span class="token operator">=</span> ping<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pingStrategy <span class="token operator">=</span> pingStrategy<span class="token punctuation">;</span>    <span class="token function">setRule</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setupPingTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置定时任务</span>    lbStats <span class="token operator">=</span> stats<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其核心逻辑位于 <code>BaseLoadBalancer</code> 的构造方法中，可以看到调用了 <code>setupPingTask</code> 方法。也就是说当 <code>ILoadBalancer</code> 被装配时，该定时任务已经被设置。但是经过测试发现，该定时任务并不会在程序启动阶段执行，而是在对该服务进行首次请求时才开始以一定时间间隔（可配置）执行，并且请求会被阻塞，等待此次检查完成。这就意味着 <code>RibbonClientConfiguration</code> 是被延迟加载的，并且每个客户端的配置是相互隔离的，主要通过 <code>NamedContextFactory</code> 的子容器特性实现，这里不再详细赘述。</p><h2 id="客户端个性化配置"><a href="#客户端个性化配置" class="headerlink" title="客户端个性化配置"></a>客户端个性化配置</h2><hr><p>前面我们说过，Ribbon 是一种客户端负载均衡，虽然在一定程度上提高了程序的维护成本，但不可否认也带来了相当程度的灵活性，我们可以在客户端对任意一个服务提供方做定制化的配置，例如上文所说的自定义 <code>IPing</code>，我们可以让它的作用域仅限定于特定的客户端。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"provider"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token class-name">ConsumerApplication<span class="token punctuation">.</span>HealthCheckPing</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConsumerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HealthCheckPing</span> <span class="token keyword">implements</span> <span class="token class-name">IPing</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token class-name">Server</span> server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"http://%s/actuator/health"</span><span class="token punctuation">,</span> server<span class="token punctuation">.</span><span class="token function">getHostPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>UP<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"server instance &#123;&#125; not online!"</span><span class="token punctuation">,</span> server<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码所示，我们可以在 <code>@RibbonClient</code> 的 <code>configuration</code> 属性中注入相应的 Class 类型指定相关配置，这种方式具有很强的灵活性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Ribbon </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
